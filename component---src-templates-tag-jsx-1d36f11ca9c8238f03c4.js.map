{"version":3,"sources":["webpack:///./src/templates/tag.jsx","webpack:///./data/SiteConfig.js","webpack:///./src/layout/index.jsx","webpack:///./src/components/Tags/Tags.jsx","webpack:///./src/components/Tree/treehelper.js","webpack:///./src/components/PostListing/PostListing.jsx"],"names":["TagTemplate","render","tag","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layout__WEBPACK_IMPORTED_MODULE_3__","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","title","config","siteTitle","_components_PostListing_PostListing__WEBPACK_IMPORTED_MODULE_4__","React","Component","pageQuery","siteTitleShort","siteTitleAlt","siteLogo","siteUrl","pathPrefix","siteDescription","siteRss","siteFBAppID","googleAnalyticsID","disqusShortname","postDefaultCategoryID","dateFromFormat","dateFormat","userName","userEmail","userTwitter","userLocation","userAvatar","userDescription","userLinks","label","url","iconClassName","copyright","themeColor","backgroundColor","replace","substr","slice","module","exports","MainLayout","children","name","content","__webpack_require__","d","__webpack_exports__","getColor","PostListTags","TAGS_OUTSIDE","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_dnd__WEBPACK_IMPORTED_MODULE_3__","_Tree_treehelper__WEBPACK_IMPORTED_MODULE_4__","COLORS","str","sum","i","length","charCodeAt","PostListTag","_ref","refresh","_useDrag","useDrag","item","type","end","monitor","dropResult","getDropResult","addChild","node","collect","isDragging","drag","color","opacity","ref","key","style","_ref2","tags","map","Node","value","id","Math","random","toString","parent","isTemp","isFake","child","level","push","getRoot","findRoot","firsrOrderTraverseConsumer","consumer","prev","firsrOrderTraverseFind","res","getTreeArray","maxDepth","_spaceCount","recursiveAddCount","root","S","tmp","depth","nodes","cur","splice","childCount","_needToAdd","fakeNode","finalDepth","getLines","_domObject","start","getClientRects","x","left","width","y","top","height","concat","console","log","generate","PostListing","getPostList","postList","forEach","postEdge","rawMarkdownBody","paras","match","path","fields","slug","frontmatter","cover","date","excerpt","timeToRead","abstract","p","trim","join","_this","react__WEBPACK_IMPORTED_MODULE_3___default","post","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","_Tags_Tags__WEBPACK_IMPORTED_MODULE_5__"],"mappings":"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","file":"component---src-templates-tag-jsx-1d36f11ca9c8238f03c4.js","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport PostListing from \"../components/PostListing/PostListing\";\r\nimport config from \"../../data/SiteConfig\";\r\n\r\nexport default class TagTemplate extends React.Component {\r\n  render() {\r\n    const { tag } = this.props.pageContext;\r\n    const postEdges = this.props.data.allMarkdownRemark.edges;\r\n    return (\r\n      <Layout>\r\n        <div className=\"tag-container\">\r\n          <Helmet title={`Posts tagged as \"${tag}\" | ${config.siteTitle}`} />\r\n          <PostListing postEdges={postEdges} />\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query TagPage($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 1000\r\n      sort: { fields: [fields___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const config = {\r\n  siteTitle: \"MSKf's Tree BLOG\", // Site <title>.\r\n  siteTitleShort: \"MSKf's Tree\", // Short site title for homescreen (PWA). Preferably should be under 12 characters to prevent truncation.\r\n  siteTitleAlt: \"MSKF TREE BLOG\", // Alternative site title for SEO.\r\n  siteLogo: \"/logos/logo-1024.png\", // Logo used for SEO and manifest.\r\n  siteUrl: \"https://mskf.work\", // Domain of your website without pathPrefix.\r\n  pathPrefix: \"\", // Prefixes all links. For cases when deployed to example.github.io/gatsby-advanced-starter/.\r\n  siteDescription: \"\", // Website description used for RSS feeds/meta description tag.\r\n  siteRss: \"/rss.xml\", // Path to the RSS file.\r\n  siteFBAppID: \"1825356251115265\", // FB Application ID for using app insights\r\n  googleAnalyticsID: \"UA-47311644-5\", // GA tracking ID.\r\n  disqusShortname: \"mskf-work\", // Disqus shortname.\r\n  postDefaultCategoryID: \"Tech\", // Default category for posts. For Disqus\r\n  dateFromFormat: \"YYYY/MM/DD\", // Date format used in the frontmatter.\r\n  dateFormat: \"MM/DD/YYYY\", // Date format for display.\r\n  userName: \"mskf\", // Username to display in the author segment.\r\n  userEmail: \"gattonero1052@example.com\", // Email used for RSS feed's author segment\r\n  userTwitter: \"\", // Optionally renders \"Follow Me\" in the UserInfo segment.\r\n  userLocation: \"North Pole, Earth\", // User location to display in the author segment.\r\n  userAvatar: \"https://api.adorable.io/avatars/150/test.png\", // User avatar to display in the author segment.\r\n  userDescription:\r\n    \"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\", // User description to display in the author segment.\r\n  // Links to social profiles/projects you want to display in the author segment/navigation bar.\r\n  userLinks: [\r\n    {\r\n      label: \"GitHub\",\r\n      url: \"https://github.com/Vagr9K/gatsby-advanced-starter\",\r\n      iconClassName: \"fa fa-github\"\r\n    },\r\n    {\r\n      label: \"Twitter\",\r\n      url: \"https://twitter.com/Vagr9K\",\r\n      iconClassName: \"fa fa-twitter\"\r\n    },\r\n    {\r\n      label: \"Email\",\r\n      url: \"mailto:vagr9k@gmail.com\",\r\n      iconClassName: \"fa fa-envelope\"\r\n    }\r\n  ],\r\n  copyright: \"Copyright © 2019. Advanced User\", // Copyright string for the footer of the website and RSS feed.\r\n  themeColor: \"#c62828\", // Used for setting manifest and progress theme colors.\r\n  backgroundColor: \"#e0e0e0\" // Used for setting manifest background color.\r\n};\r\n\r\n// Validate\r\n\r\n// Make sure pathPrefix is empty if not needed\r\nif (config.pathPrefix === \"/\") {\r\n  config.pathPrefix = \"\";\r\n} else {\r\n  // Make sure pathPrefix only contains the first forward slash\r\n  config.pathPrefix = `/${config.pathPrefix.replace(/^\\/|\\/$/g, \"\")}`;\r\n}\r\n\r\n// Make sure siteUrl doesn't have an ending forward slash\r\nif (config.siteUrl.substr(-1) === \"/\")\r\n  config.siteUrl = config.siteUrl.slice(0, -1);\r\n\r\n// Make sure siteRss has a starting forward slash\r\nif (config.siteRss && config.siteRss[0] !== \"/\")\r\n  config.siteRss = `/${config.siteRss}`;\r\n\r\nmodule.exports = config;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport \"./index.css\";\r\n\r\nexport default class MainLayout extends React.Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <meta name=\"description\" content={config.siteDescription} />\r\n        </Helmet>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {Link} from \"gatsby\";\r\nimport './tags.css'\r\nimport {useDrag} from \"react-dnd\";\r\nimport {addChild} from \"../Tree/treehelper\";\r\n\r\nconst TAGS_OUTSIDE = '-1'\r\n\r\nconst COLORS = [\r\n  '#478BA2',\r\n  '#DE585D',\r\n  '#E97658',\r\n  '#E2A490',\r\n  '#89D4DB',\r\n]\r\n\r\nconst getColor = (str)=>{\r\n  let sum = 0\r\n  for (let i = 0; i < str.length; i++) {\r\n    sum+=str.charCodeAt(i)\r\n  }\r\n\r\n  return COLORS[sum%COLORS.length]\r\n}\r\n\r\nconst PostListTag = ({tag,refresh})=>{\r\n  const [{isDragging}, drag] = useDrag({\r\n    item: {name: tag, type: TAGS_OUTSIDE},\r\n    end: (item, monitor) => {\r\n      const dropResult = monitor.getDropResult()\r\n      if (item && dropResult) {\r\n        let child = addChild(dropResult.node,tag)\r\n        refresh()\r\n      }\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  })\r\n\r\n  const color = getColor(tag)\r\n\r\n  const opacity = isDragging ? 0.4 : 1\r\n\r\n  return (\r\n    <div ref={drag} key={tag} className='tag-item'  style={{\r\n      opacity, color\r\n    }}>\r\n      {tag}\r\n    </div>\r\n  )\r\n}\r\nconst PostListTags =({tags,refresh})=>{\r\n\r\n  return (<div className='tag-list'>\r\n      {tags.map(tag=>{\r\n        return (\r\n        <PostListTag key={tag} tag={tag} refresh={refresh}/>\r\n        )})}\r\n    </div>)\r\n}\r\n\r\n\r\n\r\nexport {getColor}\r\n\r\nexport {PostListTags,TAGS_OUTSIDE}","import {getColor} from \"../Tags/Tags\";\r\n\r\n/**\r\n * No node can have two child nodes sharing the same name\r\n *\r\n * Every node has a unique path from root, so to say, a unique full name\r\n *\r\n * Maximum height of the tree shown in the screen  is constant\r\n *\r\n * Maximum children of a node is constant\r\n *\r\n * Can only add tree nodes within such height\r\n *\r\n * Take the leaf node as a new root, so to add new node in the next level\r\n *\r\n * Search the full name of node to get it  as the root\r\n */\r\nclass Node {\r\n  constructor(value){\r\n    this.id = Math.random().toString().substr(2)\r\n    this.children = []\r\n    this.value = value\r\n    this.parent = null\r\n    this.isTemp = 0\r\n    this.isFake = 0\r\n  }\r\n}\r\n\r\nconst addChild = (node,value)=>{\r\n  let child = new Node(value)\r\n  child.parent = node\r\n  child.level = (node.level|0)+1\r\n  node.children.push(child)\r\n  return child\r\n}\r\n\r\nconst getRoot =  node =>{\r\n  if (node.parent==null) return node\r\n  return findRoot(node.parent)\r\n}\r\n\r\nconst firsrOrderTraverseConsumer = (node, consumer,prev) => {\r\n  if (!node) return\r\n\r\n  consumer(node,prev)\r\n\r\n  for (let i = 0; i < node.children.length; i++) {\r\n    firsrOrderTraverseConsumer(node.children[i], consumer,node)\r\n  }\r\n}\r\n\r\nconst firsrOrderTraverseFind = (node, id) => {\r\n  if (!node) return null\r\n  else if (node.id == id) return node\r\n\r\n  let res = null\r\n\r\n  for (let i = 0; !res && i < node.children.length; i++) {\r\n    res = firsrOrderTraverseFind(node.children[i], id)\r\n  }\r\n\r\n  return res\r\n}\r\n\r\nconst getFakeNode = ()=>{\r\n  const fakeNode = new Node('')\r\n  fakeNode.isFake = 1\r\n  return fakeNode\r\n}\r\n\r\nconst getTreeArray = (node, maxDepth) => {\r\n  //remove space count\r\n  firsrOrderTraverseConsumer(node,n=>n._spaceCount = 0)\r\n\r\n  const recursiveAddCount = (node, root) => {\r\n    while (node != root) {\r\n      node = node.parent\r\n      node._spaceCount = (node._spaceCount || 1) + 1\r\n    }\r\n  }\r\n\r\n  const S = 'SPLITTER'\r\n\r\n  let tmp = [node, S], depth = 0, nodes = [], childCount = 0, root = node\r\n  do {\r\n    while (tmp[0] != S) {\r\n      let cur = tmp.splice(0, 1)[0]\r\n      if (cur.children.length == 0) childCount++\r\n      if(cur._needToAdd)\r\n        recursiveAddCount(cur, root)\r\n      for (let i = 0; i < cur.children.length; i++) {\r\n        if (i>0) cur.children[i]._needToAdd = true\r\n        tmp.push(cur.children[i])\r\n      }\r\n    }\r\n    tmp.push(tmp.splice(0, 1)[0])\r\n    depth++\r\n  } while (depth < maxDepth && tmp.length > 1)\r\n\r\n  let finalDepth = depth\r\n\r\n  depth = 0\r\n\r\n  //把所有不是底层的叶子节点往下复制\r\n  tmp = [node, S]\r\n  do {\r\n    nodes[depth] = []\r\n    while (tmp[0] != S) {\r\n      let cur = tmp.splice(0, 1)[0]\r\n      if ((cur.isFake || cur.children.length == 0) && depth < finalDepth - 1) {\r\n        tmp.push(getFakeNode())\r\n      }\r\n\r\n      nodes[depth].push(cur)\r\n\r\n      cur.level = depth\r\n      if(cur.isFake) continue\r\n\r\n      for (let i = 0; i < cur.children.length; i++) {\r\n        tmp.push(cur.children[i])\r\n      }\r\n    }\r\n    tmp.push(tmp.splice(0, 1)[0])\r\n    depth++\r\n  } while (depth < maxDepth && tmp.length > 1)\r\n\r\n  for (let i = 0; i <= maxDepth - nodes.length; i++) {\r\n    nodes.push([])\r\n  }\r\n\r\n  return nodes\r\n}\r\n\r\nconst getLines = (node)=>{\r\n  if (!node || !node._domObject) return []\r\n\r\n  let start = node._domObject.getClientRects()[0], res = []\r\n\r\n  if (!start || !start.x) return []\r\n\r\n  for (let i = 0; i < node.children.length; i++) {\r\n    if(!node.children[i]._domObject) continue\r\n    let end =  node.children[i]._domObject.getClientRects()[0]\r\n    res.push({\r\n      color:getColor(node.value),\r\n      start:{\r\n        x:start.left+start.width/2,\r\n        y:start.top+start.height/2,\r\n      },\r\n      end:{\r\n        x:end.left+end.width/2,\r\n        y:end.top+end.height/2,\r\n      }\r\n    })\r\n\r\n    res=res.concat(getLines(node.children[i]))\r\n    console.log(res)\r\n  }\r\n\r\n  return res\r\n}\r\n\r\nconst generate = ()=>{\r\n  let root = new Node('ROOT')\r\n  root.id='root'\r\n  root.level = 0\r\n  return root\r\n}\r\n\r\nconst generateTest = ()=>{\r\n  // let root = new Node(1)\r\n  // let f11 = new Node(2),\r\n  //   f12 = new Node(3),\r\n  //   f21 = new Node(4),\r\n  //   f22 = new Node(5),\r\n  //   f23 = new Node(6),\r\n  //   f24 = new Node(7)\r\n  // root.children.push(f11)\r\n  // root.children.push(f12)\r\n  // f11.parent = root\r\n  // f12.parent = root\r\n  //\r\n  // f11.children.push(f21)\r\n  // f11.children.push(f22)\r\n  // f21.parent = f11\r\n  // f22.parent = f11\r\n  //\r\n  // f12.children.push(f23)\r\n  // f12.children.push(f24)\r\n  // f23.parent = f12\r\n  // f24.parent = f12\r\n\r\n  let root = new Node(1)\r\n  root.id='root'\r\n  let f11 = new Node(2),\r\n    f12 = new Node(3),\r\n    f13 = new Node(4),\r\n    f21 = new Node(5),\r\n    f22 = new Node(6),\r\n    f23 = new Node(7),\r\n    f24 = new Node(8)\r\n  root.children.push(f11)\r\n  root.children.push(f12)\r\n  root.children.push(f13)\r\n  f11.parent = root\r\n  f12.parent = root\r\n  f13.parent = root\r\n\r\n  f11.children.push(f21)\r\n  f12.children.push(f22)\r\n  f21.parent = f11\r\n  f22.parent = f12\r\n\r\n  f13.children.push(f23)\r\n  f13.children.push(f24)\r\n  f23.parent = f13\r\n  f24.parent = f13\r\n  return root\r\n}\r\n\r\nexport {addChild,getRoot,firsrOrderTraverseConsumer,firsrOrderTraverseFind,getTreeArray,generate,getLines}","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport {PostListTags} from '../Tags/Tags'\r\nimport './list.css'\r\n\r\nclass PostListing extends React.Component {\r\n  getPostList() {\r\n    const postList = [];\r\n    this.props.postEdges.forEach(postEdge => {\r\n      if(!postEdge.node.rawMarkdownBody) return\r\n      let paras = postEdge.node.rawMarkdownBody.match(/(#{1,5} .*[\\n\\r])/g) || []\r\n      postList.push({\r\n        path: postEdge.node.fields.slug,\r\n        tags: postEdge.node.frontmatter.tags||[],\r\n        cover: postEdge.node.frontmatter.cover,\r\n        title: postEdge.node.frontmatter.title,\r\n        date: postEdge.node.fields.date,\r\n        excerpt: postEdge.node.excerpt,\r\n        timeToRead: postEdge.node.timeToRead,\r\n        abstract:postEdge.node.frontmatter.abstract || paras.map(p=>p.replace(/^#+/,'').trim()).join('  ')\r\n      });\r\n    });\r\n    return postList;\r\n  }\r\n\r\n  render() {\r\n    const postList = this.getPostList();\r\n    return (\r\n      <div>\r\n        {\r\n        postList.map(post => (\r\n          <div className='post-list' key={post.path}>\r\n            <div className='post-left'>\r\n              <div className='post-title'>\r\n                <Link to={post.path} key={post.title}>\r\n                  {post.title}\r\n                </Link>\r\n              </div>\r\n              <div className='post-tags'></div>\r\n              <div className='post-abstract'>{post.abstract}</div>\r\n            </div>\r\n            <div className='post-right'>\r\n              <div className='post-tags'>\r\n                <PostListTags refresh={this.props.refresh} tags ={post.tags}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostListing;\r\n"],"sourceRoot":""}