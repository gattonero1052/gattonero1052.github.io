{"version":3,"sources":["webpack:///./src/components/Tree/tree.jsx","webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx","webpack:///./node_modules/lodash/union.js"],"names":["TreeLevelsArray","TreeLevel","level","accept","nodes","lastDroppedItem","onDrop","refresh","addTagsCb","useDrop","drop","collect","monitor","isOver","canDrop","isActive","className","ref","map","node","TreeNode","key","id","inputRef","React","createRef","MAX_DEPTH","TAGS_OUTSIDE","useDrag","item","name","value","type","end","dropResult","getDropResult","isTreeTitle","tags","cur","push","parent","addChild","isTemp","i","children","length","splice","isDragging","drag","opacity","color","getColor","_domObject","style","flex","_spaceCount","isFake","defaultValue","input","autoFocus","onKeyPress","e","onDoubleClick","TreeTitle","toggleTree","onClick","Tree","args","state","displayPanel","root","getTree","forceRefresh","lines","rootId","filteringTags","getBlogSetting","componentDidMount","this","refreshTree","tree","props","refreshBinder","bind","refreshTagList","setState","getTreeNodes","setBlogSetting","dispatch","removeTagCb","tag","filter","t","componentDidUpdate","prevProps","prevState","snapshot","setTree","getLines","data","firsrOrderTraverseFind","getTreeArray","render","nodes2d","display","line","strokeWidth","x1","start","x","y1","y","x2","y2","stroke","tagItemClass","margin","draggable","nodes1d","concat","Component","Index","callBacks","refreshArticleList","undefined","refreshBindBack","action","params","binder","postEdges","allMarkdownRemark","edges","edge","frontmatter","draft","backend","HTML5Backend","title","config","siteTitle","normalize","strArray","resultArray","TypeError","match","first","shift","replace","component","str","join","parts","split","arguments","slice","call","module","exports","definition","SEO","description","image","postURL","postNode","postPath","postSEO","postMeta","excerpt","cover","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","url","alternateName","siteTitleAlt","itemListElement","position","headline","content","JSON","stringify","property","siteFBAppID","userTwitter","baseFlatten","baseRest","baseUniq","isArrayLikeObject","union","arrays"],"mappings":"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","file":"component---src-pages-index-jsx-7358836b0bd67d50c294.js","sourcesContent":["import React, {useState, useCallback} from 'react'\r\nimport './tree.css'\r\nimport {getColor, PostListTags, TAGS_OUTSIDE} from \"../Tags/Tags\";\r\nimport {useDrag, useDrop} from 'react-dnd'\r\nimport {addChild,firsrOrderTraverseFind, getTreeArray, getLines, generate} from './treehelper'\r\nimport _ from 'lodash'\r\nimport {getTree,setTree,getBlogSetting,setBlogSetting} from \"../Data/localstorage\";\r\n\r\nconst MAX_DEPTH = 4\r\n\r\n\r\nconst TreeLevels = {\r\n  ONE: '1',\r\n  TWO: '2',\r\n  THREE: '3',\r\n  FOUR: '4',\r\n  FIVE: '5',\r\n}\r\n\r\nconst TreeLevelsArray = [TreeLevels.ONE, TreeLevels.TWO, TreeLevels.THREE, TreeLevels.FOUR]\r\n\r\n\r\nconst TreeLevel = ({level, accept, lastDroppedItem, onDrop, nodes, refresh,addTagsCb}) => {\r\n  const [{isOver, canDrop}, drop] = useDrop({\r\n    accept,\r\n    drop: () => ({\r\n      level\r\n    }),\r\n    collect: monitor => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  })\r\n\r\n  const isActive = canDrop && isOver\r\n\r\n  return (\r\n    <div className={`nodes-horizontal ${isActive?'blink':''}`}\r\n         ref={drop}>\r\n      {nodes.map(node => (\r\n        <TreeNode refresh={refresh} node={node} key={node.id} addTagsCb={addTagsCb}/>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TreeNode = ({node, refresh,addTagsCb}) => {\r\n  let inputRef = React.createRef()\r\n  const onKeyPressTemp = e => {\r\n    if (e.key == 'Enter') {\r\n      node.value = inputRef.value || '-'\r\n      node.isTemp = 0\r\n      refresh()\r\n    }\r\n  }\r\n\r\n  const onDoubleClickNode = e=>{\r\n    node.isTemp = 1\r\n    refresh()\r\n  }\r\n\r\n  const [{isOver, canDrop}, drop] = useDrop({\r\n    accept:node.level===MAX_DEPTH-1?[]:[TAGS_OUTSIDE],\r\n    drop: () => ({\r\n      node\r\n    }),\r\n    collect: monitor => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  })\r\n\r\n  const [{isDragging}, drag] = useDrag({\r\n    item: {name: node.value, type: TreeLevelsArray[node.level]},\r\n    end: (item, monitor) => {\r\n      const dropResult = monitor.getDropResult()\r\n\r\n      //dragged to title\r\n      if(item && dropResult && dropResult.isTreeTitle){\r\n        //get node and it's parents\r\n        let tags = [], cur = node\r\n        while(cur.id!='root'){\r\n          tags.push(cur.value)\r\n          cur = cur.parent\r\n        }\r\n\r\n        addTagsCb(tags)\r\n        return\r\n      }\r\n\r\n      //removed to another level\r\n      if (item && dropResult) {\r\n        if(dropResult.level>node.level){\r\n          let child = addChild(node,'')\r\n          child.isTemp = 1\r\n          refresh()\r\n        }else if (dropResult.level<node.level){\r\n          let i = 0\r\n          for (; i < node.parent.children.length; i++) {\r\n            if (node === node.parent.children[i]) break;\r\n          }\r\n\r\n          node.parent.children.splice(i,1)\r\n          refresh()\r\n        }\r\n      }\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  })\r\n\r\n  const isActive = canDrop && isOver\r\n\r\n  const opacity = isDragging ? 0.4 : (isActive?.2:1)\r\n\r\n  const color = getColor(node.value)\r\n\r\n\r\n  return (\r\n    <div ref={ref=>node._domObject = ref} className='nodes-node' style={{flex: node._spaceCount || 1}}>\r\n      {node.isFake?'':\r\n        <div ref={drag} className='tag-item' style={{opacity, color}}>\r\n          <div ref={drop}>\r\n          {node.isTemp ?\r\n            <div className='tree-node-input'>\r\n              <input type=\"text\" defaultValue={node.value} ref={input => inputRef = input} autoFocus={true} onKeyPress={onKeyPressTemp}/>\r\n            </div>\r\n            :\r\n            <div onDoubleClick={onDoubleClickNode}>{node.value}</div>\r\n          }\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TreeTitle = ({toggleTree})=>{\r\n  const [{isOver, canDrop}, drop] = useDrop({\r\n    accept:TreeLevelsArray,\r\n    drop: () => ({isTreeTitle:true}),\r\n    collect: monitor => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  })\r\n\r\n  return (<div className='tree-title' ref={drop} onClick={toggleTree}>Tree</div>)\r\n}\r\n\r\nclass Tree extends React.Component {\r\n  state = {\r\n    displayPanel: false,\r\n    nodes: []\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args)\r\n    let root = getTree()\r\n\r\n    this.state = {\r\n      forceRefresh:false,\r\n      nodes:[],\r\n      lines: [],\r\n      root,\r\n      rootId: 'root',\r\n      filteringTags:getBlogSetting('filteringTags')\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshTree({tree: this.state.root, id: 'root'})\r\n\r\n    //bind refresh back\r\n    this.props.refreshBinder({\r\n      refreshTree:this.refresh.bind(this),\r\n      refreshTagList:this.refreshTagList.bind(this)\r\n    })\r\n  }\r\n\r\n  refresh(){\r\n    this.refreshTree({tree: this.state.root, id: this.state.rootId})\r\n  }\r\n\r\n  refreshTagList({filteringTags}){\r\n    this.setState({\r\n      filteringTags\r\n    })\r\n  }\r\n\r\n  refreshTree({tree, id}) {\r\n    this.setState({\r\n      forceRefresh:!this.state.forceRefresh,\r\n      nodes: this.getTreeNodes({\r\n        tree, id\r\n      })\r\n    })\r\n  }\r\n  //add a specified tag and it's parent tags\r\n  addTagsCb(tags){\r\n    let filteringTags = _.union(this.state.filteringTags,tags)\r\n    this.refreshTagList({filteringTags})\r\n    setBlogSetting({filteringTags})\r\n    this.props.dispatch('refreshArticleList',{filteringTags})\r\n  }\r\n\r\n\r\n  removeTagCb(tag){\r\n    let filteringTags = this.state.filteringTags = this.state.filteringTags.filter(t=>t!==tag)\r\n    this.refreshTagList({filteringTags})\r\n    setBlogSetting({filteringTags})\r\n    this.props.dispatch('refreshArticleList',{filteringTags})\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevState.displayPanel != this.state.displayPanel || prevState.forceRefresh!=this.state.forceRefresh) {\r\n      setTree(this.state.root)\r\n\r\n      let lines = getLines(this.state.nodes[0][0])\r\n\r\n      this.setState({lines})\r\n    }\r\n  }\r\n\r\n  getTreeNodes(data) {\r\n    let node = firsrOrderTraverseFind(data.tree, data.id)\r\n    if (!node) return\r\n    let nodes = getTreeArray(node, MAX_DEPTH)\r\n    return nodes\r\n  }\r\n\r\n\r\n  toggleTree() {\r\n    this.setState({\r\n      displayPanel: !this.state.displayPanel\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let nodes2d = this.state.nodes || []\r\n    return (\r\n      <div className=''>\r\n        <svg className='tree-svg' style={{\r\n          display: this.state.displayPanel ? 'inherit' : 'none'\r\n        }}>\r\n          {this.state.lines.map((line,i) => (\r\n            <line key={i} strokeWidth='10' x1={line.start.x} y1={line.start.y} x2={line.end.x} y2={line.end.y} stroke={line.color}/>\r\n          ))}\r\n        </svg>\r\n        <div className='tree-wrapper'>\r\n          <div className='tree'>\r\n            <TreeTitle toggleTree={this.toggleTree.bind(this)}/>\r\n            <div className='tree-filtering-tags'>\r\n              <PostListTags tagItemClass={{margin:'5px 5px'}} draggable={false} tags={this.state.filteringTags} removeTagCb={this.removeTagCb.bind(this)}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='tree-panel' style={{\r\n          display: this.state.displayPanel ? 'flex' : 'none'\r\n        }}>\r\n          <div className='tree-body'>\r\n            <div className='tree-content'>\r\n              {nodes2d.map((nodes1d, i) => (\r\n                <TreeLevel level={i} refresh={this.refresh.bind(this)} addTagsCb = {this.addTagsCb.bind(this)}\r\n                           key={i} nodes={nodes1d} accept={\r\n                  [].concat(i > 0 ? TreeLevelsArray[i - 1] : [])\r\n                  .concat(i <TreeLevelsArray.length-1 ? TreeLevelsArray[i + 1] : [])}/>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Tree\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport PostListing from \"../components/PostListing/PostListing\";\r\nimport SEO from \"../components/SEO/SEO\";\r\nimport Tree from \"../components/Tree/tree\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport './index.css'\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\n\r\nclass Index extends React.Component {\r\n  callBacks = {\r\n    refreshArticleList:undefined,\r\n    refreshTagList:undefined,\r\n    refreshTree:undefined\r\n  }\r\n\r\n  refresh(){\r\n    if(typeof this.refreshBindBack === 'function') this.refreshBindBack()\r\n  }\r\n\r\n  dispatch(action,...params){\r\n    // console.log(arguments)\r\n      if(typeof this.callBacks[action] == 'function') this.callBacks[action](...params)\r\n  }\r\n\r\n  refreshBinder(binder){\r\n    this.callBacks = {...this.callBacks,...binder}\r\n  }\r\n\r\n  render() {\r\n    //ignore drafts\r\n    const postEdges = this.props.data.allMarkdownRemark.edges.filter(edge=> !edge.node.frontmatter.draft)\r\n    return (\r\n      <DndProvider backend={HTML5Backend}>\r\n        <Layout>\r\n          <div className=\"index-container\">\r\n            <Helmet title={config.siteTitle} />\r\n            <SEO />\r\n            <Tree refreshBinder={this.refreshBinder.bind(this)} dispatch={this.dispatch.bind(this)}/>\r\n            <PostListing refreshBinder= {this.refreshBinder.bind(this)} dispatch={this.dispatch.bind(this)} refresh={this.refresh.bind(this)} postEdges={postEdges} />\r\n          </div>\r\n        </Layout>\r\n      </DndProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [fields___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          rawMarkdownBody\r\n          frontmatter {\r\n            abstract\r\n            draft\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props;\r\n    let title;\r\n    let description;\r\n    let image;\r\n    let postURL;\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter;\r\n      ({ title } = postMeta);\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt;\r\n      image = postMeta.cover;\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    } else {\r\n      title = config.siteTitle;\r\n      description = config.siteDescription;\r\n      image = config.siteLogo;\r\n    }\r\n\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\r\n      }\r\n    ];\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BreadcrumbList\",\r\n          itemListElement: [\r\n            {\r\n              \"@type\": \"ListItem\",\r\n              position: 1,\r\n              item: {\r\n                \"@id\": postURL,\r\n                name: title,\r\n                image\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BlogPosting\",\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n          headline: title,\r\n          image: {\r\n            \"@type\": \"ImageObject\",\r\n            url: image\r\n          },\r\n          description\r\n        }\r\n      );\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : \"\"}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SEO;\r\n","var baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nmodule.exports = union;\n"],"sourceRoot":""}