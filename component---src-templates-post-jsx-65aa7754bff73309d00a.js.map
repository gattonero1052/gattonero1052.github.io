{"version":3,"sources":["webpack:///./src/components/UserInfo/UserInfo.jsx","webpack:///./src/components/Disqus/Disqus.jsx","webpack:///./src/components/PostTags/PostTags.jsx","webpack:///./src/components/SocialLinks/SocialLinks.jsx","webpack:///./src/templates/post.jsx","webpack:///./data/SiteConfig.js","webpack:///./src/layout/index.jsx","webpack:///./src/components/SEO/SEO.jsx"],"names":["UserInfo","render","userTwitter","this","props","config","expanded","react_default","a","createElement","dist","username","options","count","Component","Disqus","_this","_Component","call","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","postNode","disqusShortname","post","frontmatter","url","urljoin","siteUrl","pathPrefix","fields","slug","console","log","title","category_id","main_default","shortname","identifier","onNewComment","PostTags","tags","className","map","tag","gatsby_browser_entry","key","style","textDecoration","to","kebabCase_default","SocialLinks","_this$props","postPath","mobile","iconSize","renderShareCount","filter","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","LinkedinShareButton","description","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","PostTemplate","data","pageContext","markdownRemark","id","postDefaultCategoryID","layout","Helmet_default","siteTitle","SEO","postSEO","dangerouslySetInnerHTML","__html","html","components_PostTags_PostTags","components_SocialLinks_SocialLinks","components_UserInfo_UserInfo","components_Disqus_Disqus","React","pageQuery","siteTitleShort","siteTitleAlt","siteLogo","siteDescription","siteRss","siteFBAppID","googleAnalyticsID","dateFromFormat","dateFormat","userName","userEmail","userLocation","userAvatar","userDescription","userLinks","label","iconClassName","copyright","themeColor","backgroundColor","replace","substr","module","exports","MainLayout","children","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","name","content","image","postURL","postMeta","cover","blogURL","schemaOrgJSONLD","@context","@type","alternateName","itemListElement","position","item","@id","headline","type","JSON","stringify","property"],"mappings":"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","file":"component---src-templates-post-jsx-65aa7754bff73309d00a.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Follow } from \"react-twitter-widgets\";\r\n\r\nclass UserInfo extends Component {\r\n  render() {\r\n    const { userTwitter } = this.props.config;\r\n    const { expanded } = this.props;\r\n    return (\r\n      <Follow\r\n        username={userTwitter}\r\n        options={{ count: expanded ? true : \"none\" }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserInfo;\r\n","import React, { Component } from \"react\";\r\nimport ReactDisqusComments from \"react-disqus-comments\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass Disqus extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      toasts: []\r\n    };\r\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\r\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\r\n  }\r\n\r\n  onSnackbarDismiss() {\r\n    const [, ...toasts] = this.state.toasts;\r\n    this.setState({ toasts });\r\n  }\r\n  notifyAboutComment() {\r\n    const toasts = this.state.toasts.slice();\r\n    toasts.push({ text: \"New comment available!\" });\r\n    this.setState({ toasts });\r\n  }\r\n  render() {\r\n    const { postNode } = this.props;\r\n    if (!config.disqusShortname) {\r\n      return null;\r\n    }\r\n    const post = postNode.frontmatter;\r\n    const url = urljoin(\r\n      config.siteUrl,\r\n      config.pathPrefix,\r\n      postNode.fields.slug\r\n    );\r\n    console.log(config.disqusShortname)\r\n    console.log(post.title)\r\n    console.log(url)\r\n    console.log(post.category_id)\r\n    console.log(this.notifyAboutComment)\r\n    return (\r\n      <ReactDisqusComments\r\n        shortname={config.disqusShortname}\r\n        identifier={post.title}\r\n        title={post.title}\r\n        url={url}\r\n        category_id={post.category_id}\r\n        onNewComment={this.notifyAboutComment}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Disqus;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"gatsby\";\r\n\r\nclass PostTags extends Component {\r\n  render() {\r\n    const { tags } = this.props;\r\n    return (\r\n      <div className=\"post-tag-container\">\r\n        {tags &&\r\n          tags.map(tag => (\r\n            <Link\r\n              key={tag}\r\n              style={{ textDecoration: \"none\" }}\r\n              to={`/tags/${_.kebabCase(tag)}`}\r\n            >\r\n              <button>{tag}</button>\r\n            </Link>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostTags;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  FacebookShareButton,\r\n  LinkedinShareButton,\r\n  TwitterShareButton,\r\n  TelegramShareButton,\r\n  RedditShareButton,\r\n  FacebookShareCount,\r\n  LinkedinShareCount,\r\n  RedditShareCount,\r\n  FacebookIcon,\r\n  TwitterIcon,\r\n  TelegramIcon,\r\n  LinkedinIcon,\r\n  RedditIcon\r\n} from \"react-share\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\nimport \"./SocialLinks.css\";\r\n\r\nclass SocialLinks extends Component {\r\n  render() {\r\n    const { postNode, postPath, mobile } = this.props;\r\n    const post = postNode.frontmatter;\r\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    const iconSize = mobile ? 36 : 48;\r\n    const filter = count => (count > 0 ? count : \"\");\r\n    const renderShareCount = count => (\r\n      <div className=\"share-count\">{filter(count)}</div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"social-links\">\r\n        <RedditShareButton url={url} title={post.title}>\r\n          <RedditIcon round size={iconSize} />\r\n          <RedditShareCount url={url}>\r\n            {count => renderShareCount(count)}\r\n          </RedditShareCount>\r\n        </RedditShareButton>\r\n        <TwitterShareButton url={url} title={post.title}>\r\n          <TwitterIcon round size={iconSize} />\r\n        </TwitterShareButton>\r\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\r\n          <FacebookIcon round size={iconSize} />\r\n          <FacebookShareCount url={url}>\r\n            {count => renderShareCount(count)}\r\n          </FacebookShareCount>\r\n        </FacebookShareButton>\r\n        <LinkedinShareButton\r\n          url={url}\r\n          title={post.title}\r\n          description={postNode.excerpt}\r\n        >\r\n          <LinkedinIcon round size={iconSize} />\r\n          <LinkedinShareCount url={url}>\r\n            {count => renderShareCount(count)}\r\n          </LinkedinShareCount>\r\n        </LinkedinShareButton>\r\n        <TelegramShareButton url={url}>\r\n          <TelegramIcon round size={iconSize} />\r\n        </TelegramShareButton>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SocialLinks;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport UserInfo from \"../components/UserInfo/UserInfo\";\r\nimport Disqus from \"../components/Disqus/Disqus\";\r\nimport PostTags from \"../components/PostTags/PostTags\";\r\nimport SocialLinks from \"../components/SocialLinks/SocialLinks\";\r\nimport SEO from \"../components/SEO/SEO\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport \"./b16-tomorrow-dark.css\";\r\nimport \"./post.css\";\r\n\r\nexport default class PostTemplate extends React.Component {\r\n  render() {\r\n    const { data, pageContext } = this.props;\r\n    const { slug } = pageContext;\r\n    const postNode = data.markdownRemark;\r\n    const post = postNode.frontmatter;\r\n    if (!post.id) {\r\n      post.id = slug;\r\n    }\r\n    if (!post.category_id) {\r\n      post.category_id = config.postDefaultCategoryID;\r\n    }\r\n    return (\r\n      <Layout>\r\n        <div>\r\n          <Helmet>\r\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\r\n          </Helmet>\r\n          <SEO postPath={slug} postNode={postNode} postSEO />\r\n          <div>\r\n            <h1>{post.title}</h1>\r\n            <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\r\n            <div className=\"post-meta\">\r\n              <PostTags tags={post.tags} />\r\n              <SocialLinks postPath={slug} postNode={postNode} />\r\n            </div>\r\n            <UserInfo config={config} />\r\n            <Disqus postNode={postNode} />\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      timeToRead\r\n      excerpt\r\n      frontmatter {\r\n        title\r\n        cover\r\n        date\r\n        category\r\n        tags\r\n      }\r\n      fields {\r\n        slug\r\n        date\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const config = {\r\n  siteTitle: \"MSKf's Tree BLOG\", // Site <title>.\r\n  siteTitleShort: \"MSKf's Tree\", // Short site title for homescreen (PWA). Preferably should be under 12 characters to prevent truncation.\r\n  siteTitleAlt: \"MSKF TREE BLOG\", // Alternative site title for SEO.\r\n  siteLogo: \"/logos/logo-1024.png\", // Logo used for SEO and manifest.\r\n  siteUrl: \"https://mskf.work\", // Domain of your website without pathPrefix.\r\n  pathPrefix: \"\", // Prefixes all links. For cases when deployed to example.github.io/gatsby-advanced-starter/.\r\n  siteDescription: \"\", // Website description used for RSS feeds/meta description tag.\r\n  siteRss: \"/rss.xml\", // Path to the RSS file.\r\n  siteFBAppID: \"1825356251115265\", // FB Application ID for using app insights\r\n  googleAnalyticsID: \"UA-47311644-5\", // GA tracking ID.\r\n  disqusShortname: \"mskf-work\", // Disqus shortname.\r\n  postDefaultCategoryID: \"Tech\", // Default category for posts. For Disqus\r\n  dateFromFormat: \"YYYY/MM/DD\", // Date format used in the frontmatter.\r\n  dateFormat: \"MM/DD/YYYY\", // Date format for display.\r\n  userName: \"mskf\", // Username to display in the author segment.\r\n  userEmail: \"gattonero1052@example.com\", // Email used for RSS feed's author segment\r\n  userTwitter: \"\", // Optionally renders \"Follow Me\" in the UserInfo segment.\r\n  userLocation: \"North Pole, Earth\", // User location to display in the author segment.\r\n  userAvatar: \"https://api.adorable.io/avatars/150/test.png\", // User avatar to display in the author segment.\r\n  userDescription:\r\n    \"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\", // User description to display in the author segment.\r\n  // Links to social profiles/projects you want to display in the author segment/navigation bar.\r\n  userLinks: [\r\n    {\r\n      label: \"GitHub\",\r\n      url: \"https://github.com/Vagr9K/gatsby-advanced-starter\",\r\n      iconClassName: \"fa fa-github\"\r\n    },\r\n    {\r\n      label: \"Twitter\",\r\n      url: \"https://twitter.com/Vagr9K\",\r\n      iconClassName: \"fa fa-twitter\"\r\n    },\r\n    {\r\n      label: \"Email\",\r\n      url: \"mailto:vagr9k@gmail.com\",\r\n      iconClassName: \"fa fa-envelope\"\r\n    }\r\n  ],\r\n  copyright: \"Copyright © 2019. Advanced User\", // Copyright string for the footer of the website and RSS feed.\r\n  themeColor: \"#c62828\", // Used for setting manifest and progress theme colors.\r\n  backgroundColor: \"#e0e0e0\" // Used for setting manifest background color.\r\n};\r\n\r\n// Validate\r\n\r\n// Make sure pathPrefix is empty if not needed\r\nif (config.pathPrefix === \"/\") {\r\n  config.pathPrefix = \"\";\r\n} else {\r\n  // Make sure pathPrefix only contains the first forward slash\r\n  config.pathPrefix = `/${config.pathPrefix.replace(/^\\/|\\/$/g, \"\")}`;\r\n}\r\n\r\n// Make sure siteUrl doesn't have an ending forward slash\r\nif (config.siteUrl.substr(-1) === \"/\")\r\n  config.siteUrl = config.siteUrl.slice(0, -1);\r\n\r\n// Make sure siteRss has a starting forward slash\r\nif (config.siteRss && config.siteRss[0] !== \"/\")\r\n  config.siteRss = `/${config.siteRss}`;\r\n\r\nmodule.exports = config;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport \"./index.css\";\r\n\r\nexport default class MainLayout extends React.Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <meta name=\"description\" content={config.siteDescription} />\r\n        </Helmet>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props;\r\n    let title;\r\n    let description;\r\n    let image;\r\n    let postURL;\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter;\r\n      ({ title } = postMeta);\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt;\r\n      image = postMeta.cover;\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    } else {\r\n      title = config.siteTitle;\r\n      description = config.siteDescription;\r\n      image = config.siteLogo;\r\n    }\r\n\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\r\n      }\r\n    ];\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BreadcrumbList\",\r\n          itemListElement: [\r\n            {\r\n              \"@type\": \"ListItem\",\r\n              position: 1,\r\n              item: {\r\n                \"@id\": postURL,\r\n                name: title,\r\n                image\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BlogPosting\",\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n          headline: title,\r\n          image: {\r\n            \"@type\": \"ImageObject\",\r\n            url: image\r\n          },\r\n          description\r\n        }\r\n      );\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : \"\"}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}