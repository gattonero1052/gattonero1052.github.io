{"version":3,"sources":["webpack://blog/./src/templates/tag.jsx"],"names":["TagTemplate","refresh","this","refreshBindBack","dispatch","action","params","callBacks","refreshBinder","binder","render","tag","props","pageContext","data","allMdx","edges","filter","edge","node","frontmatter","draft","className","title","config","React"],"mappings":"yyBAOqBA,E,sGACnBC,QAAA,WACqC,mBAAzBC,KAAKC,iBAAgCD,KAAKC,mB,EAGtDC,SAAA,SAASC,GAAiB,IAAC,IAAD,qBAAPC,EAAO,iCAAPA,EAAO,kBAEY,mBAA1BJ,KAAKK,UAAUF,KAAuB,EAAAH,KAAKK,WAAUF,GAAf,QAA0BC,I,EAG5EE,cAAA,SAAcC,GACZP,KAAKK,UAAL,OAAqBL,KAAKK,WAAaE,I,EAGzCC,OAAA,WACE,IAAQC,EAAQT,KAAKU,MAAMC,YAAnBF,IAGUT,KAAKU,MAAME,KAAKC,OAAOC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,SAGpF,OACE,gBAAC,IAAD,KACE,uBAAKC,UAAU,iBACb,gBAAC,IAAD,CAAQC,MAAK,oBAAsBZ,EAAtB,OAAgCa,mB,GAxBdC","file":"component---src-templates-tag-jsx-f929d8384100d35f6df4.js","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport PostListing from \"../components/PostListing/PostListing\";\r\nimport config from \"../../data/SiteConfig\";\r\n\r\nexport default class TagTemplate extends React.Component {\r\n  refresh(){\r\n    if(typeof this.refreshBindBack === 'function') this.refreshBindBack()\r\n  }\r\n\r\n  dispatch(action,...params){\r\n    // console.log(arguments)\r\n    if(typeof this.callBacks[action] == 'function') this.callBacks[action](...params)\r\n  }\r\n\r\n  refreshBinder(binder){\r\n    this.callBacks = {...this.callBacks,...binder}\r\n  }\r\n\r\n  render() {\r\n    const { tag } = this.props.pageContext;\r\n    \r\n    //ignore drafts\r\n    const postEdges = this.props.data.allMdx.edges.filter(edge=> !edge.node.frontmatter.draft)\r\n\r\n    //console.log(postEdges)\r\n    return (\r\n      <Layout>\r\n        <div className=\"tag-container\">\r\n          <Helmet title={`Posts tagged as \"${tag}\" | ${config.siteTitle}`} />\r\n          {/* <PostListing refreshBinder= {this.refreshBinder.bind(this)} dispatch={this.dispatch.bind(this)} refresh={this.refresh.bind(this)} postEdges={postEdges} /> */}\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query TagPage($tag: String) {\r\n    allMdx(\r\n      limit: 1000\r\n      sort: { fields: [fields___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          body\r\n          frontmatter {\r\n            abstract\r\n            draft\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}