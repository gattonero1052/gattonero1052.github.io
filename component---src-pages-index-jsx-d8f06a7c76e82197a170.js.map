{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx"],"names":["Index","callBacks","refreshArticleList","undefined","refreshTagList","refreshTree","refresh","this","refreshBindBack","dispatch","action","params","refreshBinder","binder","render","postEdges","props","data","allMdx","edges","filter","edge","node","frontmatter","draft","backend","HTML5Backend","className","title","config","siteTitle","bind","React","Component","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","SEO","description","image","postURL","postNode","postPath","postSEO","postMeta","excerpt","cover","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-pages-index-jsx-d8f06a7c76e82197a170.js","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport PostListing from \"../components/PostListing/PostListing\";\r\nimport SEO from \"../components/SEO/SEO\";\r\nimport Tree from \"../components/Tree/tree\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport './index.css'\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\n\r\nclass Index extends React.Component {\r\n  callBacks = {\r\n    refreshArticleList:undefined,\r\n    refreshTagList:undefined,\r\n    refreshTree:undefined\r\n  }\r\n\r\n  refresh(){\r\n    if(typeof this.refreshBindBack === 'function') this.refreshBindBack()\r\n  }\r\n\r\n  dispatch(action,...params){\r\n    // console.log(arguments)\r\n      if(typeof this.callBacks[action] == 'function') this.callBacks[action](...params)\r\n  }\r\n\r\n  refreshBinder(binder){\r\n    this.callBacks = {...this.callBacks,...binder}\r\n  }\r\n\r\n  render() {\r\n    //ignore drafts\r\n    const postEdges = this.props.data.allMdx.edges.filter(edge=> !edge.node.frontmatter.draft)\r\n    return (\r\n      <DndProvider backend={HTML5Backend}>\r\n        <Layout>\r\n          <div className=\"index-container\">\r\n            <Helmet title={config.siteTitle} />\r\n            <SEO />\r\n            {/* <Tree refreshBinder={this.refreshBinder.bind(this)} dispatch={this.dispatch.bind(this)}/> */}\r\n            <PostListing refreshBinder= {this.refreshBinder.bind(this)} dispatch={this.dispatch.bind(this)} refresh={this.refresh.bind(this)} postEdges={postEdges} />\r\n          </div>\r\n        </Layout>\r\n      </DndProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    allMdx(\r\n      limit: 2000\r\n      sort: { fields: [fields___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          body\r\n          frontmatter {\r\n            abstract\r\n            draft\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props;\r\n    let title;\r\n    let description;\r\n    let image;\r\n    let postURL;\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter;\r\n      ({ title } = postMeta);\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt;\r\n      image = postMeta.cover;\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    } else {\r\n      title = config.siteTitle;\r\n      description = config.siteDescription;\r\n      image = config.siteLogo;\r\n    }\r\n\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\r\n      }\r\n    ];\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BreadcrumbList\",\r\n          itemListElement: [\r\n            {\r\n              \"@type\": \"ListItem\",\r\n              position: 1,\r\n              item: {\r\n                \"@id\": postURL,\r\n                name: title,\r\n                image\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BlogPosting\",\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n          headline: title,\r\n          image: {\r\n            \"@type\": \"ImageObject\",\r\n            url: image\r\n          },\r\n          description\r\n        }\r\n      );\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : \"\"}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}