{"data":{"markdownRemark":{"html":"<h3 id=\"purpose\"><a href=\"#purpose\" aria-label=\"purpose permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Purpose</h3>\n<p>收集整理一些比较难以理解的Java泛型问题，以及详细解释其中的原理</p>\n<hr>\n<h3 id=\"list-wildcards\"><a href=\"#list-wildcards\" aria-label=\"list wildcards permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List Wildcards</h3>\n<p>PECS (Producer extend, Consumer super)</p>\n<h4 id=\"class-and-interface\"><a href=\"#class-and-interface\" aria-label=\"class and interface permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class and Interface</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Grandpa</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Grandma</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Father</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Grandpa</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Grandma</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Daughter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CGrandpa</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Grandpa</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CGrandma</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Grandma</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h4 id=\"producer\"><a href=\"#producer\" aria-label=\"producer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Producer</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中<code class=\"language-text\">? extends Father</code>表示的是Father的subtype，包括Father</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">List&lt;? extends Father&gt; son_producer = new ArrayList&lt;Son&gt;();\nList&lt;? extends Father&gt; daughter_producer = new ArrayList&lt;Daughter&gt;();\nList&lt;? extends Father&gt; father_producer = new ArrayList&lt;Father&gt;();\n//all above are valid, below are invalid\nList&lt;? extends Father&gt; producer = new ArrayList&lt;Grandpa&gt;();\nList&lt;? extends Father&gt; producer = new ArrayList&lt;Grandma&gt;();</code></pre></div>\n<p>对于函数参数为该泛型的方法，例如<code class=\"language-text\">boolean add(E e)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">son_producer.add(new CSon()); // invalid\nson_producer.add(new CFather()); // invalid\nson_producer.add(new CGrandpa()); // invalid\nson_producer.add(null); //valid</code></pre></div>\n<p>不能使用任何非空元素作为参数的原因是：</p>\n<ul>\n<li>\n<p>add的函数声明<code class=\"language-text\">boolean add(E e)</code>中，函数参数为 <code class=\"language-text\">E</code>，和List中的泛型相同</p>\n</li>\n<li>\n<p><code class=\"language-text\">? extends Father</code>代表任何Father或Father的subtype，所以该泛型的subtype是不确定的，但是supertype确定</p>\n</li>\n<li>\n<p>从而除了null以外，任何参数的类型都无法保证可以作为该泛型的子类从而进行upcasting，所以只能使用null作为函数的参数</p>\n</li>\n</ul>\n<p>对于返回类型为该泛型的方法，例如<code class=\"language-text\">E get(int index)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">List&lt;Son&gt; sonList = new ArrayList&lt;&gt;();\nsonList.add( new CSon() );\nsonList.add( new CSon() );\nsonList.add( new CSon() );\nson_producer = sonList;\n\nFather father = son_producer.get(0);//valid\nGrandpa grandpa = son_producer.get(0);//valid</code></pre></div>\n<p>因为返回值是Father的subtype，所以可以进行upcasting，获取所需的supertype对象</p>\n<h4 id=\"consumer\"><a href=\"#consumer\" aria-label=\"consumer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consumer</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中<code class=\"language-text\">&lt;? super Father&gt;</code>表示Father的supertype，包括Father</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">></span></span> grandpa_consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grandpa</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">></span></span> grandma_consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grandma</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">></span></span> father_consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Father</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//all above are valid, below are invalid</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">></span></span> son_consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">></span></span> daughter_consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Daughter</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于函数参数为该泛型的方法，例如<code class=\"language-text\">boolean add(E e)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">father_consumer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CFather</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//valid</span>\nfather_consumer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CSon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//valid</span>\nfather_consumer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//valid</span>\nfather_consumer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CGrandpa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//invalid</span></code></pre></div>\n<p>可以使用任何Father以及其subtype的原因是：</p>\n<ul>\n<li>add的函数声明<code class=\"language-text\">boolean add(E e)</code>中，函数参数为 <code class=\"language-text\">E</code>，和List中的泛型相同</li>\n<li><code class=\"language-text\">? super Father</code>代表Father或Father的supertype，所以该泛型的subtype确定，而supertype可以看成统一为Object</li>\n<li>\n<p>从而任何Father的subtype都可以作为参数，upcasting为该泛型，当然null也可以\n对于返回类型为该泛型的方法，例如<code class=\"language-text\">E get(int index)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Father</span> father <span class=\"token operator\">=</span> father_consumer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//invalid</span>\n<span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> father_consumer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//valid</span></code></pre></div>\n<p>这里要把泛型的supertype不确定，所以在没有强制转换的情况下，只能返回对象只能是Object类型的</p>\n</li>\n</ul>\n<h4 id=\"tips\"><a href=\"#tips\" aria-label=\"tips permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tips</h4>\n<ul>\n<li><code class=\"language-text\">&lt;? extends XXX&gt;</code>和<code class=\"language-text\">&lt;? super XXX&gt;</code>这两个通配符的行为并不对称，原因在于子类的upcasting可以是隐式的，而父类的downcasting并不是</li>\n<li>假设类泛型为E，当E作为方法参数时，我们需要把某个类upcasting成E，而E作为方法返回值时，我们需要把E upcasting成某个类</li>\n<li>因为通过接口实现的多态也符合泛型的规则，所以这里不使用子类(subclass)和父类(superclass)的称呼，而使用subtype和supertype</li>\n<li>Object是任何类的supertype，没有哪个类是任何类的subtype</li>\n<li>null是任何类的对象</li>\n</ul>\n<hr>\n<h3 id=\"wildcard-capture\"><a href=\"#wildcard-capture\" aria-label=\"wildcard capture permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wildcard Capture</h3>\n<p>通配符捕获</p>\n<h3 id=\"code\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//invalid</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//valid</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//valid</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>错误原因</p>\n<ul>\n<li>? 作为通配符，表示任意一个类（? 可以理解为 ? extends Object），通常被编译器用作类型推断使用，但是当编译器无法做出类型推断，从而无法保证类型安全时，就会抛出包含\"capture of\"的错误</li>\n<li><code class=\"language-text\">i.get(0)</code>没有问题，可以获取其中的元素<code class=\"language-text\">Object o = i.get( 0 );//valid</code></li>\n<li>set方法的声明是<code class=\"language-text\">E set(int index, E element)</code>，也就是说，List的泛型必须和入参保持一致</li>\n<li>? 代表了任意类，而显然Object类型无法进行upcasting</li>\n</ul>\n<p>而对于其余两种方法，编译器可以确定<code class=\"language-text\">i.get(0)</code>的类型是i.set所需的类型（保证可以upcasting），换句话说，下面代码断的报错方式，和第一个是同一个原理</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//invalid</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"erasure-and-override\"><a href=\"#erasure-and-override\" aria-label=\"erasure and override permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Erasure and override</h3>\n<p>类型擦除与方法覆写</p>\n<h4 id=\"code-1\"><a href=\"#code-1\" aria-label=\"code 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class Node&lt;T&gt; {\n\n    public T data;\n\n    public Node(T data) { this.data = data; }\n\n    public void setData(T data) {\n        System.out.println(&quot;Node.setData&quot;);\n        this.data = data;\n    }\n}\n\npublic class MyNode extends Node&lt;Integer&gt; {\n    public MyNode(Integer data) { super(data); }\n\n    public void setData(Integer data) {\n        System.out.println(&quot;MyNode.setData&quot;);\n        super.setData(data);\n    }\n}</code></pre></div>\n<p>问题是，下列代码是怎么输出的：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">MyNode</span> mn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Node</span> n <span class=\"token operator\">=</span> mn<span class=\"token punctuation\">;</span>\nn<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n<span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> mn<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们假设类型擦除能够正常运作，那么Node类中的函数签名中的泛型，都会被改成Object类型，也就是类似Node(Object data)</p>\n<p>那么MyNode中的setData，就不会override Node中的setData，因为签名不同，所以<code class=\"language-text\">n.setData(&quot;Hello&quot;)</code>会正常执行，错误会在<code class=\"language-text\">Integer x = mn.data</code>这里</p>\n<p>但实际情况并不是这样，ClassCastException会在<code class=\"language-text\">n.setData(&quot;Hello&quot;)</code>被执行时抛出，而不是下一句</p>\n<p>原因在于，这里起到作用的是Bridge Method。</p>\n<p>对于多态（polymorphism）的实现来说，子类如果继承泛型类的方法，那么也应该override其方法，而不应该因为类型擦除而保留一个并未定义过的签名中包含Object的原始方法</p>\n<p>这里的setData(Object data)应该被setData(Integer data) override，这样才符合多态。为了满足这点，编译器就会针对泛型类的子类生成Bridge Method</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Bridge method generated by the compiler\n//\npublic void setData(Object data) {\n    setData((Integer) data);\n}</code></pre></div>\n<p>试想如果有了这个自动生成的方法，是不是就可以解释为什么ClassCastException会在<code class=\"language-text\">n.setData(&quot;Hello&quot;);</code>中被抛出，而String类作为<code class=\"language-text\">n.setData</code>的参数，并不会产生错误</p>\n<p>总结一下，继承泛型类之后，<strong>不用考虑类型擦除后生成的新方法会不会被override这样的问题</strong>，因为有Bridge method，类型擦除后，生成的参数类型为Object的方法实际上会被override并转到新方法中</p>\n<h4 id=\"tips-1\"><a href=\"#tips-1\" aria-label=\"tips 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tips</h4>\n<ul>\n<li>Bridge Method可以被反射获取到，也可以通过反射调用，通过<code class=\"language-text\">method.isBridge()</code>可以获取一个方法是否是Bridge Mehtod</li>\n<li>方法泛型的目的是为了保证编译期的类型安全，并不会给运行时添加负担，也就是说，加不加泛型对于运行时影响不大（加了泛型后可能少了类型强转的字节码，其他字节码不会发生变化）</li>\n<li>\n<p>两个字节码完全一致但使用方式不同的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\ni<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>Object foo2(List i) {\ni.set(0, i.get(0));\nreturn i.get( 0 );\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">基于Java的类型擦除机制，这两个函数在运行期的字节码是完全相同的，但是\n```java\nObject o = foo(new ArrayList&lt;String&gt;(Arrays.asList(&quot;1&quot;,&quot;2&quot;)));//valid\nString s = foo(new ArrayList&lt;String&gt;(Arrays.asList(&quot;1&quot;,&quot;2&quot;)));//valid\n\nObject o2 = foo2(new ArrayList&lt;String&gt;(Arrays.asList(&quot;1&quot;,&quot;2&quot;)));//valid\nString s2 = foo2(new ArrayList&lt;String&gt;(Arrays.asList(&quot;1&quot;,&quot;2&quot;)));//invalid</code></pre></div>\n<p>最后一行会出现编译期错误，因为不符合类型安全的要求</p>\n<ul>\n<li>上面例子中<code class=\"language-text\">Arrays.asList(&quot;1&quot;,&quot;2&quot;)</code>的返回值是<code class=\"language-text\">java.util.Arrays.ArrayList</code>，不是<code class=\"language-text\">java.util.ArrayList</code>，要加一层构造方法包装</li>\n</ul>\n<hr>\n<h3 id=\"recursive-generics\"><a href=\"#recursive-generics\" aria-label=\"recursive generics permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recursive Generics</h3>\n<p>递归泛型</p>\n<h4 id=\"code-2\"><a href=\"#code-2\" aria-label=\"code 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">></span></span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">N</span> parent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n        parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error: incompatible types</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">N</span> <span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialNode</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecialNode</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpecialNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpecialNode</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们的问题是，为什么会出现error</p>\n<p>首先，定义这个两个class的目的在于：定义一种类的抽象行为，即在初始化的时候把一个自身成员加进一个ArrayList的实例变量中</p>\n<p>其中，通过泛型确保加进的对象一定是子类（N extends Node<N>），这里看上去像是一种递归形式的定义从而无法处理，其实只需要考虑N extends Node就可以了，因为这是一种特殊的写法，举个例子</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>是可行的，但是</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span> <span class=\"token keyword\">extends</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>是不可行的，尽管语义相同</p>\n<p>所以说这样递归定义的泛型，是一种特殊的表示，表示子类声明的泛型必须是子类自身</p>\n<p>如果这样还是难以理解，下面这个例子说明了<code class=\"language-text\">Node &lt;N extends Node&lt;N&gt;&gt;</code> 和 <code class=\"language-text\">Node &lt;N extends Node&gt;</code> 的区别</p>\n<p>对于递归泛型<code class=\"language-text\">&lt;N extends Node&lt;N&gt;&gt;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token comment\">//invalid</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialNode</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//valid</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialNode</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecialNode</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而对于非递归泛型<code class=\"language-text\">&lt;N extends Node&gt;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token comment\">//valid</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialNode</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//valid</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialNode</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecialNode</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>回到之前的问题</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error: incompatible types</span></code></pre></div>\n<p>这里，ArrayList里存储的对象应该是N，而this所获取的并不是N，而是N的supertype，所以不能进行upcasting</p>\n<p>解决方法：</p>\n<ul>\n<li>进行类型强转<code class=\"language-text\">add((N)this)</code></li>\n<li>改变ArrayList的泛型<code class=\"language-text\">public final List&lt;? super Node&gt; children = new ArrayList&lt;&gt;();</code>，并修改getChildren的返回值·<code class=\"language-text\">public List getChildren() {...</code></li>\n<li>\n<p>通过方法直接获取N的实例，即在抽象类中定义方法，在子类中实现</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n</ul>\n<p>//abstract class\nabstract N getThis();</p>\n<p>//subclass\nSpecialNode getThis(){ return this; }</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\n### Embedded Generic Infer\n泛型方法嵌套中的类型推断\n#### Code\n```java\nstatic &lt;T&gt; T[] topFn(T t1, T t2){\n    return subFn( t1, t2 );\n}\n\nstatic &lt;T&gt; T[] subFn(T...ts){\n    return ts;\n}\n\npublic static void main( String[] args ) {\n    subFn(&quot;Hello&quot;,&quot;World&quot;); //valid\n    topFn( &quot;Hello&quot;,&quot;World&quot; ); //valid\n\n    String[] results = subFn(&quot;Hello&quot;,&quot;World&quot;); //valid\n    results = topFn( &quot;Hello&quot;,&quot;World&quot; ); //invalid\n}</code></pre></div>\n<p>首先我们观察<code class=\"language-text\">subFn(&quot;Hello&quot;,&quot;World&quot;)</code>，通过类型推断，编译器把subFn中的参数替换为了String，从而返回<code class=\"language-text\">String[]</code>，这点没有问题</p>\n<p>再观察<code class=\"language-text\">topFn( &quot;Hello&quot;,&quot;World&quot; );</code>，在编译器，同样地通过类型推断，我们知道该函数返回的也是<code class=\"language-text\">String[]</code>，但是对于函数内部的调用，我们无法通过类型推断去替换subFn的泛型T，从而subFn返回的是<code class=\"language-text\">Object[]</code></p>\n<p>所以方法可以调用，但是返回值不是本来期望的，将<code class=\"language-text\">Object[]</code>强转成<code class=\"language-text\">String[]</code>会发生错误</p>\n<p>解决方法：把遍历<code class=\"language-text\">Object[]</code>强转所有元素到<code class=\"language-text\">String[]</code>即可，但这比较复杂，所以尽量避免泛型方法的嵌套</p>\n<h4 id=\"tips-2\"><a href=\"#tips-2\" aria-label=\"tips 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tips</h4>\n<ul>\n<li>函数的类型推断仅仅作用在编译期，也就是说，如果一段代码必须通过执行能确定其类型，那么类型推断是无法作用的</li>\n</ul>\n<hr>\n<h3 id=\"java-version-matters\"><a href=\"#java-version-matters\" aria-label=\"java version matters permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java Version Matters</h3>\n<h4 id=\"method\"><a href=\"#method\" aria-label=\"method permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"code-3\"><a href=\"#code-3\" aria-label=\"code 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringList <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//valid</span>\n<span class=\"token function\">handleList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//valid</span>\n<span class=\"token function\">handleList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//depend on Java version</span></code></pre></div>\n<p>在Java SE 7和Java SE 7之前，是无法从函数的参数类型进行类型推断的，必须显式指定，但Java SE8之后可以</p>\n<h3 id=\"refs\"><a href=\"#refs\" aria-label=\"refs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refs</h3>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/1910892/what-is-the-difference-between-super-and-extends-in-java-generics\">https://stackoverflow.com/questions/1910892/what-is-the-difference-between-super-and-extends-in-java-generics</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java\">https://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/hongdada/p/10683795.html\">https://www.cnblogs.com/hongdada/p/10683795.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/5836662/extending-from-two-classes\">https://stackoverflow.com/questions/5836662/extending-from-two-classes</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/\">https://docs.oracle.com/javase/tutorial/java/generics/</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.angelikalanger.com/GenericsFAQ/FAQSections/ProgrammingIdioms.html#FAQ205\">http://www.angelikalanger.com/GenericsFAQ/FAQSections/ProgrammingIdioms.html#FAQ205</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://jrebel.com/rebellabs/java-generics-cheat-sheet/\">https://jrebel.com/rebellabs/java-generics-cheat-sheet/</a></p>\n</blockquote>","timeToRead":8,"excerpt":"Purpose收集整理一些比较难以理解的Java泛型问题，以及详细解释其中的原理List WildcardsPECS (Producer extend, Consumer super)Class and InterfaceProducer其中表示的是Father的subtype…","frontmatter":{"title":"","cover":null,"date":null,"category":null,"tags":null},"fields":{"slug":"/Java/java-generics-tricky-code","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Java/java-generics-tricky-code","nexttitle":"","nextslug":"","prevtitle":"Java Multi Thread Synchronize","prevslug":"/Java/java-multi-thread-synchronize"}}