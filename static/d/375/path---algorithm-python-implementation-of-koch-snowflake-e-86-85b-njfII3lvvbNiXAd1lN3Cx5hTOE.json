{"data":{"markdownRemark":{"html":"<p>Koch Curve（Koch Snowflake）\n<a href=\"https://www.geeksforgeeks.org/koch-curve-koch-snowflake/\">https://www.geeksforgeeks.org/koch-curve-koch-snowflake/</a></p>\n<p>简介：</p>\n<p>科赫雪花（科赫曲线）是最早发现的分形曲线之一，由瑞典科学家 Helge von Koch 在论文中构造</p>\n<p>科赫雪花的面积趋向于原始三角形的8/5，而周长趋向无穷大</p>\n<p>构造过程：\n<img src=\"https://upload-images.jianshu.io/upload_images/4655525-fa7ff5bfa8c31b5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"原始三角形\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/4655525-bbfd2700cd044189.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"每边三等分\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/4655525-585fec07c975ed8f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在三等分点上构建新三角形\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/4655525-ae33f0df8c2cc33f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"继续每边三等分\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/4655525-f71b14b6d0c3d558.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"继续在三等分点上构建新三角形\">\n...</p>\n<p>科赫雪花可一通过下列规则描述\n<a href=\"https://en.wikipedia.org/wiki/Rewriting\">rewrite system</a> (<a href=\"https://en.wikipedia.org/wiki/Lindenmayer_system\">Lindenmayer system</a>):\n<strong>Alphabet</strong> : F\n<strong>Constants</strong> : +, ?\n<strong>Axiom **: F\n**Production rules</strong>: F ? F+F–F+F</p>\n<p>程序实现</p>\n<p>思路1：\n首先我们把三条边分开处理\n考虑深度为0的情况，显然这条边是一条直线\n考虑深度为1的情况，轨迹如下：\n<img src=\"https://upload-images.jianshu.io/upload_images/4655525-42aa402d6f6b91e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>我们把这个轨迹抽象为“前进”方法，我们就有变成了深度为1的前进方法 = 深度为0的前进方法 x4\n同理我们发现，深度为2的前进方法 = 深度为1的前进方法 x4\n观察到问题的复杂度在不断降低，可以使用递归来处理这样的规律</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> turtle <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">snowflake</span><span class=\"token punctuation\">(</span>lengthSide<span class=\"token punctuation\">,</span> levels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">if</span> levels <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> \n        forward<span class=\"token punctuation\">(</span>lengthSide<span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span>\n    lengthSide <span class=\"token operator\">/=</span> <span class=\"token number\">3.0</span>\n    snowflake<span class=\"token punctuation\">(</span>lengthSide<span class=\"token punctuation\">,</span> levels<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n    left<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span> \n    snowflake<span class=\"token punctuation\">(</span>lengthSide<span class=\"token punctuation\">,</span> levels<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n    right<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span> \n    snowflake<span class=\"token punctuation\">(</span>lengthSide<span class=\"token punctuation\">,</span> levels<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n    left<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span> \n    snowflake<span class=\"token punctuation\">(</span>lengthSide<span class=\"token punctuation\">,</span> levels<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\"># main function </span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span> \n    speed<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                    \n    length <span class=\"token operator\">=</span> <span class=\"token number\">300.0</span>          \n\n    <span class=\"token comment\">#分别处理三条边</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>     \n        snowflake<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> \n        right<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span> \n    exitonclick<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     </code></pre></div>\n<p>思路2\n把第0层画的线用0表示，第1层用1表示，那么根据画笔的轨迹我们有\n第0层（三角形） 000\n第1层                   011001100110\n第2层                   022012211221022002201221122102200220122112210220\n<img src=\"https://upload-images.jianshu.io/upload_images/4655525-79786a92980284e0.gif?imageMogr2/auto-orient/strip\" alt=\"第1层，其余类似\"></p>\n<p>显然，把上一层的节点复制一遍，中间插入两个当前层次的节点即可。连续相同节点逆时针转120度，非连续相同节点逆时针转60度</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> turtle <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    tasks<span class=\"token operator\">=</span><span class=\"token string\">\"000\"</span>\n    step<span class=\"token punctuation\">,</span>depth <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">**</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> depth<span class=\"token operator\">&lt;</span>target<span class=\"token punctuation\">:</span>\n        depth<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n        tasks <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>s <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> tasks<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    pre<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> task <span class=\"token keyword\">in</span> tasks<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> pre<span class=\"token operator\">==</span>task<span class=\"token punctuation\">:</span>\n            right<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            left<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n        forward<span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span>\n        pre <span class=\"token operator\">=</span> task\n\nlength <span class=\"token operator\">=</span> <span class=\"token number\">300.0</span>\ndraw<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>","timeToRead":1,"excerpt":"Koch Curve（Koch Snowflake）\nhttps://www.geeksforgeeks.org/koch-curve-koch-snowflake/简介：科赫雪花（科赫曲线）是最早发现的分形曲线之一，由瑞典科学家 Helge von Koch…","frontmatter":{"title":"Python Implementation of Koch Snowflake","cover":"","date":"2019/10/22","category":"algorithm","tags":["中文","algorithm","python"]},"fields":{"slug":"/algorithm/python-implementation-of-koch-snowflake","date":"2019-10-22T04:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/python-implementation-of-koch-snowflake","nexttitle":"","nextslug":"","prevtitle":"Big Test","prevslug":"Big-Sample_Test"}}