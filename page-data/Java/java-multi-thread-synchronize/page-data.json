{"componentChunkName":"component---src-templates-post-jsx","path":"/Java/java-multi-thread-synchronize","result":{"data":{"markdownRemark":{"html":"<h3 id=\"线程安全相关问题\"><a href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98\" aria-label=\"线程安全相关问题 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>线程安全相关问题</h3>\n<ul>\n<li>\n<p>如何定义一个对象是否是线程安全的</p>\n<blockquote>\n<p>当多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替运行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获取正确的结果，那这个对象是线程安全的</p>\n</blockquote>\n</li>\n<li>\n<p>线程安全问题的主要原因是</p>\n<blockquote>\n<p>主内存和工作内存数据不一致，重排序（为了性能优化，一般包括编译器指令重排序和处理器指令重排序）导致竞态条件下的程序执行不确定性</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"synchronized\"><a href=\"#synchronized\" aria-label=\"synchronized permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>synchronized</h3>\n<ul>\n<li>synchronized的应用方式主要有修饰实例方法，修饰静态方法，修饰代码块</li>\n<li>修饰实例方法</li>\n</ul>\n<blockquote>\n<p>对实例方法的修饰，同步锁加在当前实例对象上，当一个线程访问改实例的synchronized方法时，其他线程不能访问该方法</p>\n</blockquote>\n<blockquote>\n<p>同步锁和实例对象一一对应，如果是一个线程 A 需要访问实例对象 obj1 的 synchronized 方法 f1(当前对象锁是obj1)，另一个线程 B 需要访问实例对象 obj2 的 synchronized 方法 f2(当前对象锁是obj2)，是可以同时访问同一个方法的，因为两个实例对象锁并不同相同</p>\n</blockquote>\n<ul>\n<li>\n<p>修饰静态方法</p>\n<blockquote>\n<p>对静态方法的修饰，同步锁加在当前类的class对象上（并非实例对象），所以不同的线程可以同时访问同一实例的同步静态方法和同步实例方法</p>\n</blockquote>\n</li>\n<li>\n<p>修饰代码块</p>\n<blockquote>\n<p>实例对象锁：synchronized(this){...}\nclass对象锁：synchronized(XXX.class){...}</p>\n</blockquote>\n</li>\n<li>synchronized的可重入性\n在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁，是允许的，这就是synchronized的可重入性</li>\n<li>\n<p>synchronized与等待唤醒机制（wait, notify）</p>\n<blockquote>\n<p>调用等待唤醒机制相关方法时，必须获得当前对象的monitor对象，而只有synchronized关键字才能获取到monitor对象，所以只有在同步方法块中才能调用wait, notify方法</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   obj<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   obj<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   obj<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>wait和sleep的对比：sleep方法并不会让当前线程释放锁，但是wait会命令当前线程在执行完同步代码段后释放持有的锁</p>\n</blockquote>\n</li>\n<li>Java对象在内存中的布局</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>对象头</td>\n<td>具体如下</td>\n</tr>\n<tr>\n<td>实例变量</td>\n<td>实例所属类的属性，数组长度等信息</td>\n</tr>\n<tr>\n<td>填充数据</td>\n<td>保持字节对齐而填充的数据（因对象的起始地址必须是8字节整数倍）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>Java对象头</p>\n<blockquote>\n<p>JVM使用2个字节来存储该信息，如果是数组对象，会有1个额外的字节存储数组长度</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mark Word</td>\n<td>存储对象的hashCode、锁信息或分代年龄或GC标志等信息</td>\n</tr>\n<tr>\n<td>Class Metadata Address</td>\n<td>类型指针指向对象的类元数据，JVM通过这个指针确定该对象是哪个类的实例</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"tips\"><a href=\"#tips\" aria-label=\"tips permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tips</h3>\n<ul>\n<li>线程随机竞争同一资源时，如果对访问顺序敏感，那么此时存在静态条件</li>\n<li>\n<h3 id=\"ref\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ref</h3>\n<p><a href=\"https://www.jianshu.com/p/d52fea0d6ba5\">https://www.jianshu.com/p/d52fea0d6ba5</a></p>\n</li>\n</ul>","timeToRead":4,"excerpt":"…","frontmatter":{"title":"Java Multi Thread Synchronize","cover":"","date":"2019/10/4","category":"Java","tags":["中文","Java","multi thread","synchronize"]},"fields":{"slug":"/Java/java-multi-thread-synchronize","date":"2019-10-04T04:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Java/java-multi-thread-synchronize","nexttitle":"","nextslug":"","prevtitle":"Regular Expression Matching","prevslug":"/algorithm/regular-expression-matching"}}}