{"componentChunkName":"component---src-templates-post-jsx","path":"/algorithm/max-chunks-to-make-sorted-ii","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Max Chunks To Make Sorted II\",\n  \"cover\": \"\",\n  \"category\": \"algorithm\",\n  \"date\": \"2019/10/5\",\n  \"abstract\": \"给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的\",\n  \"tags\": [\"中文\", \"algorithm\", \"array\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/problems/max-chunks-to-make-sorted-ii/description/\"\n  }, \"Max Chunks To Make Sorted II\")), mdx(\"h3\", {\n    \"id\": \"问题\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#%E9%97%AE%E9%A2%98\",\n    \"aria-label\": \"问题 permalink\",\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"\\u95EE\\u9898\"), mdx(\"p\", null, \"\\u7ED9\\u5B9A\\u4E00\\u4E2A\\u5141\\u8BB8\\u51FA\\u73B0\\u91CD\\u590D\\u5143\\u7D20\\u7684\\u6570\\u7EC4\\uFF0C\\u5224\\u65AD\\u6700\\u591A\\u53EF\\u4EE5\\u5206\\u6210\\u591A\\u5C11\\u6BB5\\uFF0C\\u4F7F\\u5F97\\u6BB5\\u4E0E\\u6BB5\\u4E4B\\u95F4\\u90FD\\u662F\\u6709\\u5E8F\\u7684\"), mdx(\"h3\", {\n    \"id\": \"解决\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#%E8%A7%A3%E5%86%B3\",\n    \"aria-label\": \"解决 permalink\",\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"\\u89E3\\u51B3\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u601D\\u8DEF 1\\uFF1A\\u591A\\u6B21\\u904D\\u5386\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u8003\\u8651\\u5230\\u7ED9\\u51FA\\u7684\\u6570\\u636E\\u7684\\u8303\\u56F4\\uFF0C\\u8FD9\\u91CC\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u5E94\\u8BE5\\u63A7\\u5236\\u5728O(N)\\u5185\\uFF0C\\u60F3\\u5230\\u7B2C\\u4E8C\\u6BB5\\uFF08\\u5982\\u679C\\u6709\\u7684\\u8BDD\\uFF09\\uFF0C\\u4E00\\u5B9A\\u662F\\u5728\\u7B2C\\u4E00\\u6BB5\\u7684\\u57FA\\u7840\\u4E0A\\u8FDB\\u884C\\u5224\\u65AD\\u7684\\uFF0C\\u8FD9\\u91CC\\u53EF\\u4EE5\\u6784\\u9020\\u4E00\\u4E2A\\u6392\\u5E8F\\u6570\\u7EC4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u4F8B\\u5982 \", \"[1,1,0,0,1]\", \"\\uFF0C\\u6211\\u4EEC\\u53EF\\u4EE5\\u6784\\u9020\\u4E3A\", \"[2,3,0,1,4]\", \"\\uFF0C\\u4E5F\\u5C31\\u662F\\u75280 - length-1 \\u7684\\u5E8F\\u53F7\\u6765\\u8868\\u793A\\u8FD9\\u4E2A\\u6570\\u7EC4\\uFF0C\\u76F8\\u540C\\u7684\\u5143\\u7D20\\u6309\\u524D\\u540E\\u4F4D\\u7F6E\\u5206\\u914D\\u5E8F\\u53F7\\uFF0C\\u8FD9\\u6837\\u95EE\\u9898\\u5C31\\u53EF\\u4EE5\\u7B80\\u5316\\u4E3A\\u4E00\\u6B21\\u904D\\u5386\\uFF0C\\u5BF9\\u6BD4\\u4E0B\\u6807\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u5176\\u5B9E\\u8FD9\\u91CC\\u53EF\\u4EE5\\u7B80\\u5316\\u4E00\\u70B9\\u7A7A\\u95F4\\u590D\\u6742\\u5EA6\\uFF08\\u4E5F\\u5728O(N)\\u8303\\u56F4\\u5185\\uFF09\\uFF0C\\u6211\\u8FD9\\u91CC\\u53EA\\u662F\\u4E3A\\u4E86\\u65B9\\u4FBF\\u4E66\\u5199\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"class Solution {\\n    public int maxChunksToSorted(int[] arr) {\\n        if(arr.length<2)return arr.length;\\n        \\n        int max = Integer.MIN_VALUE,count = 0;\\n        \\n        //get index array like [1,2,3] or [5,2,2,3,1]\\n        int[] sorted = arr.clone();\\n        \\n        int[] newArr = new int[arr.length];\\n        \\n        Arrays.sort(sorted);\\n        \\n        int pre = -1;\\n        for(int i=0;i<sorted.length;i++){\\n            for(int j=0;j<arr.length;j++)\\n                if(arr[j]==sorted[i] && (i==0 || sorted[i]!=sorted[i-1] || pre<j)){\\n                    newArr[j] = i;\\n                    pre = j;\\n                    break;\\n                }\\n        }\\n        \\n        for(int i=0;i<arr.length;i++){\\n            max = Math.max(max,newArr[i]);\\n            if(max==i){\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u601D\\u8DEF 2\\uFF1A\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://leetcode.com/problems/max-chunks-to-make-sorted-ii/discuss/398135/Precise-Python-Stack-7-lines-solution-with-explanation\"\n  }, \"\\u6808\"), \"\\n\\u7B80\\u5355\\u6765\\u8BF4\\uFF0C\\u5C31\\u662F\\u8D2A\\u5FC3\\u8BB0\\u5F55\\u6BCF\\u4E00\\u4E2Achunk\\uFF0C\\u6700\\u540E\\u8FD4\\u56DE\\u8FD9\\u4E2Achunk\\u6570\\u7EC4\\u7684\\u957F\\u5EA6\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"python\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-python\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"class\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"Solution\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"def\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"maxChunksToSorted\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"self\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" arr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \" List\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \">\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \"\\n        stack \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# store a list of biggest element of each chunk\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"for\"), \" n \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"in\"), \" arr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \"\\n            m \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" n \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# the biggest element from beginning to n\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"while\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"len\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"stack\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \">\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"0\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"and\"), \" stack\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \">\"), \"n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \"\\n                m \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"max\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"m\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" stack\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"pop\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\n            stack\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"append\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"m\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# all element bigger than n was poped out of stack, so this is the biggest element\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"len\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"stack\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# length of the chunks array\")))));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1,"excerpt":"Max Chunks To Make Sorted II 问题 给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的 解决 思路 1：多次遍历 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N…","frontmatter":{"title":"Max Chunks To Make Sorted II","cover":"","date":"2019/10/5","category":"algorithm","tags":["中文","algorithm","array"]},"fields":{"slug":"/algorithm/max-chunks-to-make-sorted-ii","date":"2019-10-05T04:00:00.000Z"}}},"pageContext":{"slug":"/algorithm/max-chunks-to-make-sorted-ii","nexttitle":"","nextslug":"","prevtitle":"Reaching Points","prevslug":"/algorithm/reaching-points"}},"staticQueryHashes":[]}