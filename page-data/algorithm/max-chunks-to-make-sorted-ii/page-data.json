{"componentChunkName":"component---src-templates-post-jsx","path":"/algorithm/max-chunks-to-make-sorted-ii","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://leetcode.com/problems/max-chunks-to-make-sorted-ii/description/\">Max Chunks To Make Sorted II</a></p>\n<h3 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-label=\"问题 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h3>\n<p>给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的</p>\n<h3 id=\"解决\"><a href=\"#%E8%A7%A3%E5%86%B3\" aria-label=\"解决 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决</h3>\n<ul>\n<li>思路 1：多次遍历</li>\n<li>考虑到给出的数据的范围，这里时间复杂度应该控制在O(N)内，想到第二段（如果有的话），一定是在第一段的基础上进行判断的，这里可以构造一个排序数组</li>\n<li>例如 [1,1,0,0,1]，我们可以构造为[2,3,0,1,4]，也就是用0 - length-1 的序号来表示这个数组，相同的元素按前后位置分配序号，这样问题就可以简化为一次遍历，对比下标</li>\n<li>\n<p>其实这里可以简化一点空间复杂度（也在O(N)范围内），我这里只是为了方便书写</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Solution {\npublic int maxChunksToSorted(int[] arr) {\n    if(arr.length&lt;2)return arr.length;\n    \n    int max = Integer.MIN_VALUE,count = 0;\n    \n    //get index array like [1,2,3] or [5,2,2,3,1]\n    int[] sorted = arr.clone();\n    \n    int[] newArr = new int[arr.length];\n    \n    Arrays.sort(sorted);\n    \n    int pre = -1;\n    for(int i=0;i&lt;sorted.length;i++){\n        for(int j=0;j&lt;arr.length;j++)\n            if(arr[j]==sorted[i] &amp;&amp; (i==0 || sorted[i]!=sorted[i-1] || pre&lt;j)){\n                newArr[j] = i;\n                pre = j;\n                break;\n            }\n    }\n    \n    for(int i=0;i&lt;arr.length;i++){\n        max = Math.max(max,newArr[i]);\n        if(max==i){\n            count++;\n        }\n    }\n    \n    return count;\n}\n}</code></pre></div>\n</li>\n<li>\n<p>思路 2：<a href=\"https://leetcode.com/problems/max-chunks-to-make-sorted-ii/discuss/398135/Precise-Python-Stack-7-lines-solution-with-explanation\">栈</a>\n简单来说，就是贪心记录每一个chunk，最后返回这个chunk数组的长度</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">maxChunksToSorted</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># store a list of biggest element of each chunk</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">:</span>\n        m <span class=\"token operator\">=</span> n <span class=\"token comment\"># the biggest element from beginning to n</span>\n        <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>n<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># all element bigger than n was poped out of stack, so this is the biggest element</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token comment\"># length of the chunks array</span></code></pre></div>\n</li>\n</ul>","timeToRead":2,"excerpt":"Max Chunks To Make Sorted II 问题 给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的 解决 思路 1：多次遍历 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N…","frontmatter":{"title":"Max Chunks To Make Sorted II","cover":"","date":"2019/10/5","category":"algorithm","tags":["中文","algorithm","array"]},"fields":{"slug":"/algorithm/max-chunks-to-make-sorted-ii","date":"2019-10-05T04:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/max-chunks-to-make-sorted-ii","nexttitle":"","nextslug":"","prevtitle":"Reaching Points","prevslug":"/algorithm/reaching-points"}}}