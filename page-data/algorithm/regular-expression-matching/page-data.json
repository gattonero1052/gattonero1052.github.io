{"componentChunkName":"component---src-templates-post-jsx","path":"/algorithm/regular-expression-matching","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://leetcode.com/articles/regular-expression-matching/\">Regular Expression Matching</a></p>\n<h3 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-label=\"问题 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h3>\n<p>用包含*和.这两个正则符号的正则表达式来匹配字符串</p>\n<h3 id=\"解决\"><a href=\"#%E8%A7%A3%E5%86%B3\" aria-label=\"解决 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决</h3>\n<ul>\n<li>思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC掉的，只是考虑到大部分情况下栈深的问题</li>\n</ul>\n<p>这里就是非贪心的匹配方式，代码量很少，每次只匹配开头的字符，剩余结果由回溯过程得到</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Solution {\n    public boolean isMatch(String text, String pattern) {\n        if (pattern.isEmpty()) return text.isEmpty();\n        boolean first_match = (!text.isEmpty() &amp;&amp; \n                               (pattern.charAt(0) == text.charAt(0) || pattern.charAt(0) == &#39;.&#39;));\n        \n        if (pattern.length() &gt;= 2 &amp;&amp; pattern.charAt(1) == &#39;*&#39;){\n            return (isMatch(text, pattern.substring(2)) ||  //这里的 || 代表回溯过程\n                    (first_match &amp;&amp; isMatch(text.substring(1), pattern)));\n        } else {\n            return first_match &amp;&amp; isMatch(text.substring(1), pattern.substring(1));\n        }\n    }\n}</code></pre></div>\n<ul>\n<li>思路：反向dp，这里我们如果用dp的思想，那么dp[i][j]表示的是text[i:]和pattern[j:]是否匹配，求的其实是dp[0][0]，所以是一种反向的dp，题目中无论是自底向上的方法还是从顶往下的方法，其计算顺序其实都是反向的（最后得到的结果都是dp[0][0]），这里自底向上的方法中，Result枚举的意义其实只是封装了一个布尔值，相当于一个布尔封装类型的数组</li>\n</ul>\n<h3 id=\"tips\"><a href=\"#tips\" aria-label=\"tips permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tips</h3>\n<ul>\n<li>str.substring(n) 可以理解成去掉字符串前 n 个字母</li>\n<li>wildcard 是通配符的意思，不止在正则表达式中有通配符，很多地方比如地址匹配，java中泛型中都有通配符</li>\n</ul>","timeToRead":2,"excerpt":"Regular Expression Matching 问题 用包含*和.这两个正则符号的正则表达式来匹配字符串 解决 思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC…","frontmatter":{"title":"Regular Expression Matching","cover":"","date":"2019/10/5","category":"algorithm","tags":["中文","algorithm","string"]},"fields":{"slug":"/algorithm/regular-expression-matching","date":"2019-10-05T04:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/regular-expression-matching","nexttitle":"","nextslug":"","prevtitle":"Max Chunks To Make Sorted II","prevslug":"/algorithm/max-chunks-to-make-sorted-ii"}}}