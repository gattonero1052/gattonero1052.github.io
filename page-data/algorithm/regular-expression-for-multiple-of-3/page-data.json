{"componentChunkName":"component---src-templates-post-jsx","path":"/algorithm/regular-expression-for-multiple-of-3","result":{"data":{"markdownRemark":{"html":"<h3 id=\"问题\" style=\"position:relative;\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-label=\"问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h3>\n<p>使用正则判断n能否被3整除</p>\n<h3 id=\"思路\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-label=\"思路 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h3>\n<p>根据整除性构建DFA（确定有限自动状态机），再根据DFA构建正则（<a href=\"https://en.wikipedia.org/wiki/Kleene%27s_algorithm\">Kleen算法</a>）</p>\n<h3 id=\"解决\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E5%86%B3\" aria-label=\"解决 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决</h3>\n<p>我们从高位读取字符串，并将余数作为状态，有如下状态转移表：\nX |'0''1'\n0 | 0  1\n1 | 2  0\n2 | 1  2\n（X表示 状态\\当前字符）\n比如说状态是2，说明当前数字除3余2，那么当前字符是'0'时，余数自然是1，应该转移到1状态</p>\n<p>DFA如下：\n<img src=\"https://upload-images.jianshu.io/upload_images/4655525-0c49a4eac221f80f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"DFA\"></p>\n<p>初始状态是0，我们只要判断终结状态是否为0即可\n观察图中的一个自环和一个0-1-2-1-0的大环，我们可以写出两种正则\n<code class=\"language-text\">0*</code>\n<code class=\"language-text\">1(01*0)*1</code>\n故得到  <code class=\"language-text\">(0 | 1(01*0)*1)*</code></p>\n<h3 id=\"代码\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E7%A0%81\" aria-label=\"代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(0|1(01*0)*1)*$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined</span></code></pre></div>\n<h3 id=\"tips\" style=\"position:relative;\"><a href=\"#tips\" aria-label=\"tips permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tips</h3>\n<ul>\n<li>符合要求的正则不止一个，但是上述正则应该是最简单的之一</li>\n<li>按照相应算法，可以获得任意数字的整除性判断正则</li>\n</ul>\n<h3 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ref</h3>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Kleene%27s_algorithm\">https://en.wikipedia.org/wiki/Kleene%27s_algorithm</a>\n<a href=\"https://zhidao.baidu.com/question/1383837207982172220.html\">https://zhidao.baidu.com/question/1383837207982172220.html</a>\nAlgorithm 4th P518</p>\n</blockquote>","timeToRead":1,"excerpt":"问题 使用正则判断n能否被3整除 思路 根据整除性构建DFA（确定有限自动状态机），再根据DFA构建正则（Kleen算法） 解决 我们从高位读取字符串，并将余数作为状态，有如下状态转移表：\nX |'0''1'\n0 | 0  1\n1 | 2  0\n2 | 1  2\n（X…","frontmatter":{"title":"Regular Expression For Multiple of 3","cover":"","date":"2019/10/22","category":"","tags":["中文","algorithm","regular-expression","DFA"]},"fields":{"slug":"/algorithm/regular-expression-for-multiple-of-3","date":"2019-10-22T04:00:00.000Z"}}},"pageContext":{"slug":"/algorithm/regular-expression-for-multiple-of-3","nexttitle":"","nextslug":"","prevtitle":"Linked List Cycle","prevslug":"/algorithm/linked-list-cycle"}},"staticQueryHashes":[]}