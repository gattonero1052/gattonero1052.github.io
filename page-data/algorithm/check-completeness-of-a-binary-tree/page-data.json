{"componentChunkName":"component---src-templates-post-jsx","path":"/algorithm/check-completeness-of-a-binary-tree","result":{"data":{"markdownRemark":{"html":"<h3 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-label=\"问题 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h3>\n<p>判断一棵树是否是完全二叉树</p>\n<h3 id=\"思路\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-label=\"思路 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h3>\n<p>观察测试数据\n[1,2,3,4,5,6]</p>\n<p>[1,2,3,4,5,null,7]</p>\n<p>[1,2,3,4,5,null]\n从给的测试数据可以看出，只要是连续的数字中间没有空，或者只在最后有空，那么就是完全二叉树。所以可以给节点编号，再看看编号有没有按序排列</p>\n<h3 id=\"解决\"><a href=\"#%E8%A7%A3%E5%86%B3\" aria-label=\"解决 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    public boolean isCompleteTree(TreeNode root) {\n        Map&lt;Integer,TreeNode&gt; map = new HashMap&lt;&gt;();\n        codeTree(root,map,1);\n        List&lt;Integer&gt; list = map.keySet().stream().sorted().collect(Collectors.toList());\n        for (int i = 1; i &lt; list.size(); i++) {\n            if(list.get(i)-1!=list.get(i-1))\n                return false;\n        }\n        return true;\n    }\n\n    public void codeTree(TreeNode root,Map&lt;Integer,TreeNode&gt; map,Integer code){\n         map.put(code,root);\n         if(root.left!=null){\n             codeTree(root.left,map,code*2);\n         }\n\n        if(root.left!=null){\n            codeTree(root.right,map,code*2+1);\n        }\n    }</code></pre></div>\n<h3 id=\"思路-1\"><a href=\"#%E6%80%9D%E8%B7%AF-1\" aria-label=\"思路 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h3>\n<p>继续看所给的测试数据，考虑到这种形式是对完全二叉树进行层次遍历得来的，所以按照层次遍历后，只要空节点是连续的，那就是完全二叉树</p>\n<h3 id=\"解决-1\"><a href=\"#%E8%A7%A3%E5%86%B3-1\" aria-label=\"解决 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    public boolean isCompleteTree(TreeNode root) {\n        Queue&lt;TreeNode&gt; queue = new LinkedList();\n        queue.offer(root);\n        while(queue.peek()!=null){\n            TreeNode node = queue.poll();\n            queue.offer(node.left);\n            queue.offer(node.right);\n        }\n\n        while(!queue.isEmpty()){\n            if(queue.poll()!=null)\n                return false;\n        }\n        return true;\n    }</code></pre></div>","timeToRead":2,"excerpt":"问题 判断一棵树是否是完全二叉树 思路 观察测试数据\n1,2,3,4,5,6 1,2,3,4,5,null,7 1,2,3,4,5,null…","frontmatter":{"title":"Check Completeness Of A Binary Tree","cover":"","date":"2019/3/10","category":"algorithm","tags":["中文","algorithm","tree"]},"fields":{"slug":"/algorithm/check-completeness-of-a-binary-tree","date":"2019-03-10T05:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/check-completeness-of-a-binary-tree","nexttitle":"","nextslug":"","prevtitle":"Champagne Tower","prevslug":"/algorithm/champagne-tower"}}}