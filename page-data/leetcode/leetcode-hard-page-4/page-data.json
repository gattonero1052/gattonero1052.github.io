{
    "componentChunkName": "component---src-templates-post-jsx",
    "path": "/leetcode/leetcode-hard-page-4",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Leetcode Hard Page 4\",\n  \"cover\": \"\",\n  \"category\": \"Algorithm\",\n  \"date\": \"2022/02/04\",\n  \"abstract\": \"\",\n  \"tags\": [\"Leetcode\", \"Leetcode hard\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"shortest-path-visiting-all-nodes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#shortest-path-visiting-all-nodes\",\n    \"aria-label\": \"shortest path visiting all nodes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Shortest Path Visiting All Nodes\"), mdx(\"p\", null, \"Given a undirected connected graph, get the shortest distance from any node to any node and\\nmake sure every node is visited at least once. This is a pretty classic state compress dp problem.\\nWe can use a mask and a number representing which nodes are visited and which node is the last\\nin the path. Also, configuration map BFS can be applied by using similar state as a condition.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"n = len(graph)\\nfor i in range(n):\\n  graph[i] = set(graph[i]) # quick search, doesn't matter much\\n\\ndp = [[1e9]*n for _ in range(1<<n)]\\n\\nfor i in range(n): # initialization\\n  dp[1<<i][i] = 0\\n\\nfor i in range(1<<n):\\n  # update the current state\\n  for j in range(n):\\n    for k in range(n):\\n      if k != j and i & (1<<j) and i & (1<<k) and k in graph[j]:\\n        dp[i | (1<<k)][k] = min(dp[i | (1<<k)][k], dp[i][j] + 1)\\n  \\n  # update the next state\\n  for j in range(n):\\n    for k in range(n):\\n      if k != j and i & (1<<j) and (i & (1<<k) == 0) and k in graph[j]:\\n        dp[i | (1<<k)][k] = min(dp[i | (1<<k)][k], dp[i][j] + 1)\"))));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1,"excerpt":"Shortest Path Visiting All Nodes Given a undirected connected graph, get the shortest distance from any node to any node and\nmake sure everyâ€¦","frontmatter":{"title":"Leetcode Hard Page 4","cover":"","date":"2022/02/04","category":"Algorithm","tags":["Leetcode","Leetcode hard"]},"fields":{"slug":"/leetcode/leetcode-hard-page-4","date":"2022-02-04T05:00:00.000Z"}}},"pageContext":{"slug":"/leetcode/leetcode-hard-page-4","nexttitle":"","nextslug":"","prevtitle":"Leetcode Hard Page 2","prevslug":"/leetcode/leetcode-hard-page-2"}},
    "staticQueryHashes": []}