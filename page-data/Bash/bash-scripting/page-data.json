{"componentChunkName":"component---src-templates-post-jsx","path":"/Bash/bash-scripting","result":{"data":{"markdownRemark":{"html":"<h3 id=\"bash-scripting\"><a href=\"#bash-scripting\" aria-label=\"bash scripting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bash scripting</h3>\n<p>This is a problem oriented bash scripting post. For understanding what's going on and how the code works, it's of great help to discover and type in these code by yourself.</p>\n<p>Though the .sh file runs in Linux for most of the time, you can try all of these using git bash or WSL if you are using windows.</p>\n<h3 id=\"remember\"><a href=\"#remember\" aria-label=\"remember permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remember</h3>\n<ul>\n<li>Do not use bash for OOP</li>\n<li>Bash variables are UNTYPED and does not support float point calculation itself</li>\n<li>Variable declaration is not necessary</li>\n</ul>\n<h3 id=\"ab-problem\"><a href=\"#ab-problem\" aria-label=\"ab problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A+B Problem</h3>\n<ul>\n<li>\n<p>Include shebang on top of your script file (For other problems, this is same)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span></code></pre></div>\n</li>\n<li>read from stdin (or you can reference the parameter variables as $1 $2)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"A and B: \"</span> a b</code></pre></div>\n<ul>\n<li>calculation or assignment, either of these works</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Using let</span>\n<span class=\"token builtin class-name\">let</span> <span class=\"token string\">\"c=a+b\"</span> <span class=\"token comment\"># let \"c = a+b\" is right, space does not matter as long as it is wrapped by quotes</span>\n<span class=\"token builtin class-name\">let</span> <span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span>a+b <span class=\"token comment\"># let c = a+b is wrong, DO NOT add spaces around =</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Using $(()) POSIX arithmethic expression</span>\n\n<span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>a<span class=\"token operator\">+</span>b<span class=\"token variable\">))</span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Just an example of using +=</span>\n<span class=\"token builtin class-name\">let</span> <span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token variable\"><span class=\"token punctuation\">((</span>c<span class=\"token operator\">+</span><span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">))</span></span> <span class=\"token comment\"># this is often used as ((a++)) in loops</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Using expr or other preset bash scripts</span>\n<span class=\"token comment\"># DO ADD spaces between operators</span>\n<span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> a + b<span class=\"token variable\">)</span></span></code></pre></div>\n<ul>\n<li>output</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$c</span></code></pre></div>\n<h3 id=\"sum-problem\"><a href=\"#sum-problem\" aria-label=\"sum problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sum problem</h3>\n<ul>\n<li>read from stdin</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"Sum from 1 to n\"</span> n</code></pre></div>\n<ul>\n<li>init variable</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">let</span> <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token builtin class-name\">let</span> <span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></code></pre></div>\n<ul>\n<li>loop</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># DO include $ before variables with in conditional statements</span>\n<span class=\"token comment\"># DO ADD spaces in conditional statements like [SPACE expression SPACE]</span>\n<span class=\"token comment\"># DO ADD ; before do, or you can use</span>\n<span class=\"token comment\">#     while...</span>\n<span class=\"token comment\">#     do</span>\n<span class=\"token comment\">#     ...</span>\n<span class=\"token comment\">#     done</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$a</span> -le <span class=\"token variable\">$n</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">do</span>\n\n<span class=\"token comment\"># (()) is for arithmetic expression</span>\n<span class=\"token comment\"># DO NOT use $ for variable reference in (())</span>\n<span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>sum<span class=\"token operator\">+</span>a<span class=\"token variable\">))</span></span>\n\n<span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span> <span class=\"token comment\"># see the alternatives below</span>\n\n<span class=\"token comment\"># ALT ((a++))</span>\n<span class=\"token comment\"># ALT let a=\"a+1\"</span>\n<span class=\"token comment\"># ALT let a=$a+1</span>\n\n<span class=\"token keyword\">done</span></code></pre></div>\n<ul>\n<li>output</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$sum</span></code></pre></div>\n<h3 id=\"read-text-file\"><a href=\"#read-text-file\" aria-label=\"read text file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Read text file</h3>\n<p>Assuming the text file is like (yeah, that's part of services file)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo                7/tcp\necho                7/udp\ndiscard             9/tcp    sink null\ndiscard             9/udp    sink null\nsystat             11/tcp    users                  #Active users\nsystat             11/udp    users                  #Active users</code></pre></div>\n<p>The goal is to get only the <PORT>/<PROTOCOL> part</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">input</span><span class=\"token operator\">=</span><span class=\"token string\">\"myfile\"</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> -r line\n<span class=\"token keyword\">do</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$line</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -E -o <span class=\"token string\">\"[0-9]+/(tcp|udp)\"</span>\n<span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">\"<span class=\"token variable\">$input</span>\"</span></code></pre></div>\n<p>Of course a single command could have it done, but you can have more control if you use a while loop to read (for example output only the lines with odd line number)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> -E -o <span class=\"token string\">\"[0-9]+/(tcp|udp)\"</span> myfile</code></pre></div>\n<h3 id=\"refs\"><a href=\"#refs\" aria-label=\"refs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refs</h3>\n<p><a href=\"https://ryanstutorials.net/bash-scripting-tutorial/\">https://ryanstutorials.net/bash-scripting-tutorial/</a></p>\n<p><a href=\"https://unix.stackexchange.com/questions/40786/how-to-do-integer-float-calculations-in-bash-or-other-languages-frameworks\">https://unix.stackexchange.com/questions/40786/how-to-do-integer-float-calculations-in-bash-or-other-languages-frameworks</a></p>","timeToRead":3,"excerpt":"Bash scripting This is a problem oriented bash scripting post. For understanding what's going on and how the code works, it's of great help…","frontmatter":{"title":"Bash Scripting","cover":"","date":"2019/10/25","category":"java","tags":["中文","java","generics"]},"fields":{"slug":"/Bash/bash-scripting","date":"2019-10-25T04:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Bash/bash-scripting","nexttitle":"","nextslug":"","prevtitle":"Poker Game","prevslug":"/Game/poker-game"}}}