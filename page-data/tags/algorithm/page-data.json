{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/algorithm/","result":{"data":{"allMarkdownRemark":{"totalCount":15,"edges":[{"node":{"fields":{"slug":"/algorithm/big-number-multiply","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 适用于1000位以内数的乘法 思路 注意两点： 数字是通过字符串传过来的，字符串的低位反而是数字的高位，所以我们要从数字的低位开始计算的话，必须反转字符串（当然结果也要反转） 原理就是小学乘法，竖式计算，但不需要每次都计算进位，可以统一计算 解决 Tips…","timeToRead":2,"rawMarkdownBody":"### 问题\r\n适用于1000位以内数的乘法\r\n### 思路\r\n注意两点：\r\n- 数字是通过字符串传过来的，字符串的低位反而是数字的高位，所以我们要从数字的低位开始计算的话，必须反转字符串（当然结果也要反转）\r\n- 原理就是小学乘法，竖式计算，但不需要每次都计算进位，可以统一计算\r\n### 解决\r\n```java\r\n    public String multi(String a, String b){\r\n        ////反转字符串\r\n        char[] ar = reverse(a).toCharArray(), br = reverse(b).toCharArray();\r\n\r\n        int res[] = new int[1000];\r\n        int max = ar.length + br.length-1;//m位数乘n位数，结果至少是m+n-1位\r\n\r\n        for (int i = 0; i <max; i++) {\r\n            for (int j = 0;  i < ar.length && j < br.length; j++) {\r\n                res[i + j] += (ar[i] - 48)*(br[j] - 48);\r\n            }\r\n\r\n            if (res[i] >= 10) {\r\n                res[i+1] += res[i]/10;\r\n                res[i] %= 10;\r\n                max= Math.max(max, i+2);//结果最多是m+n位，+2是因为i是从0开始的下标，m是从1开始的位数\r\n            }\r\n        }\r\n\r\n        \r\n        StringBuilder ans = new StringBuilder();\r\n        for (int i = 0;i<max; i++) {\r\n            ans.append((char)(res[i]+48));\r\n        }\r\n\r\n        //反转结果\r\n        return ans.reverse().toString();\r\n    }\r\n\r\n    public String reverse(String s){\r\n        return new StringBuilder(s).reverse().toString();\r\n    }\r\n```\r\n### Tips\r\n- 如果追求算法简单易懂，这样是可行的，但是追求速度的话，可以使用[karatsuba](https://en.wikipedia.org/wiki/Karatsuba_algorithm)乘法，\r\n时间复杂度在n^log3级别，原理是分治，时间复杂度可以用[Master Theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)证明\r\n- karatsuba算法并不是最快的，但是是时间复杂度小于平方复杂度中的算法里相对简单的一种\r\n\r\n### Ref\r\nhttps://oi-wiki.org/math/bignum/","frontmatter":{"abstract":"大数乘法","draft":null,"title":"Big Number Multiply","tags":["中文","algorithm","math","string"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/linked-list-cycle","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 判断链表中是否有环，如果有，找出链表中环的起始节点 解决 首先找出环的话可以用快慢节点法，快节点的速度是2，慢节点是1\n因为两个节点进入环后，快节点会以2-1=…","timeToRead":1,"rawMarkdownBody":"### 问题\r\n判断链表中是否有环，如果有，找出链表中环的起始节点\r\n### 解决\r\n首先找出环的话可以用快慢节点法，快节点的速度是2，慢节点是1\r\n因为两个节点进入环后，快节点会以2-1=1的速度接近慢节点，所以如果有环的话，两节点一定会相遇，否则快节点会先到链尾\r\n\r\n接下来就是寻找环的起始节点，根据下图我们有：\r\n\r\n\r\n![示意图](https://upload-images.jianshu.io/upload_images/4655525-19cd8e81305a6a4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n```math\r\n2(t+x)=t+x+n(x+y)\r\nt=(n-1)(x+y)+y\r\n```\r\nx+y就是环的长度，换句话说，t就是环长的整数倍+y，那么我们在快慢节点相遇后，再设置一个慢节点到链头，他们第一次相遇的时候，一定在t处，也就是环节点了\r\n\r\n### Tips\r\n- 结论非常好记，就两个，首先快慢节点判断环，第二相遇后加一个慢节点判断环起始位置，证明也只是用代数式推一下而已，可以只记结论\r\n- 算环长的话，知道环的起始位置，自然而然也就知道环的长度了（再加个不动点）","frontmatter":{"abstract":"判断链表中是否有环，如果有，找出链表中环的起始节点","draft":null,"title":"Linked List Cycle","tags":["中文","algorithm","linkedlist"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/find-integer-x-y-for-ax-by-c","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 求线性同余方程ax+by=c的整数解 思路 首先介绍下欧几里得算法的原理，众所周知，欧几里得算法是辗转相除法，这里给出证明： 假设a>b，证明 gcd(a,b) = gcd(a mod b,b)\n设a=bk+c，c=a mod b\n如果D=gcd(b,c)>gcd(a,b…","timeToRead":3,"rawMarkdownBody":"### 问题\r\n- 求线性同余方程ax+by=c的整数解\r\n\r\n### 思路\r\n首先介绍下欧几里得算法的原理，众所周知，欧几里得算法是辗转相除法，这里给出证明：\r\n\r\n假设a>b，证明 gcd(a,b) = gcd(a mod b,b)\r\n设a=bk+c，c=a mod b\r\n如果D=gcd(b,c)>gcd(a,b)，则等式 a=bk+c 右边除以D是整数，但左边除以D不是整数\r\n如果gcd(b,c)<gcd(a,b)=D，则等式 c=a-bk 右边除以D是整数，但左边除以D不是整数\r\n可见均矛盾，故gcd(b,c)=gcd(a,b)\r\n\r\n拓展欧几里得算法也是基于这个递推式，根据[裴蜀定理](https://zh.wikipedia.org/wiki/%E8%B2%9D%E7%A5%96%E7%AD%89%E5%BC%8F)，线性同余方程ax+by=c有整数解的充要条件是c|gcd(a,b)，那么我们设a>=b，有\r\n- ax1+bx2=1\r\n- 根据 gcd(a,b)=gcd(b,a mod b)=1，我们有\r\n- bx2 + (a mod b)y2=1\r\n- 若t = a/b，有\r\n- bx2 + (a mod b + bt -bt)y2 = 1\r\n化简得 ay2 + b(x2-ty2) = 1\r\n因为a mod b<b，故问题的规模可以逐步化简直至b=1，此时取一个解：xn=0, yn=1（这里也可以看出，方程有无穷多解），逐步递归即可得到答案\r\n\r\n### 解决\r\n```java\r\n    public int[] extended(int a, int b, int c){//ax+by=c\r\n        if (a<b){a^=b;b^=a;a^=b;}\r\n        return extended(a/c,b/c);\r\n    }\r\n\r\n    public int[] extended(int a, int b){\r\n        if(b==1) return new int[]{0,1};//写成b==0 return 1,0一个道理，但为什么要多一步呢？\r\n        int[] next = extended(b,a%b);\r\n        return new int[]{next[1],next[0]-a/b*next[1]};\r\n    }\r\n```\r\n\r\n\r\n\r\n### Tips\r\n- 注意裴蜀定理中c|gcd(a,b)是充要条件，也就是说如果不符合则无解，这里为了方便不考虑这种情况，另外也不考虑a=b=c=0这种特殊情况\r\n- gcd(a,b) * lcm(a,b) = a*b的证明：https://oi-wiki.org/math/gcd/#_5\r\n- ax+by=1和ax≡1(mod b)完全等价，故可以用拓展欧几里得算法来求逆元，当然求逆元也有其他方式，比如线性时间复杂度中求a以内所有数的逆元，这里不展开了\r\n- 如果不想让x或者y出现负数，可以使 x = (x+b)%b 或者 y=(y+a)%a","frontmatter":{"abstract":"求线性同余方程ax+by=c的整数解","draft":null,"title":"Find integer x,y for ax + by = c","tags":["中文","algorithm","math"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/python-implementation-of-koch-snowflake","date":"2019-10-22T04:00:00.000Z"},"excerpt":"Koch Curve（Koch Snowflake）\nhttps://www.geeksforgeeks.org/koch-curve-koch-snowflake/ 简介： 科赫雪花（科赫曲线）是最早发现的分形曲线之一，由瑞典科学家 Helge von Koch…","timeToRead":2,"rawMarkdownBody":"\r\nKoch Curve（Koch Snowflake）\r\nhttps://www.geeksforgeeks.org/koch-curve-koch-snowflake/\r\n\r\n简介：\r\n\r\n科赫雪花（科赫曲线）是最早发现的分形曲线之一，由瑞典科学家 Helge von Koch 在论文中构造\r\n\r\n科赫雪花的面积趋向于原始三角形的8/5，而周长趋向无穷大\r\n\r\n构造过程：\r\n![原始三角形](https://upload-images.jianshu.io/upload_images/4655525-fa7ff5bfa8c31b5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![每边三等分](https://upload-images.jianshu.io/upload_images/4655525-bbfd2700cd044189.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![在三等分点上构建新三角形](https://upload-images.jianshu.io/upload_images/4655525-585fec07c975ed8f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![继续每边三等分](https://upload-images.jianshu.io/upload_images/4655525-ae33f0df8c2cc33f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![继续在三等分点上构建新三角形](https://upload-images.jianshu.io/upload_images/4655525-f71b14b6d0c3d558.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n...\r\n\r\n科赫雪花可一通过下列规则描述\r\n[rewrite system](https://en.wikipedia.org/wiki/Rewriting) ([Lindenmayer system](https://en.wikipedia.org/wiki/Lindenmayer_system)):\r\n**Alphabet** : F\r\n**Constants** : +, ?\r\n**Axiom **: F\r\n**Production rules**: F ? F+F–F+F\r\n\r\n程序实现\r\n\r\n思路1：\r\n首先我们把三条边分开处理\r\n考虑深度为0的情况，显然这条边是一条直线\r\n考虑深度为1的情况，轨迹如下：\r\n![](https://upload-images.jianshu.io/upload_images/4655525-42aa402d6f6b91e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n我们把这个轨迹抽象为“前进”方法，我们就有变成了深度为1的前进方法 = 深度为0的前进方法 x4 \r\n同理我们发现，深度为2的前进方法 = 深度为1的前进方法 x4\r\n观察到问题的复杂度在不断降低，可以使用递归来处理这样的规律\r\n\r\n```python\r\nfrom turtle import *\r\ndef snowflake(lengthSide, levels): \r\n    if levels == 0: \r\n        forward(lengthSide) \r\n        return\r\n    lengthSide /= 3.0\r\n    snowflake(lengthSide, levels-1) \r\n    left(60) \r\n    snowflake(lengthSide, levels-1) \r\n    right(120) \r\n    snowflake(lengthSide, levels-1) \r\n    left(60) \r\n    snowflake(lengthSide, levels-1) \r\n\r\n# main function \r\nif __name__ == \"__main__\": \r\n    speed(0)                    \r\n    length = 300.0          \r\n\r\n    #分别处理三条边\r\n    for i in range(3):     \r\n        snowflake(length, 4) \r\n        right(120) \r\n    exitonclick()     \r\n```\r\n\r\n\r\n思路2\r\n把第0层画的线用0表示，第1层用1表示，那么根据画笔的轨迹我们有\r\n第0层（三角形） 000\r\n第1层                   011001100110\r\n第2层                   022012211221022002201221122102200220122112210220\r\n![第1层，其余类似](https://upload-images.jianshu.io/upload_images/4655525-79786a92980284e0.gif?imageMogr2/auto-orient/strip)\r\n\r\n显然，把上一层的节点复制一遍，中间插入两个当前层次的节点即可。连续相同节点逆时针转120度，非连续相同节点逆时针转60度\r\n```python\r\nfrom turtle import *\r\ndef draw(len,target):\r\n    tasks=\"000\"\r\n    step,depth = len/(3**target),0\r\n    while depth<target:\r\n        depth+=1\r\n        tasks = ''.join([s+str(depth)*2+s for s in tasks])\r\n    pre=''\r\n    for task in tasks:\r\n        if pre==task:\r\n            right(120)\r\n        else:\r\n            left(60)\r\n        forward(step)\r\n        pre = task\r\n\r\nlength = 300.0\r\ndraw(length,3)\r\n```","frontmatter":{"abstract":"Koch Curve（Koch Snowflake）","draft":null,"title":"Python Implementation of Koch Snowflake","tags":["中文","algorithm","python"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/swim-in-rising-water","date":"2019-10-22T04:00:00.000Z"},"excerpt":"Swim in Rising Water 问题 假设方阵中每个点都标有权值，问题是求方阵中两点之间的路径中所有点权值最大值的最小值 比如2x2矩阵一共有两条路径，第一条路径中两个点权值是1,3,2最大值为3，第二条路径中两个点权值1,2,2是最大值为2，那么结果就是…","timeToRead":2,"rawMarkdownBody":"[Swim in Rising Water](https://leetcode.com/articles/swim-in-rising-water/)\r\n### 问题\r\n假设方阵中每个点都标有权值，问题是求方阵中两点之间的路径中所有点权值最大值的最小值\r\n\r\n比如2x2矩阵一共有两条路径，第一条路径中两个点权值是1,3,2最大值为3，第二条路径中两个点权值1,2,2是最大值为2，那么结果就是2\r\n\r\n### 解决\r\n- 想到用dp去解决这个问题，但是路径的选择其实是不具备dp条件的，即出了不能重复外，可以随便选择方向\r\n- 思考路径的选择方法，发现可以在经过的路径的所有相邻点中，选择深度差最小的下一步，也就是使用一种类似贪心的方法\r\n- 数据结构上，我们使用优先队列和集合，优先队列用于寻找贪心的下一个点，集合用于判断下一个点是否经过（其实也可以用布尔数组）\r\n- 另一个方法思路很简单，就是二分猜测+DFS验证，时间复杂度也在O(N^2logN)这个数量级上\r\n\r\n### Tips\r\n- 凡是答案是在给定的数组之内选择的，都可以尝试排序加二分的思路","frontmatter":{"abstract":"假设方阵中每个点都标有权值，问题是求方阵中两点之间的路径中所有点权值最大值的最小值","draft":null,"title":"Swim in Rising Water","tags":["中文","algorithm","greedy"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/regular-expression-for-multiple-of-3","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 使用正则判断n能否被3整除 思路 根据整除性构建DFA（确定有限自动状态机），再根据DFA构建正则（Kleen算法） 解决 我们从高位读取字符串，并将余数作为状态，有如下状态转移表：\nX |'0''1'\n0 | 0  1\n1 | 2  0\n2 | 1  2\n（X…","timeToRead":2,"rawMarkdownBody":"\r\n### 问题\r\n使用正则判断n能否被3整除\r\n### 思路\r\n根据整除性构建DFA（确定有限自动状态机），再根据DFA构建正则（[Kleen算法](https://en.wikipedia.org/wiki/Kleene%27s_algorithm)）\r\n### 解决\r\n我们从高位读取字符串，并将余数作为状态，有如下状态转移表：\r\nX |'0''1'\r\n0 | 0  1\r\n1 | 2  0\r\n2 | 1  2\r\n（X表示 状态\\当前字符）\r\n比如说状态是2，说明当前数字除3余2，那么当前字符是'0'时，余数自然是1，应该转移到1状态\r\n\r\nDFA如下：\r\n![DFA](https://upload-images.jianshu.io/upload_images/4655525-0c49a4eac221f80f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n初始状态是0，我们只要判断终结状态是否为0即可\r\n观察图中的一个自环和一个0-1-2-1-0的大环，我们可以写出两种正则\r\n`0*`\r\n`1(01*0)*1`\r\n故得到  `(0 | 1(01*0)*1)*`\r\n\r\n### 代码\r\n```javascript\r\nfor(var i=1;i<100;i++)\r\n if(!/^(0|1(01*0)*1)*$/.test(Number(3*i).toString(2))) console.log(i)//undefined\r\n```\r\n\r\n### Tips\r\n- 符合要求的正则不止一个，但是上述正则应该是最简单的之一\r\n- 按照相应算法，可以获得任意数字的整除性判断正则\r\n\r\n### Ref\r\n>https://en.wikipedia.org/wiki/Kleene%27s_algorithm\r\n>https://zhidao.baidu.com/question/1383837207982172220.html\r\n>Algorithm 4th P518","frontmatter":{"abstract":"使用正则判断n能否被3整除","draft":null,"title":"Regular Expression For Multiple of 3","tags":["中文","algorithm","regular-expression","DFA"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/combinations-and-permutations","date":"2019-10-20T04:00:00.000Z"},"excerpt":"问题 排列（Permutation）：求1,2,3...n的不同排列方式（n!） 思路 普通的排列问题，在python…","timeToRead":5,"rawMarkdownBody":"### 问题\r\n排列（Permutation）：求1,2,3...n的不同排列方式（n!）\r\n### 思路\r\n普通的排列问题，在python库中甚至有现成的库可以用来解决，我们这里考虑两种方案，首先是回溯的思路（递归）：\r\n基于交换元素的回溯实现较为简单，每一次交换循环位置的元素和首元素，直到循环位置抵达末尾，交换完毕后回溯\r\n\r\n可能为什么要用交换来求排列看上去比较难理解，那么考虑用最原始的方式，即选择任意元素作为第一个元素，再选择除第一个元素以外的任意一个作为第二个元素。。。\r\n\r\n如果我们要记录所选元素是否被选择过，需要使用一个布尔数组，但其实我们可以直接把选择过的元素放在当前位置上，然后只记录起始位置\r\n\r\n选择其他元素之前，把这个元素放回来就行了（如果使用布尔数组记录，其实也需要这个回溯过程）\r\n\r\n其次是非递归的实现，首先给出一个基于递归栈的实现\r\n\r\n思路是通过用栈模拟交换，记录需要交换的元素位置，并把下一轮需要交换的元素以及数组的拷贝放进栈中\r\n\r\n另一种非递归实现的思路是基于n!的计算，时间复杂度为O(n!)，不过比上面的非递归要快一点\r\n\r\n既然一共有n!个排列，那么n的排列相当于n-1的所有排列*n，得到n-1的所有排列后，其实只需在每种排列上加上1-n就行了\r\n\r\n\r\n### 解决\r\n```python\r\n# 递归\r\ndef rec(a, l, r):\r\n    if l==r:\r\n        print(*a)\r\n        return\r\n    for i in range(l, r+1):#注意这里下限是l，虽然把自己跟自己交换是一种重复，但这也是需要计算在内的\r\n        a[i], a[l] = a[l], a[i]\r\n        rec(a,l+1,r)\r\n        a[i], a[l] = a[l], a[i]\r\nrec([i+1 for i in range(n)], 0, n-1)\r\n```\r\n\r\n```python\r\n# 非递归  - 1\r\ndef non_rec(a):\r\n    n = len(a)\r\n    result, r = [], [[a,-1,-1]]\r\n    while len(r)>0:\r\n        ra, ri, rt = r.pop()\r\n        ra[ri], ra[rt] = ra[rt], ra[ri]\r\n        if ri==n-1:\r\n            result.append(ra)\r\n        for nrt in range(ri+1,n):\r\n            r.append([ra[:],ri+1,nrt])\r\n    return result\r\n```\r\n\r\n```python\r\n# 非递归 - 2\r\ndef non_rec(a):\r\n    n = len(a)\r\n    result, t, steps = [], 1, [[a[0]]]\r\n    while t < n:\r\n        cur = []\r\n        for step in steps:\r\n            for i in range(t+1):\r\n                newStep = step[:]\r\n                newStep.insert(i,a[t])\r\n                cur.append(newStep)\r\n        steps = cur\r\n        t+=1\r\n        if t==n:\r\n            result = steps\r\n    return result\r\n```\r\n\r\n### 问题\r\n组合（Combination）：求1-n中取出x个数字的方式（C(n,x)）\r\n### 思路\r\n同样考虑两种方式，首先是递归，记录当前位置和递归深度即可，递归深度为x即取数完毕\r\n\r\n第二是非递归，这里运用了一点bit magic，大概意思是根据x二进制中最大递增后缀序列求出下一个排列，具体可以参见[这篇文章](http://blog.gaurav.im/2016/12/18/next-binary-permutation-bitwise-hackery/)\r\n\r\n### 解决\r\n```python\r\n# 递归\r\ndef comb(n,x,cur,start,depth,arr):\r\n    if depth==x:\r\n        arr.append(cur)\r\n        return\r\n    for next in range(start,n-x+depth+1):\r\n        comb(n,x,cur+str(next),next+1,depth+1,arr)\r\ncomb(n,x,'',0,0,arr) # 01 02 03 04 12 13 14 23 24 34，这里下标是0开始的，不影响效果\r\n```\r\n```python\r\n# 非递归\r\nn, x = 5, 3\r\nstart, end = (1 << c)-1, (1 << n) - (1 << (n-x)) # 这里start和end就是二进制中x个1在最开始和最末尾的数\r\nv = start\r\nwhile v <= end:\r\n    # 这里结果所对应的二进制位为1的下标就是具体的组合\r\n    print(bin(v)[2:].rjust(n, '0'))\r\n    # 下面两行是求next permutation的位运算方法，具体解释可以参考引用的两篇资料\r\n    t = (v | (v - 1)) + 1 \r\n    w = t | ((int((t & -t) / (v & -v)) >> 1) - 1)\r\n    v = w\r\n```\r\n\r\n### Ref\r\nhttps://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/\r\nhttp://blog.gaurav.im/2016/12/18/next-binary-permutation-bitwise-hackery/\r\nhttps://graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation\r\n\r\n### Tips\r\n- x & -x是求x的二进制中最右边的1所对应位置的二进制数，比如x=01100100，x&-x=00000100，x为奇数这个值就一定是1\r\n- x | x-1是将x的二进制中所有后继0置1，比如x=01100100，x&-x=01100111，同样x为奇数这个值就是本身","frontmatter":{"abstract":"排列和组合","draft":null,"title":"Combinations and Permutations","tags":["中文","algorithm","combination","permutation","bitwise"],"cover":"","date":"2019/10/20"}}},{"node":{"fields":{"slug":"/algorithm/reaching-points","date":"2019-10-20T04:00:00.000Z"},"excerpt":"Reaching Points 问题 如果给出一个点 (x,y)，可以选择下一个点的坐标 (x+y,y)，或者(x,x+y)，那么，给出一个起点 (sx,sy)，和终点(tx,ty)，能否通过这样的变化，从起点到达终点 解决方案 选择最快的解决方案：这里看上去是个正向dp…","timeToRead":1,"rawMarkdownBody":"\r\n[Reaching Points](https://leetcode.com/articles/reaching-points/)\r\n\r\n### 问题\r\n如果给出一个点 (x,y)，可以选择下一个点的坐标 (x+y,y)，或者(x,x+y)，那么，给出一个起点 (sx,sy)，和终点(tx,ty)，能否通过这样的变化，从起点到达终点\r\n\r\n### 解决方案\r\n- 选择最快的解决方案：这里看上去是个正向dp问题，其实不然，因为每一步的结果都要依赖于上一步的结果，所以dp问题会归结到时间复杂度O(tx*ty)的递归，显然是不可取的\r\n- 这里我们采取倒推的方式，因为显然，如果当前步骤的结果是(x,y)(x>y)，那么上一步的结果一定是(x-y,y)，这样的话，我们可以进一步简化，即(x%y+ny,y)都是倒推获得的范围，这样的话时间复杂度就被降低到了对数级别，问题也就迎刃而解了\r\n- 总结一下，这其实是一种逆向dp的思路","frontmatter":{"abstract":"如果给出一个点 (x,y)，可以选择下一个点的坐标 (x+y,y)，或者(x,x+y)，那么，给出一个起点 (sx,sy)，和终点(tx,ty)，能否通过这样的变化，从起点到达终点","draft":null,"title":"Reaching Points","tags":["中文","algorithm","dynamic-programming"],"cover":"","date":"2019/10/20"}}},{"node":{"fields":{"slug":"/algorithm/max-chunks-to-make-sorted-ii","date":"2019-10-05T04:00:00.000Z"},"excerpt":"Max Chunks To Make Sorted II 问题 给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的 解决 思路 1：多次遍历 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N…","timeToRead":2,"rawMarkdownBody":"\r\n[Max Chunks To Make Sorted II](https://leetcode.com/problems/max-chunks-to-make-sorted-ii/description/)\r\n### 问题\r\n给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的\r\n\r\n### 解决\r\n- 思路 1：多次遍历\r\n- 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N)内，想到第二段（如果有的话），一定是在第一段的基础上进行判断的，这里可以构造一个排序数组\r\n- 例如 [1,1,0,0,1]，我们可以构造为[2,3,0,1,4]，也就是用0 - length-1 的序号来表示这个数组，相同的元素按前后位置分配序号，这样问题就可以简化为一次遍历，对比下标\r\n- 其实这里可以简化一点空间复杂度（也在O(N)范围内），我这里只是为了方便书写\r\n```\r\nclass Solution {\r\n    public int maxChunksToSorted(int[] arr) {\r\n        if(arr.length<2)return arr.length;\r\n        \r\n        int max = Integer.MIN_VALUE,count = 0;\r\n        \r\n        //get index array like [1,2,3] or [5,2,2,3,1]\r\n        int[] sorted = arr.clone();\r\n        \r\n        int[] newArr = new int[arr.length];\r\n        \r\n        Arrays.sort(sorted);\r\n        \r\n        int pre = -1;\r\n        for(int i=0;i<sorted.length;i++){\r\n            for(int j=0;j<arr.length;j++)\r\n                if(arr[j]==sorted[i] && (i==0 || sorted[i]!=sorted[i-1] || pre<j)){\r\n                    newArr[j] = i;\r\n                    pre = j;\r\n                    break;\r\n                }\r\n        }\r\n        \r\n        for(int i=0;i<arr.length;i++){\r\n            max = Math.max(max,newArr[i]);\r\n            if(max==i){\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        return count;\r\n    }\r\n}\r\n```\r\n\r\n- 思路 2：[栈](https://leetcode.com/problems/max-chunks-to-make-sorted-ii/discuss/398135/Precise-Python-Stack-7-lines-solution-with-explanation)\r\n简单来说，就是贪心记录每一个chunk，最后返回这个chunk数组的长度\r\n```python\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: List[int]) -> int:\r\n        stack = [] # store a list of biggest element of each chunk\r\n        for n in arr:\r\n            m = n # the biggest element from beginning to n\r\n            while len(stack)>0 and stack[-1]>n:\r\n                m = max(m, stack.pop())\r\n            stack.append(m)  # all element bigger than n was poped out of stack, so this is the biggest element\r\n        return len(stack) # length of the chunks array\r\n```\r\n","frontmatter":{"abstract":"给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的","draft":null,"title":"Max Chunks To Make Sorted II","tags":["中文","algorithm","array"],"cover":"","date":"2019/10/5"}}},{"node":{"fields":{"slug":"/algorithm/regular-expression-matching","date":"2019-10-05T04:00:00.000Z"},"excerpt":"Regular Expression Matching 问题 用包含*和.这两个正则符号的正则表达式来匹配字符串 解决 思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC…","timeToRead":2,"rawMarkdownBody":"\r\n[Regular Expression Matching](https://leetcode.com/articles/regular-expression-matching/)\r\n\r\n### 问题\r\n用包含*和.这两个正则符号的正则表达式来匹配字符串\r\n\r\n### 解决\r\n- 思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC掉的，只是考虑到大部分情况下栈深的问题\r\n\r\n这里就是非贪心的匹配方式，代码量很少，每次只匹配开头的字符，剩余结果由回溯过程得到\r\n```\r\nclass Solution {\r\n    public boolean isMatch(String text, String pattern) {\r\n        if (pattern.isEmpty()) return text.isEmpty();\r\n        boolean first_match = (!text.isEmpty() && \r\n                               (pattern.charAt(0) == text.charAt(0) || pattern.charAt(0) == '.'));\r\n        \r\n        if (pattern.length() >= 2 && pattern.charAt(1) == '*'){\r\n            return (isMatch(text, pattern.substring(2)) ||  //这里的 || 代表回溯过程\r\n                    (first_match && isMatch(text.substring(1), pattern)));\r\n        } else {\r\n            return first_match && isMatch(text.substring(1), pattern.substring(1));\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n- 思路：反向dp，这里我们如果用dp的思想，那么dp[i][j]表示的是text[i:]和pattern[j:]是否匹配，求的其实是dp[0][0]，所以是一种反向的dp，题目中无论是自底向上的方法还是从顶往下的方法，其计算顺序其实都是反向的（最后得到的结果都是dp[0][0]），这里自底向上的方法中，Result枚举的意义其实只是封装了一个布尔值，相当于一个布尔封装类型的数组\r\n\r\n### Tips\r\n- str.substring(n) 可以理解成去掉字符串前 n 个字母\r\n- wildcard 是通配符的意思，不止在正则表达式中有通配符，很多地方比如地址匹配，java中泛型中都有通配符","frontmatter":{"abstract":"Regular Expression Matching using * or .","draft":null,"title":"Regular Expression Matching","tags":["中文","algorithm","string"],"cover":"","date":"2019/10/5"}}},{"node":{"fields":{"slug":"/algorithm/largest-component-size-by-common-factor","date":"2019-06-15T04:00:00.000Z"},"excerpt":"问题 无向图中，顶点是数字，两个数字的最大公因子大于1时有边，求连通分量 思路 不能直接dfs，考虑接近dfs的另一种算法，并查集\n当然，如果直接把数据放在并查集里，并不会降低时间复杂度（实质上依然是两两比较，O(log2(n)*n^…","timeToRead":3,"rawMarkdownBody":"### 问题\r\n无向图中，顶点是数字，两个数字的最大公因子大于1时有边，求连通分量\r\n\r\n\r\n### 思路\r\n不能直接dfs，考虑接近dfs的另一种算法，并查集\r\n当然，如果直接把数据放在并查集里，并不会降低时间复杂度（实质上依然是两两比较，O(log2(n)*n^2)）\r\n对于降低时间复杂度的办法，我们从题目的特性出发，如果两数之间有大于1的公因数，那么他们在同一个连通子图内\r\n\r\n也就是说，只要这个数有2这个因子，就直接往2的连通子图的union find根节点权值上加1就行了，完全不需要把这个数和其余的所有偶数一一比较，他们肯定在同一个连同子图下面\r\n\r\n换句话说，为了求连通分量的最大值，我们不需要画出整个图，只需要画出关键部位就行\r\n![需要这样吗](https://upload-images.jianshu.io/upload_images/4655525-6372a4641804b41c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n![不需要](https://upload-images.jianshu.io/upload_images/4655525-bb2f27424448da68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n并查集的写法也注意一下，加权并查集在时间效率上会高很多\r\n\r\n```java\r\nimport java.util.*;\r\nimport java.util.stream.*;\r\nimport java.math.*;\r\n\r\npublic class Solution {\r\n\r\n    //并查集\r\n    int MAX=100000;\r\n\r\n    //用不加权并查集的话，把count去掉就行，代码简单一点\r\n    int[] count=new int[MAX],find = new int[MAX];\r\n\r\n    //这个是加权并查集的方法\r\n    public int count(int a){\r\n        return count[find(a)];\r\n    }\r\n\r\n    public int find(int a){\r\n        while(find[a]!=a)a=find[a];\r\n        return a;\r\n    }\r\n\r\n    public void union(int a,int b){\r\n        a=find(a);\r\n        b=find(b);\r\n\r\n        if(a==b)return;\r\n\r\n        if(count[a]>count[b]){\r\n            count[a]+=count[b];\r\n            find[b] = a;\r\n        }else{\r\n            count[b]+=count[a];\r\n            find[a] = b;\r\n        }\r\n    }\r\n\r\n    public int largestComponentSize(int[] A) {\r\n        //初始化并查集\r\n        for (int i = 0; i < MAX; i++) {\r\n            find[i] = i;\r\n            count[i] = 1;\r\n        }\r\n\r\n        Map<Integer,Integer> factorMap = new HashMap<>();\r\n\r\n        for (int i = 0; i < A.length; i++) {\r\n            double sqrt=Math.sqrt(A[i]);\r\n            for (int j = 2; j <=sqrt; j++) {\r\n                if(A[i] % j==0){\r\n                    unionMap(factorMap,j,i);\r\n                    unionMap(factorMap,A[i]/j,i);\r\n                }\r\n            }\r\n\r\n            unionMap(factorMap,A[i],i);\r\n        }\r\n\r\n        int max = 1;\r\n\r\n        for (int i = 0; i < A.length; i++) {\r\n            max = Math.max(max,count(i));\r\n        }\r\n\r\n        return max;\r\n    }\r\n\r\n    public void unionMap(Map<Integer,Integer> factorMap,int factor,int cur){\r\n        if(factorMap.containsKey(factor)){\r\n            union(factorMap.get(factor),cur);\r\n        }else{\r\n            factorMap.put(factor,cur);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Tips\r\n- 这是Contest 113里的最后一题\r\n- 加权并查集在很多情况下其实本来就比并查集效率要高，这题不管从什么方面考虑，都应该使用加权并查集\r\n- 循环因数的时候可以顺便判断一下这个数是不是质数，不过没必要（if (isPrime) unionMap(factorMap,A[i],i);）","frontmatter":{"abstract":"无向图中，顶点是数字，两个数字的最大公因子大于1时有边，求连通分量","draft":null,"title":"Largest Component Size By Common Factor","tags":["中文","algorithm","graph"],"cover":"","date":"2019/6/15"}}},{"node":{"fields":{"slug":"/algorithm/champagne-tower","date":"2019-06-10T04:00:00.000Z"},"excerpt":"Champagne Tower 问题 从一个香槟塔的顶端注入香槟，给出注入香槟的数量，求具体位置上的杯子中香槟的量 解决 模拟注入过程，这里其实如果忽略题中给出的众多条件和状态，反而更容易求解 queryrow 和 queryglass…","timeToRead":1,"rawMarkdownBody":"\r\n[Champagne Tower](https://leetcode.com/articles/champagne-tower/)\r\n### 问题\r\n从一个香槟塔的顶端注入香槟，给出注入香槟的数量，求具体位置上的杯子中香槟的量\r\n### 解决\r\n- 模拟注入过程，这里其实如果忽略题中给出的众多条件和状态，反而更容易求解\r\n- query_row 和 query_glass 的范围并不大，如果用二维数组模拟，可以做到O1的空间复杂度\r\n- 其实整个过程中，已注满香槟的杯子不会对之后的杯子产生影响，这里可以想到直接在题设的条件内层级遍历\r\n### Tips\r\n- 这里二维数组的长度其实可以是100，并不是102","frontmatter":{"abstract":"从一个香槟塔的顶端注入香槟，给出注入香槟的数量，求具体位置上的杯子中香槟的量","draft":null,"title":"Champagne Tower","tags":["中文","algorithm","simulate"],"cover":"","date":"2019/6/10"}}},{"node":{"fields":{"slug":"/algorithm/check-completeness-of-a-binary-tree","date":"2019-03-10T05:00:00.000Z"},"excerpt":"问题 判断一棵树是否是完全二叉树 思路 观察测试数据\n1,2,3,4,5,6 1,2,3,4,5,null,7 1,2,3,4,5,null…","timeToRead":2,"rawMarkdownBody":"### 问题\r\n判断一棵树是否是完全二叉树\r\n### 思路\r\n观察测试数据\r\n[1,2,3,4,5,6]\r\n\r\n[1,2,3,4,5,null,7]\r\n\r\n[1,2,3,4,5,null]\r\n从给的测试数据可以看出，只要是连续的数字中间没有空，或者只在最后有空，那么就是完全二叉树。所以可以给节点编号，再看看编号有没有按序排列\r\n\r\n### 解决\r\n```\r\n    public boolean isCompleteTree(TreeNode root) {\r\n        Map<Integer,TreeNode> map = new HashMap<>();\r\n        codeTree(root,map,1);\r\n        List<Integer> list = map.keySet().stream().sorted().collect(Collectors.toList());\r\n        for (int i = 1; i < list.size(); i++) {\r\n            if(list.get(i)-1!=list.get(i-1))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void codeTree(TreeNode root,Map<Integer,TreeNode> map,Integer code){\r\n         map.put(code,root);\r\n         if(root.left!=null){\r\n             codeTree(root.left,map,code*2);\r\n         }\r\n\r\n        if(root.left!=null){\r\n            codeTree(root.right,map,code*2+1);\r\n        }\r\n    }\r\n```\r\n\r\n### 思路\r\n继续看所给的测试数据，考虑到这种形式是对完全二叉树进行层次遍历得来的，所以按照层次遍历后，只要空节点是连续的，那就是完全二叉树\r\n\r\n### 解决\r\n```\r\n    public boolean isCompleteTree(TreeNode root) {\r\n        Queue<TreeNode> queue = new LinkedList();\r\n        queue.offer(root);\r\n        while(queue.peek()!=null){\r\n            TreeNode node = queue.poll();\r\n            queue.offer(node.left);\r\n            queue.offer(node.right);\r\n        }\r\n\r\n        while(!queue.isEmpty()){\r\n            if(queue.poll()!=null)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n```","frontmatter":{"abstract":"判断一棵树是否是完全二叉树","draft":null,"title":"Check Completeness Of A Binary Tree","tags":["中文","algorithm","tree"],"cover":"","date":"2019/3/10"}}},{"node":{"fields":{"slug":"/algorithm/majority-element","date":"2019-03-08T05:00:00.000Z"},"excerpt":"问题： 给定一个n元素数组，求出现次数最大的元素（即Majority Element），并且数组保证该元素出现的次数一定大于⌊ n/2 ⌋ 思路： 空间复杂度大于O(1)或者时间复杂度大于O(n)的就不给了，介绍一个空间O(1)时间O(n)的算法 对于数组an…","timeToRead":3,"rawMarkdownBody":"### 问题：\r\n给定一个n元素数组，求出现次数最大的元素（即Majority Element），并且数组保证该元素出现的次数一定大于⌊ n/2 ⌋\r\n\r\n### 思路：\r\n空间复杂度大于O(1)或者时间复杂度大于O(n)的就不给了，介绍一个空间O(1)时间O(n)的算法\r\n\r\n对于数组an，注意到Majority Element的数量一定大于⌊ n/2 ⌋，那么任意选取一个位置ai，如果[a0...ai]内不存在这样的元素，(ai...an]内一定存在这样的元素，显然这个元素也一定是Majority Element\r\n\r\n证明：反证法，假设数字n的频数是P(n)，如果前后都不存在这样的元素，那么Pmax(a1-ai)<=⌊ (i+1)/2 ⌋，Pmax(ai-an)<=⌊ (n-i)/2 ⌋，即使两个数字都是n，我们也有 Pn=Pmax(a1-ai)+Pmax(ai-an)<=⌊ n/2 ⌋，与Majority Element的频数大于⌊ n/2 ⌋矛盾，两个数字都不同的情况显然也是矛盾的\r\n\r\n接下来就是dp的思路，首先[a0]内的Majority Element就是a0\r\n对于位置i，通过判断ai是否是当前Majority Element来修改其频数P，那么这样会有三种情况：\r\n1) ai=Majority Element\r\n2) ai≠Majority Element，且P仍然>⌊ i/2 ⌋\r\n3) ai≠Majority Element，且使得P<=⌊ i/2 ⌋\r\n\r\n对于1和2，Majority Element不变，对于3，[a0,ai]内Majority Element就不存在了，只有到i+1时，Majority Element才会等于a(i+1)，不过根据题意，这个元素一定存在，也就是说，第三种情况其实就相当于Majority Element=a(i+1)\r\n\r\n综上所述，各种情况下都能获得该位置所对应的Majority Element，该dp算法是正确的\r\n\r\n### 解决：\r\n```java\r\npublic class Solution {\r\n    public int majorityElement(int[] num) {\r\n\r\n        int major=num[0], count = 1;\r\n        for(int i=1; i<num.length;i++){\r\n            if(count==0){\r\n                count++;\r\n                major=num[i];\r\n            }else if(major==num[i]){\r\n                count++;\r\n            }else count--;\r\n            \r\n        }\r\n        return major;\r\n    }\r\n}\r\n```\r\n### Tips\r\n- 这个算法是 Boyer–Moore 投票算法，能独立想出来很厉害了\r\n- 这个元素出现的次数大于一半这个条件要注意，面试的时候没有这个条件不要装逼说这个算法\r\n>https://leetcode.com/problems/majority-element/\r\n>https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\r\n\r\n","frontmatter":{"abstract":"给定一个n元素数组，求出现次数最大的元素（即Majority Element）","draft":null,"title":"Majority Element","tags":["中文","algorithm","array","linear time"],"cover":"","date":"2019/3/8"}}},{"node":{"fields":{"slug":"/algorithm/longest-palindrome-substring","date":"2019-03-04T05:00:00.000Z"},"excerpt":"问题 求最长回文子串 思路 如果考虑O(n)的动态规划，比如用f(i)来代表以当前位置为结尾的回文子串的最大长度，会遇到一个问题，就是说f(i)不仅仅取决于f(i-1)，有可能取决于i-1位置上回文子串的次最大长度等等。比如这个字符串 bananas，下标i从0开始的话，f(…","timeToRead":4,"rawMarkdownBody":"### 问题\r\n求最长回文子串\r\n\r\n### 思路\r\n如果考虑O(n)的动态规划，比如用f(i)来代表以当前位置为结尾的回文子串的最大长度，会遇到一个问题，就是说f(i)不仅仅取决于f(i-1)，有可能取决于i-1位置上回文子串的次最大长度等等。比如这个字符串 bananas，下标i从0开始的话，f(3)=3，但是因为f(3)是在1(\"a\")和3(\"ana\")中取的最大长度，舍弃了1(\"a\")，所以只是通过f(3)=3来判断的话，会发现f(4)无法延续这一回文串，从而得出f(4)=1的错误结果。其实f(4)延长了f(3)的次长回文子串，故f(4)=1+2=3\r\n\r\n- 思路1：\r\n那么先不考虑O(n)的动态规划，我们考虑O(n^2)的动态规划，自顶向下分析，f(i,j)表示s(i,j)子串是否是回文，那么显然有\r\nf(i,j) = true (i>=j)\r\nf(i,j) = true (f(i+1,j-1) and s(i)==s(j))\r\n此时自底向上遍历即可\r\n\r\n- 思路2\r\n再考虑记忆化搜索，f(i,j)定义为s(i,j)内最大回文子串长度，有递推式\r\nf(i,j)就是当前位置的子串长度\r\nf(i,j) = j-i+1 if (i >= j-1 and s(i)==s(j)) \r\nf(i,j) = j-i+1 if (s(i)==s(j) &&f(i+1,j-1)==s(i+1,j-1))\r\n记忆化搜索\r\nf(i,j) = max(f(i+1)(j-1),f(i)(j-1),f(i+1)(j))\r\n这里注意两点，首先如果把f(i,j)直接定义成子串，思路和时间复杂度都是正确的，但是会TLE。。。其次只有f(i,j)是当前位置子串时才会更新结果，所以其实最长回文子串长度的代码和最长回文子串的代码只相差几行~\r\n\r\n### 代码\r\n- dp\r\n```\r\n    public String longestPalindrome(String s) {\r\n        if(s==null || s.length()==0) return \"\";\r\n        int dp[][] = new int[s.length()][s.length()];\r\n\r\n        for (int i = 0; i < s.length(); i++) {\r\n            for (int j = 0; j+i < s.length(); j++) {\r\n                dp[j][j+i] = dp[j][j+i]!=0?dp[j][j+i]:(isPalindrome(s,j,j+i,dp)?2:1);\r\n            }\r\n        }\r\n\r\n        int max = 0;\r\n        String res = \"\";\r\n\r\n        for (int i = 0; i < s.length(); i++) {\r\n            for (int j = i; j < s.length(); j++) {\r\n                if(dp[i][j]==2 && j-i+1>max){\r\n                    max = j-i;\r\n                    res = s.substring(i,j+1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    public boolean isPalindrome(String s, int start, int end, int dp[][]){\r\n        if (dp[start][end]>0) return dp[start][end]==2;\r\n        if(end-start<=1) return s.charAt(start)==s.charAt(end);\r\n        return isPalindrome(s,start+1,end-1,dp) && s.charAt(start)==s.charAt(end);\r\n    }\r\n```\r\n- 记忆化搜索\r\n```java\r\n    public String longestPalindrome(String s){\r\n        if(s==null || s.length()==0) return \"\";\r\n\r\n        int dp[][] = new int[s.length()][s.length()];\r\n        String res=\"\";\r\n        int max = 0;\r\n\r\n        for (int i = s.length()-1; i>=0;i--) {\r\n            for (int j = i; j < s.length(); j++) {\r\n                if(s.charAt(i)==s.charAt(j)){\r\n                    if(j-i>1 && dp[i+1][j-1]==j-i-1) {\r\n                        dp[i][j] = 2 + dp[i + 1][j - 1];\r\n                        if(dp[i][j]>max){max=dp[i][j];res = s.substring(i,j+1);}\r\n                    }\r\n                    else if(j-i<=1){\r\n                        dp[i][j] = j-i+1;\r\n                        if(dp[i][j]>max){max=dp[i][j];res = s.substring(i,j+1);}\r\n                    }\r\n                }\r\n\r\n                if(j>0 && i<s.length()-1)\r\n                    dp[i][j] = max(dp[i][j],dp[i][j-1],dp[i+1][j],dp[i+1][j-1]);\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n```\r\n### Ref\r\n[https://leetcode.com/problems/longest-palindromic-substring/](https://leetcode.com/problems/longest-palindromic-substring/)\r\n[https://tarokuriyama.com/projects/palindrome2.php](https://tarokuriyama.com/projects/palindrome2.php)\r\n\r\n","frontmatter":{"abstract":"求最长回文子串","draft":null,"title":"Longest Palindrome Substring","tags":["中文","algorithm","string"],"cover":"","date":"2019/3/4"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"algorithm"}}}