{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/array/","result":{"data":{"allMarkdownRemark":{"totalCount":2,"edges":[{"node":{"fields":{"slug":"/algorithm/max-chunks-to-make-sorted-ii","date":"2019-10-05T04:00:00.000Z"},"excerpt":"Max Chunks To Make Sorted II 问题 给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的 解决 思路 1：多次遍历 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N…","timeToRead":2,"rawMarkdownBody":"\r\n[Max Chunks To Make Sorted II](https://leetcode.com/problems/max-chunks-to-make-sorted-ii/description/)\r\n### 问题\r\n给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的\r\n\r\n### 解决\r\n- 思路 1：多次遍历\r\n- 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N)内，想到第二段（如果有的话），一定是在第一段的基础上进行判断的，这里可以构造一个排序数组\r\n- 例如 [1,1,0,0,1]，我们可以构造为[2,3,0,1,4]，也就是用0 - length-1 的序号来表示这个数组，相同的元素按前后位置分配序号，这样问题就可以简化为一次遍历，对比下标\r\n- 其实这里可以简化一点空间复杂度（也在O(N)范围内），我这里只是为了方便书写\r\n```\r\nclass Solution {\r\n    public int maxChunksToSorted(int[] arr) {\r\n        if(arr.length<2)return arr.length;\r\n        \r\n        int max = Integer.MIN_VALUE,count = 0;\r\n        \r\n        //get index array like [1,2,3] or [5,2,2,3,1]\r\n        int[] sorted = arr.clone();\r\n        \r\n        int[] newArr = new int[arr.length];\r\n        \r\n        Arrays.sort(sorted);\r\n        \r\n        int pre = -1;\r\n        for(int i=0;i<sorted.length;i++){\r\n            for(int j=0;j<arr.length;j++)\r\n                if(arr[j]==sorted[i] && (i==0 || sorted[i]!=sorted[i-1] || pre<j)){\r\n                    newArr[j] = i;\r\n                    pre = j;\r\n                    break;\r\n                }\r\n        }\r\n        \r\n        for(int i=0;i<arr.length;i++){\r\n            max = Math.max(max,newArr[i]);\r\n            if(max==i){\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        return count;\r\n    }\r\n}\r\n```\r\n\r\n- 思路 2：[栈](https://leetcode.com/problems/max-chunks-to-make-sorted-ii/discuss/398135/Precise-Python-Stack-7-lines-solution-with-explanation)\r\n简单来说，就是贪心记录每一个chunk，最后返回这个chunk数组的长度\r\n```python\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: List[int]) -> int:\r\n        stack = [] # store a list of biggest element of each chunk\r\n        for n in arr:\r\n            m = n # the biggest element from beginning to n\r\n            while len(stack)>0 and stack[-1]>n:\r\n                m = max(m, stack.pop())\r\n            stack.append(m)  # all element bigger than n was poped out of stack, so this is the biggest element\r\n        return len(stack) # length of the chunks array\r\n```\r\n","frontmatter":{"abstract":"给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的","draft":null,"title":"Max Chunks To Make Sorted II","tags":["中文","algorithm","array"],"cover":"","date":"2019/10/5"}}},{"node":{"fields":{"slug":"/algorithm/majority-element","date":"2019-03-08T05:00:00.000Z"},"excerpt":"问题： 给定一个n元素数组，求出现次数最大的元素（即Majority Element），并且数组保证该元素出现的次数一定大于⌊ n/2 ⌋ 思路： 空间复杂度大于O(1)或者时间复杂度大于O(n)的就不给了，介绍一个空间O(1)时间O(n)的算法 对于数组an…","timeToRead":2,"rawMarkdownBody":"### 问题：\r\n给定一个n元素数组，求出现次数最大的元素（即Majority Element），并且数组保证该元素出现的次数一定大于⌊ n/2 ⌋\r\n\r\n### 思路：\r\n空间复杂度大于O(1)或者时间复杂度大于O(n)的就不给了，介绍一个空间O(1)时间O(n)的算法\r\n\r\n对于数组an，注意到Majority Element的数量一定大于⌊ n/2 ⌋，那么任意选取一个位置ai，如果[a0...ai]内不存在这样的元素，(ai...an]内一定存在这样的元素，显然这个元素也一定是Majority Element\r\n\r\n证明：反证法，假设数字n的频数是P(n)，如果前后都不存在这样的元素，那么Pmax(a1-ai)<=⌊ (i+1)/2 ⌋，Pmax(ai-an)<=⌊ (n-i)/2 ⌋，即使两个数字都是n，我们也有 Pn=Pmax(a1-ai)+Pmax(ai-an)<=⌊ n/2 ⌋，与Majority Element的频数大于⌊ n/2 ⌋矛盾，两个数字都不同的情况显然也是矛盾的\r\n\r\n接下来就是dp的思路，首先[a0]内的Majority Element就是a0\r\n对于位置i，通过判断ai是否是当前Majority Element来修改其频数P，那么这样会有三种情况：\r\n1) ai=Majority Element\r\n2) ai≠Majority Element，且P仍然>⌊ i/2 ⌋\r\n3) ai≠Majority Element，且使得P<=⌊ i/2 ⌋\r\n\r\n对于1和2，Majority Element不变，对于3，[a0,ai]内Majority Element就不存在了，只有到i+1时，Majority Element才会等于a(i+1)，不过根据题意，这个元素一定存在，也就是说，第三种情况其实就相当于Majority Element=a(i+1)\r\n\r\n综上所述，各种情况下都能获得该位置所对应的Majority Element，该dp算法是正确的\r\n\r\n### 解决：\r\n```java\r\npublic class Solution {\r\n    public int majorityElement(int[] num) {\r\n\r\n        int major=num[0], count = 1;\r\n        for(int i=1; i<num.length;i++){\r\n            if(count==0){\r\n                count++;\r\n                major=num[i];\r\n            }else if(major==num[i]){\r\n                count++;\r\n            }else count--;\r\n            \r\n        }\r\n        return major;\r\n    }\r\n}\r\n```\r\n### Tips\r\n- 这个算法是 Boyer–Moore 投票算法，能独立想出来很厉害了\r\n- 这个元素出现的次数大于一半这个条件要注意，面试的时候没有这个条件不要装逼说这个算法\r\n>https://leetcode.com/problems/majority-element/\r\n>https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\r\n\r\n","frontmatter":{"abstract":"给定一个n元素数组，求出现次数最大的元素（即Majority Element）","draft":null,"title":"Majority Element","tags":["中文","algorithm","array","linear time"],"cover":"","date":"2019/3/8"}}}]}},"pageContext":{"tag":"array"}},"staticQueryHashes":[]}