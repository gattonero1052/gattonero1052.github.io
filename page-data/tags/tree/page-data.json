{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/tree/","result":{"data":{"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"fields":{"slug":"/algorithm/check-completeness-of-a-binary-tree","date":"2019-03-10T05:00:00.000Z"},"excerpt":"问题 判断一棵树是否是完全二叉树 思路 观察测试数据\n1,2,3,4,5,6 1,2,3,4,5,null,7 1,2,3,4,5,null…","timeToRead":1,"rawMarkdownBody":"### 问题\r\n判断一棵树是否是完全二叉树\r\n### 思路\r\n观察测试数据\r\n[1,2,3,4,5,6]\r\n\r\n[1,2,3,4,5,null,7]\r\n\r\n[1,2,3,4,5,null]\r\n从给的测试数据可以看出，只要是连续的数字中间没有空，或者只在最后有空，那么就是完全二叉树。所以可以给节点编号，再看看编号有没有按序排列\r\n\r\n### 解决\r\n```\r\n    public boolean isCompleteTree(TreeNode root) {\r\n        Map<Integer,TreeNode> map = new HashMap<>();\r\n        codeTree(root,map,1);\r\n        List<Integer> list = map.keySet().stream().sorted().collect(Collectors.toList());\r\n        for (int i = 1; i < list.size(); i++) {\r\n            if(list.get(i)-1!=list.get(i-1))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void codeTree(TreeNode root,Map<Integer,TreeNode> map,Integer code){\r\n         map.put(code,root);\r\n         if(root.left!=null){\r\n             codeTree(root.left,map,code*2);\r\n         }\r\n\r\n        if(root.left!=null){\r\n            codeTree(root.right,map,code*2+1);\r\n        }\r\n    }\r\n```\r\n\r\n### 思路\r\n继续看所给的测试数据，考虑到这种形式是对完全二叉树进行层次遍历得来的，所以按照层次遍历后，只要空节点是连续的，那就是完全二叉树\r\n\r\n### 解决\r\n```\r\n    public boolean isCompleteTree(TreeNode root) {\r\n        Queue<TreeNode> queue = new LinkedList();\r\n        queue.offer(root);\r\n        while(queue.peek()!=null){\r\n            TreeNode node = queue.poll();\r\n            queue.offer(node.left);\r\n            queue.offer(node.right);\r\n        }\r\n\r\n        while(!queue.isEmpty()){\r\n            if(queue.poll()!=null)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n```","frontmatter":{"abstract":"判断一棵树是否是完全二叉树","draft":null,"title":"Check Completeness Of A Binary Tree","tags":["中文","algorithm","tree"],"cover":"","date":"2019/3/10"}}}]}},"pageContext":{"tag":"tree"}},"staticQueryHashes":[]}