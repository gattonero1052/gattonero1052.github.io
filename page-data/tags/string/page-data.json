{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/string/","result":{"data":{"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"fields":{"slug":"/algorithm/big-number-multiply","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 适用于1000位以内数的乘法 思路 注意两点： 数字是通过字符串传过来的，字符串的低位反而是数字的高位，所以我们要从数字的低位开始计算的话，必须反转字符串（当然结果也要反转） 原理就是小学乘法，竖式计算，但不需要每次都计算进位，可以统一计算 解决 Tips…","timeToRead":2,"rawMarkdownBody":"### 问题\r\n适用于1000位以内数的乘法\r\n### 思路\r\n注意两点：\r\n- 数字是通过字符串传过来的，字符串的低位反而是数字的高位，所以我们要从数字的低位开始计算的话，必须反转字符串（当然结果也要反转）\r\n- 原理就是小学乘法，竖式计算，但不需要每次都计算进位，可以统一计算\r\n### 解决\r\n```java\r\n    public String multi(String a, String b){\r\n        ////反转字符串\r\n        char[] ar = reverse(a).toCharArray(), br = reverse(b).toCharArray();\r\n\r\n        int res[] = new int[1000];\r\n        int max = ar.length + br.length-1;//m位数乘n位数，结果至少是m+n-1位\r\n\r\n        for (int i = 0; i <max; i++) {\r\n            for (int j = 0;  i < ar.length && j < br.length; j++) {\r\n                res[i + j] += (ar[i] - 48)*(br[j] - 48);\r\n            }\r\n\r\n            if (res[i] >= 10) {\r\n                res[i+1] += res[i]/10;\r\n                res[i] %= 10;\r\n                max= Math.max(max, i+2);//结果最多是m+n位，+2是因为i是从0开始的下标，m是从1开始的位数\r\n            }\r\n        }\r\n\r\n        \r\n        StringBuilder ans = new StringBuilder();\r\n        for (int i = 0;i<max; i++) {\r\n            ans.append((char)(res[i]+48));\r\n        }\r\n\r\n        //反转结果\r\n        return ans.reverse().toString();\r\n    }\r\n\r\n    public String reverse(String s){\r\n        return new StringBuilder(s).reverse().toString();\r\n    }\r\n```\r\n### Tips\r\n- 如果追求算法简单易懂，这样是可行的，但是追求速度的话，可以使用[karatsuba](https://en.wikipedia.org/wiki/Karatsuba_algorithm)乘法，\r\n时间复杂度在n^log3级别，原理是分治，时间复杂度可以用[Master Theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)证明\r\n- karatsuba算法并不是最快的，但是是时间复杂度小于平方复杂度中的算法里相对简单的一种\r\n\r\n### Ref\r\nhttps://oi-wiki.org/math/bignum/","frontmatter":{"abstract":"大数乘法","draft":null,"title":"Big Number Multiply","tags":["中文","algorithm","math","string"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/regular-expression-matching","date":"2019-10-05T04:00:00.000Z"},"excerpt":"Regular Expression Matching 问题 用包含*和.这两个正则符号的正则表达式来匹配字符串 解决 思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC…","timeToRead":2,"rawMarkdownBody":"\r\n[Regular Expression Matching](https://leetcode.com/articles/regular-expression-matching/)\r\n\r\n### 问题\r\n用包含*和.这两个正则符号的正则表达式来匹配字符串\r\n\r\n### 解决\r\n- 思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC掉的，只是考虑到大部分情况下栈深的问题\r\n\r\n这里就是非贪心的匹配方式，代码量很少，每次只匹配开头的字符，剩余结果由回溯过程得到\r\n```\r\nclass Solution {\r\n    public boolean isMatch(String text, String pattern) {\r\n        if (pattern.isEmpty()) return text.isEmpty();\r\n        boolean first_match = (!text.isEmpty() && \r\n                               (pattern.charAt(0) == text.charAt(0) || pattern.charAt(0) == '.'));\r\n        \r\n        if (pattern.length() >= 2 && pattern.charAt(1) == '*'){\r\n            return (isMatch(text, pattern.substring(2)) ||  //这里的 || 代表回溯过程\r\n                    (first_match && isMatch(text.substring(1), pattern)));\r\n        } else {\r\n            return first_match && isMatch(text.substring(1), pattern.substring(1));\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n- 思路：反向dp，这里我们如果用dp的思想，那么dp[i][j]表示的是text[i:]和pattern[j:]是否匹配，求的其实是dp[0][0]，所以是一种反向的dp，题目中无论是自底向上的方法还是从顶往下的方法，其计算顺序其实都是反向的（最后得到的结果都是dp[0][0]），这里自底向上的方法中，Result枚举的意义其实只是封装了一个布尔值，相当于一个布尔封装类型的数组\r\n\r\n### Tips\r\n- str.substring(n) 可以理解成去掉字符串前 n 个字母\r\n- wildcard 是通配符的意思，不止在正则表达式中有通配符，很多地方比如地址匹配，java中泛型中都有通配符","frontmatter":{"abstract":"Regular Expression Matching using * or .","draft":null,"title":"Regular Expression Matching","tags":["中文","algorithm","string"],"cover":"","date":"2019/10/5"}}},{"node":{"fields":{"slug":"/algorithm/longest-palindrome-substring","date":"2019-03-04T05:00:00.000Z"},"excerpt":"问题 求最长回文子串 思路 如果考虑O(n)的动态规划，比如用f(i)来代表以当前位置为结尾的回文子串的最大长度，会遇到一个问题，就是说f(i)不仅仅取决于f(i-1)，有可能取决于i-1位置上回文子串的次最大长度等等。比如这个字符串 bananas，下标i从0开始的话，f(…","timeToRead":4,"rawMarkdownBody":"### 问题\r\n求最长回文子串\r\n\r\n### 思路\r\n如果考虑O(n)的动态规划，比如用f(i)来代表以当前位置为结尾的回文子串的最大长度，会遇到一个问题，就是说f(i)不仅仅取决于f(i-1)，有可能取决于i-1位置上回文子串的次最大长度等等。比如这个字符串 bananas，下标i从0开始的话，f(3)=3，但是因为f(3)是在1(\"a\")和3(\"ana\")中取的最大长度，舍弃了1(\"a\")，所以只是通过f(3)=3来判断的话，会发现f(4)无法延续这一回文串，从而得出f(4)=1的错误结果。其实f(4)延长了f(3)的次长回文子串，故f(4)=1+2=3\r\n\r\n- 思路1：\r\n那么先不考虑O(n)的动态规划，我们考虑O(n^2)的动态规划，自顶向下分析，f(i,j)表示s(i,j)子串是否是回文，那么显然有\r\nf(i,j) = true (i>=j)\r\nf(i,j) = true (f(i+1,j-1) and s(i)==s(j))\r\n此时自底向上遍历即可\r\n\r\n- 思路2\r\n再考虑记忆化搜索，f(i,j)定义为s(i,j)内最大回文子串长度，有递推式\r\nf(i,j)就是当前位置的子串长度\r\nf(i,j) = j-i+1 if (i >= j-1 and s(i)==s(j)) \r\nf(i,j) = j-i+1 if (s(i)==s(j) &&f(i+1,j-1)==s(i+1,j-1))\r\n记忆化搜索\r\nf(i,j) = max(f(i+1)(j-1),f(i)(j-1),f(i+1)(j))\r\n这里注意两点，首先如果把f(i,j)直接定义成子串，思路和时间复杂度都是正确的，但是会TLE。。。其次只有f(i,j)是当前位置子串时才会更新结果，所以其实最长回文子串长度的代码和最长回文子串的代码只相差几行~\r\n\r\n### 代码\r\n- dp\r\n```\r\n    public String longestPalindrome(String s) {\r\n        if(s==null || s.length()==0) return \"\";\r\n        int dp[][] = new int[s.length()][s.length()];\r\n\r\n        for (int i = 0; i < s.length(); i++) {\r\n            for (int j = 0; j+i < s.length(); j++) {\r\n                dp[j][j+i] = dp[j][j+i]!=0?dp[j][j+i]:(isPalindrome(s,j,j+i,dp)?2:1);\r\n            }\r\n        }\r\n\r\n        int max = 0;\r\n        String res = \"\";\r\n\r\n        for (int i = 0; i < s.length(); i++) {\r\n            for (int j = i; j < s.length(); j++) {\r\n                if(dp[i][j]==2 && j-i+1>max){\r\n                    max = j-i;\r\n                    res = s.substring(i,j+1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    public boolean isPalindrome(String s, int start, int end, int dp[][]){\r\n        if (dp[start][end]>0) return dp[start][end]==2;\r\n        if(end-start<=1) return s.charAt(start)==s.charAt(end);\r\n        return isPalindrome(s,start+1,end-1,dp) && s.charAt(start)==s.charAt(end);\r\n    }\r\n```\r\n- 记忆化搜索\r\n```java\r\n    public String longestPalindrome(String s){\r\n        if(s==null || s.length()==0) return \"\";\r\n\r\n        int dp[][] = new int[s.length()][s.length()];\r\n        String res=\"\";\r\n        int max = 0;\r\n\r\n        for (int i = s.length()-1; i>=0;i--) {\r\n            for (int j = i; j < s.length(); j++) {\r\n                if(s.charAt(i)==s.charAt(j)){\r\n                    if(j-i>1 && dp[i+1][j-1]==j-i-1) {\r\n                        dp[i][j] = 2 + dp[i + 1][j - 1];\r\n                        if(dp[i][j]>max){max=dp[i][j];res = s.substring(i,j+1);}\r\n                    }\r\n                    else if(j-i<=1){\r\n                        dp[i][j] = j-i+1;\r\n                        if(dp[i][j]>max){max=dp[i][j];res = s.substring(i,j+1);}\r\n                    }\r\n                }\r\n\r\n                if(j>0 && i<s.length()-1)\r\n                    dp[i][j] = max(dp[i][j],dp[i][j-1],dp[i+1][j],dp[i+1][j-1]);\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n```\r\n### Ref\r\n[https://leetcode.com/problems/longest-palindromic-substring/](https://leetcode.com/problems/longest-palindromic-substring/)\r\n[https://tarokuriyama.com/projects/palindrome2.php](https://tarokuriyama.com/projects/palindrome2.php)\r\n\r\n","frontmatter":{"abstract":"求最长回文子串","draft":null,"title":"Longest Palindrome Substring","tags":["中文","algorithm","string"],"cover":"","date":"2019/3/4"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"string"}}}