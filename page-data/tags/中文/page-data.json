{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/中文/","result":{"data":{"allMarkdownRemark":{"totalCount":20,"edges":[{"node":{"fields":{"slug":"/Game/poker-game","date":"2019-12-22T05:00:00.000Z"},"excerpt":"一个Web扑克游戏 —— 用不着机器学习也能解决这个问题 A poker game based on browser, only using basic algorithms 游戏地址 游戏地址 概要 这里我主要用中文来讲述poker game…","timeToRead":8,"rawMarkdownBody":"### 一个Web扑克游戏 —— 用不着机器学习也能解决这个问题\r\n>A poker game based on browser, only using basic algorithms\r\n\r\n### 游戏地址\r\n[游戏地址](https://mskf.work/poker)\r\n\r\n### 概要\r\n这里我主要用中文来讲述poker game的完成细节，一些注意点和坑，以及单人web项目开发过程中的体会\r\n> I'll mainly express in Chinese, including details, not-to-dos and how should I develop small projects.\r\n\r\n### 技术栈\r\n- Javascript (ES6, Lodash, WebWorker)\r\n- React\r\n- GatsbyJS\r\n\r\n#### 起因\r\n偶然一个论坛的帖子，讨论扑克牌残局。事实上我以前也经常看这类帖子，包括下面引发的一众讨论，但其实很多残局用穷举的方法就能知道获胜方法，让某些讨论完全可以用程序来替代。\r\n>I've read some posts on BBS discussing poker matches, in fact, some are not quite meaningful because a simple program could do it all.\r\n\r\n#### 思路\r\n事实上这个思路很简单，用不着多高深的算法，首先枚举所有对局情况，生成决策树。再把结果从底至上保存\r\n>The idea is to enumerate all the possible choices and generate a decision tree. Then save the results from bottom to top.\r\n\r\n#### 实现过程\r\n- 写一个决策树生成算法，输入是开始的对局情况和先后手，其中还包括计算所有可能出牌方式的算法，这里使用了loadsh库来简化部分计算\r\n>An algorithm to get a decision tree, params are cards and isFirst flag\r\n```\r\ngetDecisionTree(cardsA, cardsB, isAfirst)\r\n```\r\n\r\n- 在Gatsby中引入这个算法，并组件化构建相关的页面\r\n>import this algorithm in gatsby and build related components\r\n\r\n- 构建的过程中发现，如果完全使用React Hooks来写逻辑，会变得非常复杂。因为对于游戏而言，组件间的交互是非常重的，所以最后删除了几乎所有Component的Hook，使用一个全局变量来保存所有游戏数据，这样也方便使用本地存储进行自动保存\r\n>I discovered that there will be heavy interaction between components while using hooks, so I use a \"global variable\" instead.\r\n\r\n- 通过一个状态机(DFA)使用该全局变量，当然也可以用Redux的概念去理解，即每个处理action的函数， 接受一个action和相关的参数，找到当前的游戏状态，然后去执行相应的操作，返回新的状态\r\n>This global variable works with a DFA，or you can understand it using concepts from Redux, like there is a function which receives an action and some parameters, and then, get the new state from previous state.\r\n\r\n- 最后定义一系列的游戏状态，和相关的参数，我发现确实可以用一个比较复杂的状态机来描述整个游戏过程。唯一美中不足的是，游戏需要暂停，也就是说停止响应任何除了接触暂停操作之外的动作，那么这时候需要写一个额外的逻辑。\r\n>Finally, I defined several game states and found my DFA did perfectly implement the game except for some extra logic handling the pause-resume action.\r\n\r\n```js\r\n//definition\r\nconst act = (prevState, action, params, forced)=>{\r\n    if (prevState.paused && action!=ACTION.RESUME) return prevState\r\n    ...\r\n    return newState\r\n}\r\n\r\n//usage\r\nstate = act(state, ACTION.DO_SOME_THING, [1,2], false)\r\n```\r\n\r\n- 对于游戏来说UI很重要，但我直接凭多年看卢姥爷直播录像的经验画了，吐槽一下，用CSS画界面真的非常复杂而且耗时，因为一开始想的是组件式的开发，后来就没改，如果重来的话我会用canvas\r\n>UI is important for a game, but I just draw it according to my personal experience. It was an exhausting work and if I can redo it, I will use canvas.\r\n\r\n- 开发的过程中我发现，使用一整个DFA来定义游戏状态真的是非常方便的做法，方便增删功能，也几乎不用与展示层做任何交互\r\n>It's really convenient to use a whole DFA to define game state if you want to add or delete some features without changing components for present. \r\n- 最后，我使用了[workerize-loader](https://github.com/gatsbyjs/gatsby/issues/12095)来实现异步计算的功能，毕竟JS是单线程的，在WebWorker技术出现之前这种重计算的场景简直是天方异谈，重则浏览器奔溃，轻则网站卡死，感谢WebWorker！\r\n>At last, I used workerize-loader to add support for asynchronized computing, thanks for webworker!\r\n\r\n### 单人项目开发的经验和思考(Chinese Only)\r\n首先从一个想法到想法的完全实现用了接近一个月的时间，当然这里的实际编码时间只有10天左右（估计每天5小时左右）。主要的瓶颈在于首先这是个临时起意的想法，也就是我之前从来没有接触过任何相关或类似的项目，那么就很有可能出现进行到一半需要重构整个项目的情况，事实上的确，当我发现用另一种办法（使用全局游戏变量）可以加快开发时，我果断重构了整个项目。次要的瓶颈在于UI，事实上，用CSS画UI的功夫足够我写十个算法了，还是使用canvas比较自由和方便。\r\n\r\n解决了这两个问题，我相信项目的进度会大大加快，因为纯粹的技术问题通过stackoverflow或者google，几乎不会超过10分钟就可以得到解决。\r\n\r\n所以，今后的web个人项目，我会做的是：\r\n- 判断是否有已知的类似项目，直接找到自己做过或者他人做过的类似项目，在此基础上进行修改，而并不是自己从头开始，即使是有相关的框架\r\n- 除了UI以外的算法层面自己实现，UI使用基于某种游戏框架的库，加快开发时间，减少在适配和美工等方面浪费的时间\r\n\r\n另外，考虑到Chrome即将取消对Flash的支持，某些轻量级的游戏，实际上就失去了生存的空间，使用一些基于Html5的游戏框架（甚至不需要复杂的引擎，只需要UI库的支持），加上PWA，有没有可能快速完成一些好玩有趣又轻松的游戏呢？\r\n\r\n### 可能需要完善的地方\r\n- 在需要的地方加上帮助\r\n- 提供一些默认的经典残局\r\n- 把默认的alert换成其他更友好的提示\r\n- 其他的欢迎来[github](https://github.com/gattonero1052/pokerweb)提[issue](https://github.com/gattonero1052/pokerweb/issues/new)\r\n\r\n","frontmatter":{"abstract":"","draft":null,"title":"Poker Game","tags":["中文","Game","Javascript","React","PWA","WebGame"],"cover":"","date":"2019/12/22"}}},{"node":{"fields":{"slug":"/Java/java-generics-tricky-code","date":"2019-10-25T04:00:00.000Z"},"excerpt":"Purpose 收集整理一些比较难以理解的Java泛型问题，以及详细解释其中的原理 List Wildcards PECS (Producer extend, Consumer super) Class and Interface Producer 其中表示的是Father…","timeToRead":14,"rawMarkdownBody":"### Purpose\r\n收集整理一些比较难以理解的Java泛型问题，以及详细解释其中的原理\r\n\r\n---\r\n### List Wildcards\r\nPECS (Producer extend, Consumer super)\r\n#### Class and Interface\r\n```java\r\ninterface Grandpa {}\r\ninterface Grandma {}\r\ninterface Father extends Grandpa,Grandma {}\r\ninterface Son extends Father {}\r\ninterface Daughter extends Father {}\r\n\r\nclass CGrandpa implements Grandpa {}\r\nclass CGrandma implements Grandma {}\r\n...\r\n```\r\n#### Producer\r\n```java\r\nList<? extends Father> producer = new ArrayList();\r\n```\r\n\r\n其中`? extends Father`表示的是Father的subtype，包括Father\r\n```java\r\nList<? extends Father> son_producer = new ArrayList<Son>();\r\nList<? extends Father> daughter_producer = new ArrayList<Daughter>();\r\nList<? extends Father> father_producer = new ArrayList<Father>();\r\n//all above are valid, below are invalid\r\nList<? extends Father> producer = new ArrayList<Grandpa>();\r\nList<? extends Father> producer = new ArrayList<Grandma>();\r\n```\r\n对于函数参数为该泛型的方法，例如`boolean add(E e)`\r\n```java\r\nson_producer.add(new CSon()); // invalid\r\nson_producer.add(new CFather()); // invalid\r\nson_producer.add(new CGrandpa()); // invalid\r\nson_producer.add(null); //valid\r\n```\r\n不能使用任何非空元素作为参数的原因是：\r\n- add的函数声明`boolean add(E e)`中，函数参数为 `E`，和List中的泛型相同\r\n- `? extends Father`代表任何Father或Father的subtype，所以该泛型的subtype是不确定的，但是supertype确定\r\n\r\n- 从而除了null以外，任何参数的类型都无法保证可以作为该泛型的子类从而进行upcasting，所以只能使用null作为函数的参数\r\n\r\n对于返回类型为该泛型的方法，例如`E get(int index)`\r\n```java\r\nList<Son> sonList = new ArrayList<>();\r\nsonList.add( new CSon() );\r\nsonList.add( new CSon() );\r\nsonList.add( new CSon() );\r\nson_producer = sonList;\r\n\r\nFather father = son_producer.get(0);//valid\r\nGrandpa grandpa = son_producer.get(0);//valid\r\n```\r\n因为返回值是Father的subtype，所以可以进行upcasting，获取所需的supertype对象\r\n#### Consumer\r\n```java\r\nList<? super Father> consumer = new ArrayList();\r\n```\r\n其中`<? super Father>`表示Father的supertype，包括Father\r\n```java\r\nList<? super Father> grandpa_consumer = new ArrayList<Grandpa>();\r\nList<? super Father> grandma_consumer = new ArrayList<Grandma>();\r\nList<? super Father> father_consumer = new ArrayList<Father>();\r\n//all above are valid, below are invalid\r\nList<? super Father> son_consumer = new ArrayList<Son>();\r\nList<? super Father> daughter_consumer = new ArrayList<Daughter>();\r\n```\r\n对于函数参数为该泛型的方法，例如`boolean add(E e)`\r\n```java\r\nfather_consumer.add(new CFather());//valid\r\nfather_consumer.add(new CSon());//valid\r\nfather_consumer.add(null);//valid\r\nfather_consumer.add(new CGrandpa());//invalid\r\n```\r\n可以使用任何Father以及其subtype的原因是：\r\n- add的函数声明`boolean add(E e)`中，函数参数为 `E`，和List中的泛型相同\r\n- `? super Father`代表Father或Father的supertype，所以该泛型的subtype确定，而supertype可以看成统一为Object\r\n- 从而任何Father的subtype都可以作为参数，upcasting为该泛型，当然null也可以\r\n对于返回类型为该泛型的方法，例如`E get(int index)`\r\n```java\r\nFather father = father_consumer.get(0);//invalid\r\nObject object = father_consumer.get(0);//valid\r\n```\r\n这里要把泛型的supertype不确定，所以在没有强制转换的情况下，只能返回对象只能是Object类型的\r\n\r\n#### Tips\r\n- `<? extends XXX>`和`<? super XXX>`这两个通配符的行为并不对称，原因在于子类的upcasting可以是隐式的，而父类的downcasting并不是\r\n- 假设类泛型为E，当E作为方法参数时，我们需要把某个类upcasting成E，而E作为方法返回值时，我们需要把E upcasting成某个类\r\n- 因为通过接口实现的多态也符合泛型的规则，所以这里不使用子类(subclass)和父类(superclass)的称呼，而使用subtype和supertype\r\n- Object是任何类的supertype，没有哪个类是任何类的subtype\r\n- null是任何类的对象\r\n\r\n--- \r\n### Wildcard Capture\r\n通配符捕获\r\n### Code\r\n\r\n```java\r\nvoid foo(List<?> i) {\r\n    i.set(0, i.get(0));//invalid\r\n}\r\n\r\nvoid foo(List i) {\r\n    i.set(0, i.get(0));//valid\r\n}\r\n\r\n<T> void foo(List<T> i) {\r\n    i.set(0, i.get(0));//valid\r\n}\r\n```\r\n\r\n错误原因\r\n- ? 作为通配符，表示任意一个类（? 可以理解为 ? extends Object），通常被编译器用作类型推断使用，但是当编译器无法做出类型推断，从而无法保证类型安全时，就会抛出包含\"capture of\"的错误\r\n- `i.get(0)`没有问题，可以获取其中的元素`Object o = i.get( 0 );//valid`\r\n- set方法的声明是`E set(int index, E element)`，也就是说，List的泛型必须和入参保持一致\r\n- ? 代表了任意类，而显然Object类型无法进行upcasting\r\n\r\n而对于其余两种方法，编译器可以确定`i.get(0)`的类型是i.set所需的类型（保证可以upcasting），换句话说，下面代码断的报错方式，和第一个是同一个原理\r\n```java\r\n<T> void foo(List<T> i) {\r\n    i.set(0, (Object)i.get(0));//invalid\r\n}\r\n```\r\n---\r\n### Erasure and override\r\n类型擦除与方法覆写\r\n#### Code\r\n```java\r\npublic class Node<T> {\r\n\r\n    public T data;\r\n\r\n    public Node(T data) { this.data = data; }\r\n\r\n    public void setData(T data) {\r\n        System.out.println(\"Node.setData\");\r\n        this.data = data;\r\n    }\r\n}\r\n\r\npublic class MyNode extends Node<Integer> {\r\n    public MyNode(Integer data) { super(data); }\r\n\r\n    public void setData(Integer data) {\r\n        System.out.println(\"MyNode.setData\");\r\n        super.setData(data);\r\n    }\r\n}\r\n```\r\n问题是，下列代码是怎么输出的：\r\n```java\r\nMyNode mn = new MyNode(5);\r\nNode n = mn;\r\nn.setData(\"Hello\");     \r\nInteger x = mn.data;\r\n```\r\n我们假设类型擦除能够正常运作，那么Node类中的函数签名中的泛型，都会被改成Object类型，也就是类似Node(Object data)\r\n\r\n那么MyNode中的setData，就不会override Node中的setData，因为签名不同，所以`n.setData(\"Hello\")`会正常执行，错误会在`Integer x = mn.data`这里\r\n\r\n但实际情况并不是这样，ClassCastException会在`n.setData(\"Hello\")`被执行时抛出，而不是下一句\r\n\r\n原因在于，这里起到作用的是Bridge Method。\r\n\r\n对于多态（polymorphism）的实现来说，子类如果继承泛型类的方法，那么也应该override其方法，而不应该因为类型擦除而保留一个并未定义过的签名中包含Object的原始方法\r\n\r\n这里的setData(Object data)应该被setData(Integer data) override，这样才符合多态。为了满足这点，编译器就会针对泛型类的子类生成Bridge Method\r\n\r\n```java\r\n// Bridge method generated by the compiler\r\n//\r\npublic void setData(Object data) {\r\n    setData((Integer) data);\r\n}\r\n```\r\n\r\n试想如果有了这个自动生成的方法，是不是就可以解释为什么ClassCastException会在`n.setData(\"Hello\");`中被抛出，而String类作为`n.setData`的参数，并不会产生错误\r\n\r\n总结一下，继承泛型类之后，**不用考虑类型擦除后生成的新方法会不会被override这样的问题**，因为有Bridge method，类型擦除后，生成的参数类型为Object的方法实际上会被override并转到新方法中\r\n\r\n#### Tips\r\n- Bridge Method可以被反射获取到，也可以通过反射调用，通过`method.isBridge()`可以获取一个方法是否是Bridge Mehtod\r\n- 方法泛型的目的是为了保证编译期的类型安全，并不会给运行时添加负担，也就是说，加不加泛型对于运行时影响不大（加了泛型后可能少了类型强转的字节码，其他字节码不会发生变化）\r\n- 两个字节码完全一致但使用方式不同的函数：\r\n\r\n```java\r\n<T> T foo(List<T> i) {\r\n    i.set(0, i.get(0));\r\n    return i.get( 0 );\r\n}\r\n\r\nObject foo2(List i) {\r\n    i.set(0, i.get(0));\r\n    return i.get( 0 );\r\n}\r\n```\r\n\r\n基于Java的类型擦除机制，这两个函数在运行期的字节码是完全相同的，但是\r\n```java\r\nObject o = foo(new ArrayList<String>(Arrays.asList(\"1\",\"2\")));//valid\r\nString s = foo(new ArrayList<String>(Arrays.asList(\"1\",\"2\")));//valid\r\n\r\nObject o2 = foo2(new ArrayList<String>(Arrays.asList(\"1\",\"2\")));//valid\r\nString s2 = foo2(new ArrayList<String>(Arrays.asList(\"1\",\"2\")));//invalid\r\n```\r\n最后一行会出现编译期错误，因为不符合类型安全的要求\r\n- 上面例子中`Arrays.asList(\"1\",\"2\")`的返回值是`java.util.Arrays.ArrayList`，不是`java.util.ArrayList`，要加一层构造方法包装\r\n\r\n---\r\n### Recursive Generics\r\n递归泛型\r\n#### Code\r\n```java\r\npublic abstract class Node <N extends Node<N>>  {\r\n    public final List<N> children = new ArrayList<N>();\r\n    public final N parent;\r\n\r\n    protected Node(N parent) {\r\n        this.parent = parent;\r\n        parent.children.add(this);  // error: incompatible types\r\n    }\r\n\r\n    public N getParent() {\r\n        return parent;\r\n    }\r\n    public List<N> getChildren() {\r\n        return children;\r\n    }\r\n}\r\n\r\npublic class SpecialNode extends Node<SpecialNode> {\r\n    public SpecialNode(SpecialNode parent) {\r\n        super(parent);\r\n    }\r\n}\r\n```\r\n我们的问题是，为什么会出现error\r\n\r\n首先，定义这个两个class的目的在于：定义一种类的抽象行为，即在初始化的时候把一个自身成员加进一个ArrayList的实例变量中\r\n\r\n其中，通过泛型确保加进的对象一定是子类（N extends Node<N>），这里看上去像是一种递归形式的定义从而无法处理，其实只需要考虑N extends Node就可以了，因为这是一种特殊的写法，举个例子\r\n\r\n```java\r\npublic static abstract class Node <N extends Node<N>>  {...}\r\n```\r\n是可行的，但是\r\n```java\r\npublic static abstract class Node <N extends Node<N extends<Node<N>>>>  {...}\r\n```\r\n是不可行的，尽管语义相同\r\n\r\n所以说这样递归定义的泛型，是一种特殊的表示，表示子类声明的泛型必须是子类自身\r\n\r\n如果这样还是难以理解，下面这个例子说明了`Node <N extends Node<N>>` 和 `Node <N extends Node>` 的区别\r\n\r\n对于递归泛型`<N extends Node<N>>`\r\n```java\r\nabstract class Node <N extends Node<N>>  {\r\n    ...\r\n}\r\n    \r\n//invalid\r\nclass SpecialNode extends Node<Node> {\r\n    ...\r\n}\r\n\r\n//valid\r\nclass SpecialNode extends Node<SpecialNode> {\r\n    ...\r\n}\r\n```\r\n而对于非递归泛型`<N extends Node>`\r\n```java\r\nabstract class Node <N extends Node>  {\r\n    ...\r\n}\r\n    \r\n//valid\r\nclass SpecialNode extends Node<Node> {\r\n    ...\r\n}\r\n\r\n//valid\r\nclass SpecialNode extends Node<SpecialNode> {\r\n    ...\r\n}\r\n```\r\n\r\n回到之前的问题\r\n```java\r\nparent.children.add(this);  // error: incompatible types\r\n```\r\n这里，ArrayList里存储的对象应该是N，而this所获取的并不是N，而是N的supertype，所以不能进行upcasting\r\n\r\n解决方法：\r\n- 进行类型强转`add((N)this)`\r\n- 改变ArrayList的泛型`public final List<? super Node> children = new ArrayList<>();`，并修改getChildren的返回值·`public List getChildren() {...`\r\n- 通过方法直接获取N的实例，即在抽象类中定义方法，在子类中实现\r\n\r\n```java\r\n\r\n//abstract class\r\nabstract N getThis();\r\n\r\n//subclass\r\nSpecialNode getThis(){ return this; }\r\n```\r\n\r\n---\r\n### Embedded Generic Infer\r\n泛型方法嵌套中的类型推断\r\n#### Code\r\n```java\r\nstatic <T> T[] topFn(T t1, T t2){\r\n    return subFn( t1, t2 );\r\n}\r\n\r\nstatic <T> T[] subFn(T...ts){\r\n    return ts;\r\n}\r\n\r\npublic static void main( String[] args ) {\r\n    subFn(\"Hello\",\"World\"); //valid\r\n    topFn( \"Hello\",\"World\" ); //valid\r\n\r\n    String[] results = subFn(\"Hello\",\"World\"); //valid\r\n    results = topFn( \"Hello\",\"World\" ); //invalid\r\n}\r\n```\r\n首先我们观察`subFn(\"Hello\",\"World\")`，通过类型推断，编译器把subFn中的参数替换为了String，从而返回`String[]`，这点没有问题\r\n\r\n再观察`topFn( \"Hello\",\"World\" );`，在编译器，同样地通过类型推断，我们知道该函数返回的也是`String[]`，但是对于函数内部的调用，我们无法通过类型推断去替换subFn的泛型T，从而subFn返回的是`Object[]`\r\n\r\n所以方法可以调用，但是返回值不是本来期望的，将`Object[]`强转成`String[]`会发生错误\r\n\r\n解决方法：把遍历`Object[]`强转所有元素到`String[]`即可，但这比较复杂，所以尽量避免泛型方法的嵌套\r\n#### Tips\r\n- 函数的类型推断仅仅作用在编译期，也就是说，如果一段代码必须通过执行能确定其类型，那么类型推断是无法作用的\r\n\r\n---\r\n### Java Version Matters\r\n\r\n#### Method\r\n```java\r\nstatic void handleList(List<String> list){}\r\n```\r\n#### Code\r\n```java\r\nList<String> stringList = Collections.emptyList();//valid\r\nhandleList(Collections.<String>emptyList())//valid\r\nhandleList(Collections.emptyList());//depend on Java version\r\n```\r\n在Java SE 7和Java SE 7之前，是无法从函数的参数类型进行类型推断的，必须显式指定，但Java SE8之后可以\r\n\r\n\r\n### Refs\r\n>https://stackoverflow.com/questions/1910892/what-is-the-difference-between-super-and-extends-in-java-generics\r\n\r\n>https://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java\r\n\r\n>https://www.cnblogs.com/hongdada/p/10683795.html\r\n\r\n>https://stackoverflow.com/questions/5836662/extending-from-two-classes\r\n\r\n>https://docs.oracle.com/javase/tutorial/java/generics/\r\n\r\n>http://www.angelikalanger.com/GenericsFAQ/FAQSections/ProgrammingIdioms.html#FAQ205\r\n\r\n>https://jrebel.com/rebellabs/java-generics-cheat-sheet/","frontmatter":{"abstract":"收集整理一些比较难以理解的Java泛型问题，以及详细解释其中的原理","draft":null,"title":"Java Generics Tricky Code","tags":["中文","java","generics"],"cover":"","date":"2019/10/25"}}},{"node":{"fields":{"slug":"/algorithm/big-number-multiply","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 适用于1000位以内数的乘法 思路 注意两点： 数字是通过字符串传过来的，字符串的低位反而是数字的高位，所以我们要从数字的低位开始计算的话，必须反转字符串（当然结果也要反转） 原理就是小学乘法，竖式计算，但不需要每次都计算进位，可以统一计算 解决 Tips…","timeToRead":2,"rawMarkdownBody":"### 问题\r\n适用于1000位以内数的乘法\r\n### 思路\r\n注意两点：\r\n- 数字是通过字符串传过来的，字符串的低位反而是数字的高位，所以我们要从数字的低位开始计算的话，必须反转字符串（当然结果也要反转）\r\n- 原理就是小学乘法，竖式计算，但不需要每次都计算进位，可以统一计算\r\n### 解决\r\n```java\r\n    public String multi(String a, String b){\r\n        ////反转字符串\r\n        char[] ar = reverse(a).toCharArray(), br = reverse(b).toCharArray();\r\n\r\n        int res[] = new int[1000];\r\n        int max = ar.length + br.length-1;//m位数乘n位数，结果至少是m+n-1位\r\n\r\n        for (int i = 0; i <max; i++) {\r\n            for (int j = 0;  i < ar.length && j < br.length; j++) {\r\n                res[i + j] += (ar[i] - 48)*(br[j] - 48);\r\n            }\r\n\r\n            if (res[i] >= 10) {\r\n                res[i+1] += res[i]/10;\r\n                res[i] %= 10;\r\n                max= Math.max(max, i+2);//结果最多是m+n位，+2是因为i是从0开始的下标，m是从1开始的位数\r\n            }\r\n        }\r\n\r\n        \r\n        StringBuilder ans = new StringBuilder();\r\n        for (int i = 0;i<max; i++) {\r\n            ans.append((char)(res[i]+48));\r\n        }\r\n\r\n        //反转结果\r\n        return ans.reverse().toString();\r\n    }\r\n\r\n    public String reverse(String s){\r\n        return new StringBuilder(s).reverse().toString();\r\n    }\r\n```\r\n### Tips\r\n- 如果追求算法简单易懂，这样是可行的，但是追求速度的话，可以使用[karatsuba](https://en.wikipedia.org/wiki/Karatsuba_algorithm)乘法，\r\n时间复杂度在n^log3级别，原理是分治，时间复杂度可以用[Master Theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)证明\r\n- karatsuba算法并不是最快的，但是是时间复杂度小于平方复杂度中的算法里相对简单的一种\r\n\r\n### Ref\r\nhttps://oi-wiki.org/math/bignum/","frontmatter":{"abstract":"大数乘法","draft":null,"title":"Big Number Multiply","tags":["中文","algorithm","math","string"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/linked-list-cycle","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 判断链表中是否有环，如果有，找出链表中环的起始节点 解决 首先找出环的话可以用快慢节点法，快节点的速度是2，慢节点是1\n因为两个节点进入环后，快节点会以2-1=…","timeToRead":1,"rawMarkdownBody":"### 问题\r\n判断链表中是否有环，如果有，找出链表中环的起始节点\r\n### 解决\r\n首先找出环的话可以用快慢节点法，快节点的速度是2，慢节点是1\r\n因为两个节点进入环后，快节点会以2-1=1的速度接近慢节点，所以如果有环的话，两节点一定会相遇，否则快节点会先到链尾\r\n\r\n接下来就是寻找环的起始节点，根据下图我们有：\r\n\r\n\r\n![示意图](https://upload-images.jianshu.io/upload_images/4655525-19cd8e81305a6a4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n```math\r\n2(t+x)=t+x+n(x+y)\r\nt=(n-1)(x+y)+y\r\n```\r\nx+y就是环的长度，换句话说，t就是环长的整数倍+y，那么我们在快慢节点相遇后，再设置一个慢节点到链头，他们第一次相遇的时候，一定在t处，也就是环节点了\r\n\r\n### Tips\r\n- 结论非常好记，就两个，首先快慢节点判断环，第二相遇后加一个慢节点判断环起始位置，证明也只是用代数式推一下而已，可以只记结论\r\n- 算环长的话，知道环的起始位置，自然而然也就知道环的长度了（再加个不动点）","frontmatter":{"abstract":"判断链表中是否有环，如果有，找出链表中环的起始节点","draft":null,"title":"Linked List Cycle","tags":["中文","algorithm","linkedlist"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/find-integer-x-y-for-ax-by-c","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 求线性同余方程ax+by=c的整数解 思路 首先介绍下欧几里得算法的原理，众所周知，欧几里得算法是辗转相除法，这里给出证明： 假设a>b，证明 gcd(a,b) = gcd(a mod b,b)\n设a=bk+c，c=a mod b\n如果D=gcd(b,c)>gcd(a,b…","timeToRead":3,"rawMarkdownBody":"### 问题\r\n- 求线性同余方程ax+by=c的整数解\r\n\r\n### 思路\r\n首先介绍下欧几里得算法的原理，众所周知，欧几里得算法是辗转相除法，这里给出证明：\r\n\r\n假设a>b，证明 gcd(a,b) = gcd(a mod b,b)\r\n设a=bk+c，c=a mod b\r\n如果D=gcd(b,c)>gcd(a,b)，则等式 a=bk+c 右边除以D是整数，但左边除以D不是整数\r\n如果gcd(b,c)<gcd(a,b)=D，则等式 c=a-bk 右边除以D是整数，但左边除以D不是整数\r\n可见均矛盾，故gcd(b,c)=gcd(a,b)\r\n\r\n拓展欧几里得算法也是基于这个递推式，根据[裴蜀定理](https://zh.wikipedia.org/wiki/%E8%B2%9D%E7%A5%96%E7%AD%89%E5%BC%8F)，线性同余方程ax+by=c有整数解的充要条件是c|gcd(a,b)，那么我们设a>=b，有\r\n- ax1+bx2=1\r\n- 根据 gcd(a,b)=gcd(b,a mod b)=1，我们有\r\n- bx2 + (a mod b)y2=1\r\n- 若t = a/b，有\r\n- bx2 + (a mod b + bt -bt)y2 = 1\r\n化简得 ay2 + b(x2-ty2) = 1\r\n因为a mod b<b，故问题的规模可以逐步化简直至b=1，此时取一个解：xn=0, yn=1（这里也可以看出，方程有无穷多解），逐步递归即可得到答案\r\n\r\n### 解决\r\n```java\r\n    public int[] extended(int a, int b, int c){//ax+by=c\r\n        if (a<b){a^=b;b^=a;a^=b;}\r\n        return extended(a/c,b/c);\r\n    }\r\n\r\n    public int[] extended(int a, int b){\r\n        if(b==1) return new int[]{0,1};//写成b==0 return 1,0一个道理，但为什么要多一步呢？\r\n        int[] next = extended(b,a%b);\r\n        return new int[]{next[1],next[0]-a/b*next[1]};\r\n    }\r\n```\r\n\r\n\r\n\r\n### Tips\r\n- 注意裴蜀定理中c|gcd(a,b)是充要条件，也就是说如果不符合则无解，这里为了方便不考虑这种情况，另外也不考虑a=b=c=0这种特殊情况\r\n- gcd(a,b) * lcm(a,b) = a*b的证明：https://oi-wiki.org/math/gcd/#_5\r\n- ax+by=1和ax≡1(mod b)完全等价，故可以用拓展欧几里得算法来求逆元，当然求逆元也有其他方式，比如线性时间复杂度中求a以内所有数的逆元，这里不展开了\r\n- 如果不想让x或者y出现负数，可以使 x = (x+b)%b 或者 y=(y+a)%a","frontmatter":{"abstract":"求线性同余方程ax+by=c的整数解","draft":null,"title":"Find integer x,y for ax + by = c","tags":["中文","algorithm","math"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/python-implementation-of-koch-snowflake","date":"2019-10-22T04:00:00.000Z"},"excerpt":"Koch Curve（Koch Snowflake）\nhttps://www.geeksforgeeks.org/koch-curve-koch-snowflake/ 简介： 科赫雪花（科赫曲线）是最早发现的分形曲线之一，由瑞典科学家 Helge von Koch…","timeToRead":2,"rawMarkdownBody":"\r\nKoch Curve（Koch Snowflake）\r\nhttps://www.geeksforgeeks.org/koch-curve-koch-snowflake/\r\n\r\n简介：\r\n\r\n科赫雪花（科赫曲线）是最早发现的分形曲线之一，由瑞典科学家 Helge von Koch 在论文中构造\r\n\r\n科赫雪花的面积趋向于原始三角形的8/5，而周长趋向无穷大\r\n\r\n构造过程：\r\n![原始三角形](https://upload-images.jianshu.io/upload_images/4655525-fa7ff5bfa8c31b5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![每边三等分](https://upload-images.jianshu.io/upload_images/4655525-bbfd2700cd044189.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![在三等分点上构建新三角形](https://upload-images.jianshu.io/upload_images/4655525-585fec07c975ed8f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![继续每边三等分](https://upload-images.jianshu.io/upload_images/4655525-ae33f0df8c2cc33f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![继续在三等分点上构建新三角形](https://upload-images.jianshu.io/upload_images/4655525-f71b14b6d0c3d558.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n...\r\n\r\n科赫雪花可一通过下列规则描述\r\n[rewrite system](https://en.wikipedia.org/wiki/Rewriting) ([Lindenmayer system](https://en.wikipedia.org/wiki/Lindenmayer_system)):\r\n**Alphabet** : F\r\n**Constants** : +, ?\r\n**Axiom **: F\r\n**Production rules**: F ? F+F–F+F\r\n\r\n程序实现\r\n\r\n思路1：\r\n首先我们把三条边分开处理\r\n考虑深度为0的情况，显然这条边是一条直线\r\n考虑深度为1的情况，轨迹如下：\r\n![](https://upload-images.jianshu.io/upload_images/4655525-42aa402d6f6b91e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n我们把这个轨迹抽象为“前进”方法，我们就有变成了深度为1的前进方法 = 深度为0的前进方法 x4 \r\n同理我们发现，深度为2的前进方法 = 深度为1的前进方法 x4\r\n观察到问题的复杂度在不断降低，可以使用递归来处理这样的规律\r\n\r\n```python\r\nfrom turtle import *\r\ndef snowflake(lengthSide, levels): \r\n    if levels == 0: \r\n        forward(lengthSide) \r\n        return\r\n    lengthSide /= 3.0\r\n    snowflake(lengthSide, levels-1) \r\n    left(60) \r\n    snowflake(lengthSide, levels-1) \r\n    right(120) \r\n    snowflake(lengthSide, levels-1) \r\n    left(60) \r\n    snowflake(lengthSide, levels-1) \r\n\r\n# main function \r\nif __name__ == \"__main__\": \r\n    speed(0)                    \r\n    length = 300.0          \r\n\r\n    #分别处理三条边\r\n    for i in range(3):     \r\n        snowflake(length, 4) \r\n        right(120) \r\n    exitonclick()     \r\n```\r\n\r\n\r\n思路2\r\n把第0层画的线用0表示，第1层用1表示，那么根据画笔的轨迹我们有\r\n第0层（三角形） 000\r\n第1层                   011001100110\r\n第2层                   022012211221022002201221122102200220122112210220\r\n![第1层，其余类似](https://upload-images.jianshu.io/upload_images/4655525-79786a92980284e0.gif?imageMogr2/auto-orient/strip)\r\n\r\n显然，把上一层的节点复制一遍，中间插入两个当前层次的节点即可。连续相同节点逆时针转120度，非连续相同节点逆时针转60度\r\n```python\r\nfrom turtle import *\r\ndef draw(len,target):\r\n    tasks=\"000\"\r\n    step,depth = len/(3**target),0\r\n    while depth<target:\r\n        depth+=1\r\n        tasks = ''.join([s+str(depth)*2+s for s in tasks])\r\n    pre=''\r\n    for task in tasks:\r\n        if pre==task:\r\n            right(120)\r\n        else:\r\n            left(60)\r\n        forward(step)\r\n        pre = task\r\n\r\nlength = 300.0\r\ndraw(length,3)\r\n```","frontmatter":{"abstract":"Koch Curve（Koch Snowflake）","draft":null,"title":"Python Implementation of Koch Snowflake","tags":["中文","algorithm","python"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/swim-in-rising-water","date":"2019-10-22T04:00:00.000Z"},"excerpt":"Swim in Rising Water 问题 假设方阵中每个点都标有权值，问题是求方阵中两点之间的路径中所有点权值最大值的最小值 比如2x2矩阵一共有两条路径，第一条路径中两个点权值是1,3,2最大值为3，第二条路径中两个点权值1,2,2是最大值为2，那么结果就是…","timeToRead":2,"rawMarkdownBody":"[Swim in Rising Water](https://leetcode.com/articles/swim-in-rising-water/)\r\n### 问题\r\n假设方阵中每个点都标有权值，问题是求方阵中两点之间的路径中所有点权值最大值的最小值\r\n\r\n比如2x2矩阵一共有两条路径，第一条路径中两个点权值是1,3,2最大值为3，第二条路径中两个点权值1,2,2是最大值为2，那么结果就是2\r\n\r\n### 解决\r\n- 想到用dp去解决这个问题，但是路径的选择其实是不具备dp条件的，即出了不能重复外，可以随便选择方向\r\n- 思考路径的选择方法，发现可以在经过的路径的所有相邻点中，选择深度差最小的下一步，也就是使用一种类似贪心的方法\r\n- 数据结构上，我们使用优先队列和集合，优先队列用于寻找贪心的下一个点，集合用于判断下一个点是否经过（其实也可以用布尔数组）\r\n- 另一个方法思路很简单，就是二分猜测+DFS验证，时间复杂度也在O(N^2logN)这个数量级上\r\n\r\n### Tips\r\n- 凡是答案是在给定的数组之内选择的，都可以尝试排序加二分的思路","frontmatter":{"abstract":"假设方阵中每个点都标有权值，问题是求方阵中两点之间的路径中所有点权值最大值的最小值","draft":null,"title":"Swim in Rising Water","tags":["中文","algorithm","greedy"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/regular-expression-for-multiple-of-3","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 使用正则判断n能否被3整除 思路 根据整除性构建DFA（确定有限自动状态机），再根据DFA构建正则（Kleen算法） 解决 我们从高位读取字符串，并将余数作为状态，有如下状态转移表：\nX |'0''1'\n0 | 0  1\n1 | 2  0\n2 | 1  2\n（X…","timeToRead":2,"rawMarkdownBody":"\r\n### 问题\r\n使用正则判断n能否被3整除\r\n### 思路\r\n根据整除性构建DFA（确定有限自动状态机），再根据DFA构建正则（[Kleen算法](https://en.wikipedia.org/wiki/Kleene%27s_algorithm)）\r\n### 解决\r\n我们从高位读取字符串，并将余数作为状态，有如下状态转移表：\r\nX |'0''1'\r\n0 | 0  1\r\n1 | 2  0\r\n2 | 1  2\r\n（X表示 状态\\当前字符）\r\n比如说状态是2，说明当前数字除3余2，那么当前字符是'0'时，余数自然是1，应该转移到1状态\r\n\r\nDFA如下：\r\n![DFA](https://upload-images.jianshu.io/upload_images/4655525-0c49a4eac221f80f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n初始状态是0，我们只要判断终结状态是否为0即可\r\n观察图中的一个自环和一个0-1-2-1-0的大环，我们可以写出两种正则\r\n`0*`\r\n`1(01*0)*1`\r\n故得到  `(0 | 1(01*0)*1)*`\r\n\r\n### 代码\r\n```javascript\r\nfor(var i=1;i<100;i++)\r\n if(!/^(0|1(01*0)*1)*$/.test(Number(3*i).toString(2))) console.log(i)//undefined\r\n```\r\n\r\n### Tips\r\n- 符合要求的正则不止一个，但是上述正则应该是最简单的之一\r\n- 按照相应算法，可以获得任意数字的整除性判断正则\r\n\r\n### Ref\r\n>https://en.wikipedia.org/wiki/Kleene%27s_algorithm\r\n>https://zhidao.baidu.com/question/1383837207982172220.html\r\n>Algorithm 4th P518","frontmatter":{"abstract":"使用正则判断n能否被3整除","draft":null,"title":"Regular Expression For Multiple of 3","tags":["中文","algorithm","regular-expression","DFA"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/combinations-and-permutations","date":"2019-10-20T04:00:00.000Z"},"excerpt":"问题 排列（Permutation）：求1,2,3...n的不同排列方式（n!） 思路 普通的排列问题，在python…","timeToRead":5,"rawMarkdownBody":"### 问题\r\n排列（Permutation）：求1,2,3...n的不同排列方式（n!）\r\n### 思路\r\n普通的排列问题，在python库中甚至有现成的库可以用来解决，我们这里考虑两种方案，首先是回溯的思路（递归）：\r\n基于交换元素的回溯实现较为简单，每一次交换循环位置的元素和首元素，直到循环位置抵达末尾，交换完毕后回溯\r\n\r\n可能为什么要用交换来求排列看上去比较难理解，那么考虑用最原始的方式，即选择任意元素作为第一个元素，再选择除第一个元素以外的任意一个作为第二个元素。。。\r\n\r\n如果我们要记录所选元素是否被选择过，需要使用一个布尔数组，但其实我们可以直接把选择过的元素放在当前位置上，然后只记录起始位置\r\n\r\n选择其他元素之前，把这个元素放回来就行了（如果使用布尔数组记录，其实也需要这个回溯过程）\r\n\r\n其次是非递归的实现，首先给出一个基于递归栈的实现\r\n\r\n思路是通过用栈模拟交换，记录需要交换的元素位置，并把下一轮需要交换的元素以及数组的拷贝放进栈中\r\n\r\n另一种非递归实现的思路是基于n!的计算，时间复杂度为O(n!)，不过比上面的非递归要快一点\r\n\r\n既然一共有n!个排列，那么n的排列相当于n-1的所有排列*n，得到n-1的所有排列后，其实只需在每种排列上加上1-n就行了\r\n\r\n\r\n### 解决\r\n```python\r\n# 递归\r\ndef rec(a, l, r):\r\n    if l==r:\r\n        print(*a)\r\n        return\r\n    for i in range(l, r+1):#注意这里下限是l，虽然把自己跟自己交换是一种重复，但这也是需要计算在内的\r\n        a[i], a[l] = a[l], a[i]\r\n        rec(a,l+1,r)\r\n        a[i], a[l] = a[l], a[i]\r\nrec([i+1 for i in range(n)], 0, n-1)\r\n```\r\n\r\n```python\r\n# 非递归  - 1\r\ndef non_rec(a):\r\n    n = len(a)\r\n    result, r = [], [[a,-1,-1]]\r\n    while len(r)>0:\r\n        ra, ri, rt = r.pop()\r\n        ra[ri], ra[rt] = ra[rt], ra[ri]\r\n        if ri==n-1:\r\n            result.append(ra)\r\n        for nrt in range(ri+1,n):\r\n            r.append([ra[:],ri+1,nrt])\r\n    return result\r\n```\r\n\r\n```python\r\n# 非递归 - 2\r\ndef non_rec(a):\r\n    n = len(a)\r\n    result, t, steps = [], 1, [[a[0]]]\r\n    while t < n:\r\n        cur = []\r\n        for step in steps:\r\n            for i in range(t+1):\r\n                newStep = step[:]\r\n                newStep.insert(i,a[t])\r\n                cur.append(newStep)\r\n        steps = cur\r\n        t+=1\r\n        if t==n:\r\n            result = steps\r\n    return result\r\n```\r\n\r\n### 问题\r\n组合（Combination）：求1-n中取出x个数字的方式（C(n,x)）\r\n### 思路\r\n同样考虑两种方式，首先是递归，记录当前位置和递归深度即可，递归深度为x即取数完毕\r\n\r\n第二是非递归，这里运用了一点bit magic，大概意思是根据x二进制中最大递增后缀序列求出下一个排列，具体可以参见[这篇文章](http://blog.gaurav.im/2016/12/18/next-binary-permutation-bitwise-hackery/)\r\n\r\n### 解决\r\n```python\r\n# 递归\r\ndef comb(n,x,cur,start,depth,arr):\r\n    if depth==x:\r\n        arr.append(cur)\r\n        return\r\n    for next in range(start,n-x+depth+1):\r\n        comb(n,x,cur+str(next),next+1,depth+1,arr)\r\ncomb(n,x,'',0,0,arr) # 01 02 03 04 12 13 14 23 24 34，这里下标是0开始的，不影响效果\r\n```\r\n```python\r\n# 非递归\r\nn, x = 5, 3\r\nstart, end = (1 << c)-1, (1 << n) - (1 << (n-x)) # 这里start和end就是二进制中x个1在最开始和最末尾的数\r\nv = start\r\nwhile v <= end:\r\n    # 这里结果所对应的二进制位为1的下标就是具体的组合\r\n    print(bin(v)[2:].rjust(n, '0'))\r\n    # 下面两行是求next permutation的位运算方法，具体解释可以参考引用的两篇资料\r\n    t = (v | (v - 1)) + 1 \r\n    w = t | ((int((t & -t) / (v & -v)) >> 1) - 1)\r\n    v = w\r\n```\r\n\r\n### Ref\r\nhttps://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/\r\nhttp://blog.gaurav.im/2016/12/18/next-binary-permutation-bitwise-hackery/\r\nhttps://graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation\r\n\r\n### Tips\r\n- x & -x是求x的二进制中最右边的1所对应位置的二进制数，比如x=01100100，x&-x=00000100，x为奇数这个值就一定是1\r\n- x | x-1是将x的二进制中所有后继0置1，比如x=01100100，x&-x=01100111，同样x为奇数这个值就是本身","frontmatter":{"abstract":"排列和组合","draft":null,"title":"Combinations and Permutations","tags":["中文","algorithm","combination","permutation","bitwise"],"cover":"","date":"2019/10/20"}}},{"node":{"fields":{"slug":"/algorithm/reaching-points","date":"2019-10-20T04:00:00.000Z"},"excerpt":"Reaching Points 问题 如果给出一个点 (x,y)，可以选择下一个点的坐标 (x+y,y)，或者(x,x+y)，那么，给出一个起点 (sx,sy)，和终点(tx,ty)，能否通过这样的变化，从起点到达终点 解决方案 选择最快的解决方案：这里看上去是个正向dp…","timeToRead":1,"rawMarkdownBody":"\r\n[Reaching Points](https://leetcode.com/articles/reaching-points/)\r\n\r\n### 问题\r\n如果给出一个点 (x,y)，可以选择下一个点的坐标 (x+y,y)，或者(x,x+y)，那么，给出一个起点 (sx,sy)，和终点(tx,ty)，能否通过这样的变化，从起点到达终点\r\n\r\n### 解决方案\r\n- 选择最快的解决方案：这里看上去是个正向dp问题，其实不然，因为每一步的结果都要依赖于上一步的结果，所以dp问题会归结到时间复杂度O(tx*ty)的递归，显然是不可取的\r\n- 这里我们采取倒推的方式，因为显然，如果当前步骤的结果是(x,y)(x>y)，那么上一步的结果一定是(x-y,y)，这样的话，我们可以进一步简化，即(x%y+ny,y)都是倒推获得的范围，这样的话时间复杂度就被降低到了对数级别，问题也就迎刃而解了\r\n- 总结一下，这其实是一种逆向dp的思路","frontmatter":{"abstract":"如果给出一个点 (x,y)，可以选择下一个点的坐标 (x+y,y)，或者(x,x+y)，那么，给出一个起点 (sx,sy)，和终点(tx,ty)，能否通过这样的变化，从起点到达终点","draft":null,"title":"Reaching Points","tags":["中文","algorithm","dynamic-programming"],"cover":"","date":"2019/10/20"}}},{"node":{"fields":{"slug":"/algorithm/max-chunks-to-make-sorted-ii","date":"2019-10-05T04:00:00.000Z"},"excerpt":"Max Chunks To Make Sorted II 问题 给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的 解决 思路 1：多次遍历 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N…","timeToRead":2,"rawMarkdownBody":"\r\n[Max Chunks To Make Sorted II](https://leetcode.com/problems/max-chunks-to-make-sorted-ii/description/)\r\n### 问题\r\n给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的\r\n\r\n### 解决\r\n- 思路 1：多次遍历\r\n- 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N)内，想到第二段（如果有的话），一定是在第一段的基础上进行判断的，这里可以构造一个排序数组\r\n- 例如 [1,1,0,0,1]，我们可以构造为[2,3,0,1,4]，也就是用0 - length-1 的序号来表示这个数组，相同的元素按前后位置分配序号，这样问题就可以简化为一次遍历，对比下标\r\n- 其实这里可以简化一点空间复杂度（也在O(N)范围内），我这里只是为了方便书写\r\n```\r\nclass Solution {\r\n    public int maxChunksToSorted(int[] arr) {\r\n        if(arr.length<2)return arr.length;\r\n        \r\n        int max = Integer.MIN_VALUE,count = 0;\r\n        \r\n        //get index array like [1,2,3] or [5,2,2,3,1]\r\n        int[] sorted = arr.clone();\r\n        \r\n        int[] newArr = new int[arr.length];\r\n        \r\n        Arrays.sort(sorted);\r\n        \r\n        int pre = -1;\r\n        for(int i=0;i<sorted.length;i++){\r\n            for(int j=0;j<arr.length;j++)\r\n                if(arr[j]==sorted[i] && (i==0 || sorted[i]!=sorted[i-1] || pre<j)){\r\n                    newArr[j] = i;\r\n                    pre = j;\r\n                    break;\r\n                }\r\n        }\r\n        \r\n        for(int i=0;i<arr.length;i++){\r\n            max = Math.max(max,newArr[i]);\r\n            if(max==i){\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        return count;\r\n    }\r\n}\r\n```\r\n\r\n- 思路 2：[栈](https://leetcode.com/problems/max-chunks-to-make-sorted-ii/discuss/398135/Precise-Python-Stack-7-lines-solution-with-explanation)\r\n简单来说，就是贪心记录每一个chunk，最后返回这个chunk数组的长度\r\n```python\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: List[int]) -> int:\r\n        stack = [] # store a list of biggest element of each chunk\r\n        for n in arr:\r\n            m = n # the biggest element from beginning to n\r\n            while len(stack)>0 and stack[-1]>n:\r\n                m = max(m, stack.pop())\r\n            stack.append(m)  # all element bigger than n was poped out of stack, so this is the biggest element\r\n        return len(stack) # length of the chunks array\r\n```\r\n","frontmatter":{"abstract":"给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的","draft":null,"title":"Max Chunks To Make Sorted II","tags":["中文","algorithm","array"],"cover":"","date":"2019/10/5"}}},{"node":{"fields":{"slug":"/algorithm/regular-expression-matching","date":"2019-10-05T04:00:00.000Z"},"excerpt":"Regular Expression Matching 问题 用包含*和.这两个正则符号的正则表达式来匹配字符串 解决 思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC…","timeToRead":2,"rawMarkdownBody":"\r\n[Regular Expression Matching](https://leetcode.com/articles/regular-expression-matching/)\r\n\r\n### 问题\r\n用包含*和.这两个正则符号的正则表达式来匹配字符串\r\n\r\n### 解决\r\n- 思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC掉的，只是考虑到大部分情况下栈深的问题\r\n\r\n这里就是非贪心的匹配方式，代码量很少，每次只匹配开头的字符，剩余结果由回溯过程得到\r\n```\r\nclass Solution {\r\n    public boolean isMatch(String text, String pattern) {\r\n        if (pattern.isEmpty()) return text.isEmpty();\r\n        boolean first_match = (!text.isEmpty() && \r\n                               (pattern.charAt(0) == text.charAt(0) || pattern.charAt(0) == '.'));\r\n        \r\n        if (pattern.length() >= 2 && pattern.charAt(1) == '*'){\r\n            return (isMatch(text, pattern.substring(2)) ||  //这里的 || 代表回溯过程\r\n                    (first_match && isMatch(text.substring(1), pattern)));\r\n        } else {\r\n            return first_match && isMatch(text.substring(1), pattern.substring(1));\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n- 思路：反向dp，这里我们如果用dp的思想，那么dp[i][j]表示的是text[i:]和pattern[j:]是否匹配，求的其实是dp[0][0]，所以是一种反向的dp，题目中无论是自底向上的方法还是从顶往下的方法，其计算顺序其实都是反向的（最后得到的结果都是dp[0][0]），这里自底向上的方法中，Result枚举的意义其实只是封装了一个布尔值，相当于一个布尔封装类型的数组\r\n\r\n### Tips\r\n- str.substring(n) 可以理解成去掉字符串前 n 个字母\r\n- wildcard 是通配符的意思，不止在正则表达式中有通配符，很多地方比如地址匹配，java中泛型中都有通配符","frontmatter":{"abstract":"Regular Expression Matching using * or .","draft":null,"title":"Regular Expression Matching","tags":["中文","algorithm","string"],"cover":"","date":"2019/10/5"}}},{"node":{"fields":{"slug":"/Java/java-multi-thread-synchronize","date":"2019-10-04T04:00:00.000Z"},"excerpt":"…","timeToRead":4,"rawMarkdownBody":"\r\n### 线程安全相关问题\r\n\r\n- 如何定义一个对象是否是线程安全的\r\n> 当多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替运行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获取正确的结果，那这个对象是线程安全的\r\n\r\n- 线程安全问题的主要原因是\r\n>主内存和工作内存数据不一致，重排序（为了性能优化，一般包括编译器指令重排序和处理器指令重排序）导致竞态条件下的程序执行不确定性\r\n\r\n### synchronized\r\n- synchronized的应用方式主要有修饰实例方法，修饰静态方法，修饰代码块\r\n- 修饰实例方法\r\n\r\n>对实例方法的修饰，同步锁加在当前实例对象上，当一个线程访问改实例的synchronized方法时，其他线程不能访问该方法\r\n\r\n>同步锁和实例对象一一对应，如果是一个线程 A 需要访问实例对象 obj1 的 synchronized 方法 f1(当前对象锁是obj1)，另一个线程 B 需要访问实例对象 obj2 的 synchronized 方法 f2(当前对象锁是obj2)，是可以同时访问同一个方法的，因为两个实例对象锁并不同相同\r\n\r\n- 修饰静态方法\r\n>对静态方法的修饰，同步锁加在当前类的class对象上（并非实例对象），所以不同的线程可以同时访问同一实例的同步静态方法和同步实例方法\r\n\r\n- 修饰代码块\r\n>实例对象锁：synchronized(this){...}\r\n>class对象锁：synchronized(XXX.class){...}\r\n\r\n- synchronized的可重入性\r\n在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁，是允许的，这就是synchronized的可重入性\r\n\r\n- synchronized与等待唤醒机制（wait, notify）\r\n>调用等待唤醒机制相关方法时，必须获得当前对象的monitor对象，而只有synchronized关键字才能获取到monitor对象，所以只有在同步方法块中才能调用wait, notify方法\r\n```java\r\nsynchronized (obj) {\r\n       obj.wait();\r\n       obj.notify();\r\n       obj.notifyAll();         \r\n }\r\n```\r\n>wait和sleep的对比：sleep方法并不会让当前线程释放锁，但是wait会命令当前线程在执行完同步代码段后释放持有的锁\r\n\r\n- Java对象在内存中的布局\r\n\r\n名称 | 内容\r\n---|---\r\n对象头 | 具体如下\r\n实例变量 | 实例所属类的属性，数组长度等信息\r\n填充数据 | 保持字节对齐而填充的数据（因对象的起始地址必须是8字节整数倍）\r\n\r\n- Java对象头\r\n> JVM使用2个字节来存储该信息，如果是数组对象，会有1个额外的字节存储数组长度\r\n\r\n名称 | 内容\r\n---|---\r\nMark Word | 存储对象的hashCode、锁信息或分代年龄或GC标志等信息\r\nClass Metadata Address | 类型指针指向对象的类元数据，JVM通过这个指针确定该对象是哪个类的实例\r\n\r\n### Tips\r\n- 线程随机竞争同一资源时，如果对访问顺序敏感，那么此时存在静态条件\r\n- \r\n### ref\r\nhttps://www.jianshu.com/p/d52fea0d6ba5\r\n","frontmatter":{"abstract":"","draft":null,"title":"Java Multi Thread Synchronize","tags":["中文","Java","multi thread","synchronize"],"cover":"","date":"2019/10/4"}}},{"node":{"fields":{"slug":"/Java/java-multi-thread-basic","date":"2019-07-07T04:00:00.000Z"},"excerpt":"JMM（Java内存模型） Java内存模型是一种逻辑模型，是一组预定规范，定义了每个变量的访问方式，简要运行方式如下 Java内存区域，描述了Java内存的物理分布 Java内存区域 JMM分为主内存和工作内存（栈空间），JVM会为每一个线程分配一个工作内存，Java…","timeToRead":7,"rawMarkdownBody":"### JMM（Java内存模型）\r\n- Java内存模型是一种逻辑模型，是一组预定规范，定义了每个变量的访问方式，简要运行方式如下\r\n- Java内存区域，描述了Java内存的物理分布\r\n>![Java内存区域](https://upload-images.jianshu.io/upload_images/4655525-b77986e96850367e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n>JMM分为主内存和工作内存（栈空间），JVM会为每一个线程分配一个工作内存，Java中所有的实例对象都存在主存中，主存对所有线程共享，但线程不能直接操作主存，只能先进行拷贝，操作完毕后再存进主存中。工作内存是私有的，存有主存数据的副本，线程间的通信必须通过主存来进行\r\n\r\n### JMM的数据存储\r\n方法中的基本数据类型存储在工作内存的栈帧中，对象实例的引用也存储在栈帧中，但值存在主存中，除此之外，例如成员变量，静态变量等都存在主存中\r\n\r\n### JMM保证线程安全的三个特性\r\n- 原子性：指不可中断的操作，理论上对于32位操作系统来说，long和double数据的读取是非原子操作\r\n\r\n- 可见性：一个线程间共享的变量可见，指当一个线程修改了该共享变量的值，其他线程是否能立刻获取到这一次的修改。对于单线程来说，这个问题是不存在的，而对于多线程来说，如果存在工作内存和主存的同步延迟，就会出现一个线程修改变量之后，另一个线程仍然读取修改前主存中的变量值\r\n\r\n- 有序性：对于多线程，编译成机器码后会出现指令重排的现象，对于一个线程来说，每条指令的执行顺序是固定的，但对于多个线程来说，指令的执行顺序是不固定的\r\n### JMM提供的线程安全解决方案\r\n- 对数据的原子性操作，可以使用java.util.concurrent.atomic.*这个包，对代码块的原子性操作，可以使用synchronized关键字或者重入锁(ReentrantLock)\r\n\r\n- happens-before原则\r\n>一套辅助规则保证程序执行的原子性，可见性和有序性\r\n- 同一线程中，代码一定按顺序执行\r\n- 同一个锁，先进行解锁才能加锁（也就是说加锁和解锁一定是轮流执行）\r\n- 对于volatile变量，强制从主存中读取，并且在改变后强制刷新到主存\r\n- 线程启动规则：线程的start()方法先于它的每一个动作\r\n- 线程终止规则：线程的终止在所有动作之后（例如线程A中执行了线程B.join()，那么B中所有的对共享变量的操作结果，都能在B.join()结束后被A读取到）\r\n- 线程中断规则：interrupt()方法先执行，Thread.interrupted()再返回true\r\n- 对象终结规则：对象的构造函数先于finalize()方法（但一般不会Override finalize()方法）\r\n\r\n### 新建线程的三种方式\r\n\r\n- 继承Thread类\r\n- 实现Runnable接口（lambda，匿名内部类等）\r\n- 实现Callable接口\r\n\r\n### 线程状态\r\n\r\n名称 | 状态\r\n---|---\r\nNEW | 构建完毕，但是没有start()\r\nRUNNABLE | 运行中，包括就绪和运行状态\r\nBLOCKED | 线程阻塞，被锁住\r\nWAITING | 线程进入等待状态，需要其他线程通知或中断\r\nTIME_WAITING | 超时等待，可以在指定时间自行改变\r\nTERMINATED | 线程终止，已执行完毕\r\n\r\n### 线程操作\r\n- interrupt 不改变线程的状态情况下实现线程间的交互，可以用于线程结束时清理资源\r\n- join 将另一个线程加入当前线程，同步执行\r\n- sleep 让线程按指定时间休眠，注意和Object.wait()的比较\r\n- yield 让当前线程让出cpu，注意与sleep比较\r\n\r\n#### interrupt机制\r\n当调用thread.interrupt()时\r\n1. 线程在sleep, wait, join, 方法会被唤醒，并且需要对interruptedException进行处理\r\n2. 线程运行（RUNNABLE）中，会设置interrupt标志位，可通过isInterrupted()进行查看并进行处理\r\n\r\n### 守护线程\r\n例如GC，JIT线程就属于守护线程，可以通过setDaemon设置，当虚拟机只有守护线程时，线程会执行退出\r\n\r\n### Tips\r\n- yield VS sleep \r\n1. yield只是使当前线程让出cpu，不一定会切换到其他线程\r\n2. yield让出cpu后，只有与当前线程具有相同优先级的线程有竞争权，而sleep交出的时间片，其他线程都可以竞争\r\n- 编译器重排和处理器指令重排：\r\n1. 简单地说，比如线程A有指令A1,A2,A3，线程B有指令B1,B2,B3，A1A2A3B1B2B3，A1B1B2B3A2A3等等都是可能出现的指令顺序\r\n2. 赋值语句的重排属于编译器重排，而机器码指令的重排数据处理器重排\r\n### ref\r\nhttps://www.jianshu.com/p/f65ea68a4a7f\r\nhttps://blog.csdn.net/javazejian/article/details/72772461\r\nhttps://blog.csdn.net/javazejian/article/details/72828483","frontmatter":{"abstract":"","draft":null,"title":"Java Multi Thread Basic","tags":["中文","Java","multi thread","basic"],"cover":"","date":"2019/7/7"}}},{"node":{"fields":{"slug":"/Java/java-multi-thread-utils","date":"2019-07-07T04:00:00.000Z"},"excerpt":"notify wait wait()、notify()和notifyAll()是Object类中的native final方法（除重载），这两个方法是为了解决多线程环境下的竞态环境，必须在同步方法块内调用 notify,notifyAll…","timeToRead":16,"rawMarkdownBody":"### notify wait\r\nwait()、notify()和notifyAll()是Object类中的native final方法（除重载），这两个方法是为了解决多线程环境下的竞态环境，必须在同步方法块内调用\r\n\r\n- notify,notifyAll 唤起其他等待锁的线程，但并不会立刻切换到其他线程，而是等到执行完同步代码块之后再进行切换，使用notify会唤起最先等待的线程，notifyAll会唤起所有等待的线程\r\n\r\n- wait 使当前线程阻塞，释放所持有的锁（不必等到同步代码块结束）\r\n\r\n- 不建议直接使用notify wait进行多线程编程\r\n\r\n模拟使用notify的场景：两个线程竞争同一资源\r\n```java\r\n\r\n//two threads competing for one resource\r\npublic class CompetingThread {\r\n    Thread[] threads;\r\n\r\n    CompetingThread(Thread[] threads){\r\n        this.threads= threads;\r\n    }\r\n\r\n    public void get() {\r\n        Thread t1 = threads[0], t2 = threads[1];\r\n        System.out.println(\"Ready to Get\");\r\n        synchronized (this){\r\n            System.out.println(Thread.currentThread().getName()+\" Got the lock\");\r\n\r\n            System.out.println(\"Now, \"+t1.getName()+\" is \"+t1.getState()+\", \"+t2.getName()+\" is \"+t2.getState());\r\n            System.out.println(\"notify() to release the lock after all done\");\r\n            System.out.println(\"Do sth. before notify is just the same as after\");\r\n            notify();\r\n            System.out.println(\"Do sth. after notify is just the same as before\");\r\n            System.out.println(Thread.currentThread().getName()+\" is done.\");\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Thread[] threads = new Thread[2];\r\n        CompetingThread competingThread = new CompetingThread(threads);\r\n        threads[0] = new Thread(()->competingThread.get());\r\n        threads[1] = new Thread(()->competingThread.get());\r\n        threads[0].start();\r\n        threads[1].start();\r\n    }\r\n}\r\n\r\n```\r\n\r\n输出\r\n\r\n```text\r\n//output\r\n\r\nReady to Get\r\nReady to Get\r\nThread-0 Got the lock\r\nNow, Thread-0 is RUNNABLE, Thread-1 is BLOCKED\r\nnotify() to release the lock after all done\r\nDo sth. before notify is just the same as after\r\nDo sth. after notify is just the same as before\r\nThread-0 is done.\r\nThread-1 Got the lock\r\nNow, Thread-0 is TERMINATED, Thread-1 is RUNNABLE\r\nnotify() to release the lock after all done\r\nDo sth. before notify is just the same as after\r\nDo sth. after notify is just the same as before\r\nThread-1 is done.\r\n```\r\n模拟使用wait和notify(notifyAll)的场景：顾客在餐厅点餐，服务员等候（BLOCKING），点餐完毕，顾客等候上菜（wait()），服务员上菜，告知顾客菜来了（notify()）\r\n```java\r\npublic class WaitNotifyExample {\r\n    public static Object menu = new Object();\r\n\r\n    public static void main(String[] args) {\r\n        Thread customer = new Thread() {\r\n            @Override\r\n            public void run() {\r\n                synchronized (menu) {\r\n                    System.out.println(\"Customer: I'm reading menu, please wait\");\r\n                    try {\r\n                        Thread.sleep(1000);\r\n                        System.out.println(\"Customer: These are my orders.(waiting for the meal)\");\r\n                        menu.wait();\r\n                    }catch (InterruptedException e){}\r\n                    System.out.println(\"Customer: Oh, these are my foods!\");\r\n                }\r\n            }\r\n        };\r\n\r\n        Thread waiter = new Thread(){\r\n            @Override\r\n            public void run(){\r\n                System.out.println(\"Waiter: (Waiting for customer's orders)\");\r\n                synchronized (menu){\r\n                    System.out.println(\"Waiter: Gonna prepare you meal, sir.\");\r\n                    try {\r\n                        Thread.sleep(1000);\r\n                        menu.notify();//notifyAll if there are more than 1 customer\r\n                        System.out.println(\"Waiter: Your foods are ready.\");\r\n                    }catch (InterruptedException e){}\r\n                }\r\n            }\r\n        };\r\n\r\n        customer.start();\r\n        waiter.start();\r\n    }\r\n}\r\n```\r\n输出\r\n```text\r\n//output\r\n\r\nCustomer: I'm reading menu, please wait\r\nWaiter: (Waiting for customer's orders)\r\nCustomer: These are my orders.(waiting for the meal)\r\nWaiter: Gonna prepare you meal, sir.\r\nWaiter: Your foods are ready.\r\nCustomer: Oh, these are my foods!\r\n\r\n```\r\n\r\n### CountDownLatch\r\n一个线程安全的倒计时器，在倒计时为0前，令线程等待（getState()：WAITING）\r\n\r\n使用步骤：\r\n- 构造一个容量为10的倒计时器 `CountDownLatch latch = new CountDownLatch(10)`\r\n- 主线程中调用`latch.await()`，等待相关线程进行倒计时\r\n- 不同的线程中调用该倒计时器实例的`latch.countDown()`方法，进行倒计时\r\n- 当latch的倒计时为0时，主线程恢复运行\r\n\r\n### ReentrantLock\r\nReentrantLock(Re-entrantLock)是一个基于AQS（AbstractQueuedSynchronizer）高性能工具，支持线程在未释放锁的情况下重复获取锁\r\n#### API\r\n方法 | 解释\r\n---|---\r\nlock | holdCount+1，并给当前线程加锁\r\nunlock | holdCount-1，holdCount为0时，释放资源\r\ntryLock | 如果资源锁不在其他线程中，返回true，holdCount+1，否则返回false，不过线程并不会阻塞\r\nlockInterruptibly() | 锁空闲的情况下正常获取，但是允许被其他线程的请求中断\r\ngetHoldCount | 获取holdCount，注意如果持有锁的不是本线程，则直接返回0\r\n\r\n#### 原理概述\r\nReentrantLock的可重入功能基于AQS的同步状态：state（可通过getHoldCount获取）。当某一线程获取锁后，holdCount+1，并记录下当前持有锁的线程，再有线程来获取锁时，判断这个线程与持有锁的线程是否是同一个线程，如果是，holdCount+1，如果不是，阻塞线程。\r\n当线程释放锁时，holdCount-1，holdCount为0时，唤醒其他线程，使其重新竞争锁。\r\n\r\n#### 解决问题\r\n\r\n- 解决synchronized在竞争激烈场景下的性能问题\r\n>在锁竞争不激烈的时候，多数情况下锁会停留在偏向锁和轻量级锁阶段,这两个阶段下，synchronized性能很好，但当存在大量线程竞争锁时，可能会膨胀为重量级锁，性能下降，ReentrantLock的性能会优于synchronized。不过在JDK1.6之后，synchronized进行了优化，大多数场景下性能与ReentrantLock所差无几\r\n\r\n- 填补其他synchronized的缺陷\r\n>一旦线程卡在等待锁的阶段，就有可能出现死锁\r\n\r\n>不可响应中断\r\n\r\n>不能尝试获取锁\r\n\r\n#### ReentrantLock VS synchronized\r\n>对多线程操作支持情况和实现方式（如果支持的话）\r\n\r\n项目\\锁 | synchronized | \tReentrantLock\r\n---|---|---\r\n公平性|只支持非公平锁 | 支持公平锁和非公平锁\r\n是否支持尝试获取锁|不支持|支持 tryLock(time, TimeUnit)\r\n是否可响应中断|不支持|支持 lockInterruptibly\r\n等待条件|支持 notify wait | 支持 Condition\r\n\r\n\r\n#### ReentrantLock Example\r\ntryLock，lock，lockInterruptibly的对比测试，runnableWork是一个耗时操作，目的是让线程状态保持在RUNNABLE\r\n```java\r\npublic class ReentrantLockAPI {\r\n    public static void runnableWork(){\r\n        for (int i = 0; i < 1000; i++) {\r\n            for (int j = 0; j < 1000; j++) {\r\n                for (int k = 0; k < 1000; k++) {\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void lockInterruptibly_tryLock_API(){\r\n        final ReentrantLock lock = new ReentrantLock();\r\n        Thread interruptibleThread = new Thread(()->{\r\n            try {\r\n                runnableWork();\r\n                lock.lockInterruptibly();\r\n                System.out.println(\"ReentrantLock is locked by  \"+Thread.currentThread().getName());\r\n            }catch (InterruptedException e){\r\n                System.out.println(Thread.currentThread().getName()+\" was interrupted while getting lock\");\r\n            }finally {\r\n                if(lock.isHeldByCurrentThread()) {\r\n                    System.out.println(\"ReentrantLock is released by  \"+Thread.currentThread().getName());\r\n                    lock.unlock();\r\n                }\r\n            }\r\n        });\r\n\r\n        Thread uninterruptibleThread = new Thread(()->{\r\n            System.out.println(\"ReentrantLock is locked by  \"+Thread.currentThread().getName());\r\n            try {\r\n                runnableWork();\r\n                lock.lock();\r\n            }catch (Exception e){\r\n                System.out.println(Thread.currentThread().getName()+\" was interrupted.\");\r\n            }finally {\r\n                System.out.println(\"ReentrantLock is released by  \"+Thread.currentThread().getName());\r\n                lock.unlock();\r\n            }\r\n        });\r\n\r\n        Thread interruptThread = new Thread(()->{\r\n            //uninterruptibleThread.interrupt();\r\n            interruptibleThread.interrupt();\r\n        });\r\n\r\n        interruptibleThread.start();\r\n//      uninterruptibleThread.start();\r\n        interruptThread.start();\r\n    }\r\n\r\n    public static void lock_tryLock_API(){\r\n        ReentrantLock lock = new ReentrantLock();\r\n        Thread t1 = new Thread(()->{\r\n            System.out.println(\"ReentrantLock is locked by  \"+Thread.currentThread().getName());\r\n            lock.lock();\r\n            try {\r\n                Thread.sleep(1000);\r\n            }catch (Exception e){}\r\n            System.out.println(\"ReentrantLock is released by  \"+Thread.currentThread().getName());\r\n            lock.unlock();\r\n        });\r\n\r\n        Thread t2 = new Thread(()->{\r\n            try {\r\n                System.out.println(\"Try to get the lock, if not, wait for sometime\");\r\n                boolean res = lock.tryLock(500l, TimeUnit.MILLISECONDS);//if timeout >1000, result will be true, because t1 released the lock after 1000ms\r\n                System.out.println(\"tryLock returns: \"+res+\" ,and \"+Thread.currentThread().getName()+\" is \"+Thread.currentThread().getState());\r\n            } catch (InterruptedException e) { }\r\n        });\r\n\r\n        t1.start();\r\n        t2.start();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        lock_tryLock_API();\r\n        lockInterruptibly_tryLock_API();\r\n    }\r\n}\r\n\r\n```\r\n\r\n>lockInterruptibly_tryLock_API\r\n\r\n尝试打断interruptibleThread，输出如下\r\n```java\r\n//output when interrupt interruptibleThread thread\r\n\r\nThread-0 was interrupted while getting lock\r\n```\r\n\r\n尝试打断uninterruptibleThread，输出如下\r\n```java\r\n//output when interrupt uninterruptibleThread thread\r\n\r\nReentrantLock is locked by  Thread-1\r\nReentrantLock is released by  Thread-1\r\n```\r\n>lock_tryLock_API\r\n\r\n调整tryLock的时间，可以观察到给定足够尝试时间的情况下才能获取到锁\r\n```java\r\n//output when tryLock time is NOT enough\r\n\r\nTry to get the lock, if not, wait for sometime\r\nReentrantLock is locked by  Thread-0\r\ntryLock returns: false ,and Thread-1 is RUNNABLE\r\nReentrantLock is released by  Thread-0\r\n\r\n//output when tryLock time is enough\r\nReentrantLock is locked by  Thread-0\r\nTry to get the lock, if not, wait for sometime\r\nReentrantLock is released by  Thread-0\r\ntryLock returns: true ,and Thread-1 is RUNNABLE\r\n\r\n```\r\n使用tryLock解决死锁问题\r\n\r\n一个典型的死锁案例，两个对象锁分别被两个线程持有，两个线程经过一段时间后各请求对方所持有的锁，自然就产生了死锁\r\n```\r\npublic class DeadLock {\r\n\r\n    public static final Object lock1 = new Object();\r\n    public static final Object lock2 = new Object();\r\n\r\n    public static void main(String[] a) {\r\n        Thread t1 = new Thread1();\r\n        Thread t2 = new Thread2();\r\n        t1.start();\r\n        t2.start();\r\n    }\r\n\r\n    private static class Thread1 extends Thread {\r\n\r\n        public void run() {\r\n            synchronized (lock1) {\r\n                try {\r\n                    Thread.sleep(10);\r\n                } catch (InterruptedException ignored) {}\r\n                synchronized (lock2) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static class Thread2 extends Thread {\r\n\r\n        public void run() {\r\n            synchronized (lock2) {\r\n                try {\r\n                    Thread.sleep(10);\r\n                } catch (InterruptedException ignored) {}\r\n                synchronized (lock1) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n使用tryLock解决，我们的目的是使两个线程都能获取到两个锁，并且分别处理，那么我们可以把获取锁写在一个逻辑里\r\n```\r\npublic class DeadLock {\r\n\r\n    public static final ReentrantLock reentrantLock1 = new ReentrantLock();\r\n    public static final ReentrantLock reentrantLock2 = new ReentrantLock();\r\n\r\n    private static boolean getLocks(long milliseconds){\r\n        boolean getLock1 = false, getLock2 = false;\r\n        try{\r\n            getLock1 = reentrantLock1.tryLock(milliseconds, TimeUnit.MILLISECONDS);\r\n            getLock2 = reentrantLock2.tryLock(milliseconds,TimeUnit.MILLISECONDS);\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        } finally {\r\n            if(getLock1 && getLock2) return true;\r\n            else if(getLock1) reentrantLock1.unlock();\r\n            else if(getLock2) reentrantLock2.unlock();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        Thread t1 = new Thread1();\r\n        Thread t2 = new Thread2();\r\n        t1.start();\r\n        t2.start();\r\n    }\r\n\r\n    private static class Thread1 extends Thread {\r\n        public void run() {\r\n            boolean res = getLocks(1000);\r\n            if(res){\r\n                System.out.println(Thread.currentThread().getName()+\" Got lock1?\"+reentrantLock1.isHeldByCurrentThread());\r\n                System.out.println(Thread.currentThread().getName()+\" Got lock2?\"+reentrantLock2.isHeldByCurrentThread());\r\n                try{\r\n                    //..do sth. with locked resources\r\n                    Thread.sleep(100);\r\n                }catch (Exception e){\r\n                   e.printStackTrace();\r\n                } finally {\r\n                    reentrantLock1.unlock();\r\n                    reentrantLock2.unlock();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static class Thread2 extends Thread {\r\n        public void run() {\r\n            boolean res = getLocks(1000);\r\n            if(res){\r\n                System.out.println(Thread.currentThread().getName()+\" Got lock1?\"+reentrantLock1.isHeldByCurrentThread());\r\n                System.out.println(Thread.currentThread().getName()+\" Got lock2?\"+reentrantLock2.isHeldByCurrentThread());\r\n                try{\r\n                    //..do other things. with locked resources\r\n                    Thread.sleep(100);\r\n                }catch (Exception e){\r\n                    e.printStackTrace();\r\n                } finally {\r\n                    reentrantLock1.unlock();\r\n                    reentrantLock2.unlock();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n我们模拟两个线程，可以看到输出中，两个线程分别获得了两个锁，从而解决了死锁的问题\r\n```\r\n//output\r\n\r\nThread-1 Got lock1?true\r\nThread-1 Got lock2?true\r\nThread-0 Got lock1?true\r\nThread-0 Got lock2?true\r\n```\r\n\r\n### Condition\r\nCondition对应一个ReentrantLock，在调用时，要求线程持有该ReentrantLock的锁，我们看下Condition类的实例方法：\r\n\r\n#### API\r\n方法名 | 参数 | 返回\r\n---|---|---\r\nawait||void\r\nawaitUninterruptibly||void\r\nawaitNanos|long|void\r\nawait|long,TimeUnit|boolean\r\nawaitUntil|Date|boolean\r\nsignal||void\r\nsignalAll||void\r\n可以看到，实际上主要实现了await和signal这两个功能，await和Object.await类似，给定等待时间，直到被通知，signal和notify类似，signal()唤醒等待在该Condition的线程，signalAll()唤醒所有等待在该Condition的线程\r\n\r\n#### ReentrantLock Condition Example\r\n两个方法分别对应两个示例\r\n\r\n第一个示例中，一个线程通过condition.signalAll唤醒另一个线程，相应的输出和使用方法与synchronized下的Object.notify，Object.await完全一致\r\n\r\n第二个示例中，前3个线程对应一个锁的ConditionA，后3个线程对应同一个锁的ConditionB，最后一个线程唤醒前3个线程，后3个线程在等待时间截止后自动执行，从而实现了线程的分组控制\r\n```java\r\npublic class ReentrantLockConditionAPI {\r\n    public static void singleConditionForThreads(){\r\n        ReentrantLock lock = new ReentrantLock();\r\n        Condition condition = lock.newCondition();\r\n        Thread t1 = new Thread(){\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    lock.lock();\r\n                    System.out.println(Thread.currentThread().getName()+\" work for 1 second\");\r\n                    Thread.sleep(1000);\r\n                    condition.await();//Must between lock() and unlock()\r\n                    System.out.println(\"Finished, start to wait\");\r\n                    System.out.println(Thread.currentThread().getName()+\" another work for 1 second\");\r\n                    Thread.sleep(1000);\r\n                }catch (Exception e){\r\n                    e.printStackTrace();\r\n                }finally {\r\n                    System.out.println(Thread.currentThread().getName() + \" finished\");\r\n                    lock.unlock();\r\n                }\r\n            }\r\n        };\r\n\r\n        Thread t2 = new Thread(){\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    Thread.sleep(100);\r\n                    lock.lock();\r\n                    System.out.println(Thread.currentThread().getName()+\" got the lock\");\r\n                    condition.signalAll();\r\n                }catch (Exception e){\r\n                    e.printStackTrace();\r\n                }finally {\r\n                    System.out.println(Thread.currentThread().getName()+\" finished\");\r\n                    lock.unlock();\r\n                }\r\n            }\r\n        };\r\n\r\n        t1.start();\r\n        t2.start();\r\n    }\r\n\r\n    public static void multipleConditionForThreadGroups(){\r\n        ReentrantLock lock = new ReentrantLock();\r\n        Condition conditionA = lock.newCondition();\r\n        Condition conditionB = lock.newCondition();\r\n\r\n        ExecutorService executorService = Executors.newFixedThreadPool(7);\r\n\r\n        //conditionA\r\n        for (int i = 0; i < 3; i++) {\r\n            executorService.submit(new Thread(){\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        lock.lock();\r\n                        conditionA.await(2000,TimeUnit.MILLISECONDS);\r\n                        System.out.println(Thread.currentThread().getName()+\" got the lock again\");\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }finally {\r\n                        lock.unlock();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        //conditionB\r\n        for (int i = 0; i < 3; i++) {\r\n            executorService.submit(new Thread(){\r\n                @Override\r\n                public void run() {\r\n                    lock.lock();\r\n                    try {\r\n                        conditionB.await(2000, TimeUnit.MILLISECONDS);\r\n                        System.out.println(Thread.currentThread().getName()+\" got the lock again\");\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }finally {\r\n                        lock.unlock();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        executorService.submit(new Thread(){\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    Thread.sleep(1000);\r\n                    lock.lock();\r\n                    conditionA.signalAll();\r\n                    System.out.println(Thread.currentThread().getName()+\" signalAll conditionA threads\");\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }finally {\r\n                    lock.unlock();\r\n                }\r\n            }\r\n        });\r\n\r\n        executorService.shutdown();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        singleConditionForThreads();\r\n        multipleConditionForThreadGroups();\r\n    }\r\n}\r\n```\r\n\r\n第二个示例的输出（注意时间间隔）\r\n```java\r\n//output\r\npool-1-thread-7 signalAll conditionA threads\r\npool-1-thread-1 got the lock again\r\npool-1-thread-2 got the lock again\r\npool-1-thread-3 got the lock again\r\npool-1-thread-4 got the lock again\r\npool-1-thread-5 got the lock again\r\npool-1-thread-6 got the lock again\r\n```\r\n### Semaphore\r\nSemaphore提供了信号量机制，作为mutex（互斥量）与ReentrantLock类似，不同的是，ReentrantLock中的Condition要求线程必须持有锁，并且一个锁只能被一个线程持有，而Semaphore允许多线程访问同一资源。当Semaphore不允许访问资源时，线程会被阻塞直到可以获取permit\r\n\r\n### API\r\n方法 | 解释\r\n---|---\r\nSemaphore(int permits, boolean fair) | 构造方法，两个参数分别表示permit数量，是否公平锁，默认非公平锁\r\nacquire()|获取permit，否则阻塞直到可以获取\r\nrelease()|释放permit，注意这里可以超过构造方法中允许的permit数量，也就是可以不用acquire直接release\r\navailablePermits()|查看目前可用的permit\r\ndrainPermits()|把permit置0，返回所有permit的数量\r\n\r\n#### 与其他锁机制的对比\r\nSemaphore不关心获取锁和释放锁的对象，并且允许多线程同时访问同一资源，acquire和release只是发放和收回permit（许可），是一种相对高级的同步机制\r\n\r\n#### Semaphore Example\r\n因为是高级API，所以没啥特别的，示例中一个容量为5的信号量跑20个线程，可以防止死锁，互斥执行\r\n```java\r\npublic class SemaphoreAPI {\r\n    public static void main(String[] args) {\r\n        Semaphore semaphore = new Semaphore(5);\r\n        ExecutorService executorService = Executors.newFixedThreadPool(20);\r\n        for (int i = 0; i < 20; i++) {\r\n            executorService.submit(()->{\r\n                try {\r\n                    semaphore.acquire();\r\n                    System.out.println(Thread.currentThread().getName()+\" is doing some work\");\r\n                    Thread.sleep(1000);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }finally {\r\n                    semaphore.release();\r\n                }\r\n            });\r\n        }\r\n        executorService.shutdown();\r\n    }\r\n}\r\n```\r\n\r\n### refs\r\nhttps://juejin.im/post/5ce91cedf265da1bca51b78a\r\nhttps://stackoverflow.com/questions/17683575/binary-semaphore-vs-a-reentrantlock\r\nhttps://www.geeksforgeeks.org/reentrant-lock-java/","frontmatter":{"abstract":"Java 多线程工具类 简介，包括 notify wait, CountDownLatch, ReentranceLock 等方法的功能和模拟","draft":null,"title":"Java Multi Thread Utils","tags":["中文","Java","multi thread","java util","jdk"],"cover":"https://unsplash.it/1152/300/?random?SuperLong","date":"2019/07/07"}}},{"node":{"fields":{"slug":"/algorithm/largest-component-size-by-common-factor","date":"2019-06-15T04:00:00.000Z"},"excerpt":"问题 无向图中，顶点是数字，两个数字的最大公因子大于1时有边，求连通分量 思路 不能直接dfs，考虑接近dfs的另一种算法，并查集\n当然，如果直接把数据放在并查集里，并不会降低时间复杂度（实质上依然是两两比较，O(log2(n)*n^…","timeToRead":3,"rawMarkdownBody":"### 问题\r\n无向图中，顶点是数字，两个数字的最大公因子大于1时有边，求连通分量\r\n\r\n\r\n### 思路\r\n不能直接dfs，考虑接近dfs的另一种算法，并查集\r\n当然，如果直接把数据放在并查集里，并不会降低时间复杂度（实质上依然是两两比较，O(log2(n)*n^2)）\r\n对于降低时间复杂度的办法，我们从题目的特性出发，如果两数之间有大于1的公因数，那么他们在同一个连通子图内\r\n\r\n也就是说，只要这个数有2这个因子，就直接往2的连通子图的union find根节点权值上加1就行了，完全不需要把这个数和其余的所有偶数一一比较，他们肯定在同一个连同子图下面\r\n\r\n换句话说，为了求连通分量的最大值，我们不需要画出整个图，只需要画出关键部位就行\r\n![需要这样吗](https://upload-images.jianshu.io/upload_images/4655525-6372a4641804b41c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n![不需要](https://upload-images.jianshu.io/upload_images/4655525-bb2f27424448da68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n并查集的写法也注意一下，加权并查集在时间效率上会高很多\r\n\r\n```java\r\nimport java.util.*;\r\nimport java.util.stream.*;\r\nimport java.math.*;\r\n\r\npublic class Solution {\r\n\r\n    //并查集\r\n    int MAX=100000;\r\n\r\n    //用不加权并查集的话，把count去掉就行，代码简单一点\r\n    int[] count=new int[MAX],find = new int[MAX];\r\n\r\n    //这个是加权并查集的方法\r\n    public int count(int a){\r\n        return count[find(a)];\r\n    }\r\n\r\n    public int find(int a){\r\n        while(find[a]!=a)a=find[a];\r\n        return a;\r\n    }\r\n\r\n    public void union(int a,int b){\r\n        a=find(a);\r\n        b=find(b);\r\n\r\n        if(a==b)return;\r\n\r\n        if(count[a]>count[b]){\r\n            count[a]+=count[b];\r\n            find[b] = a;\r\n        }else{\r\n            count[b]+=count[a];\r\n            find[a] = b;\r\n        }\r\n    }\r\n\r\n    public int largestComponentSize(int[] A) {\r\n        //初始化并查集\r\n        for (int i = 0; i < MAX; i++) {\r\n            find[i] = i;\r\n            count[i] = 1;\r\n        }\r\n\r\n        Map<Integer,Integer> factorMap = new HashMap<>();\r\n\r\n        for (int i = 0; i < A.length; i++) {\r\n            double sqrt=Math.sqrt(A[i]);\r\n            for (int j = 2; j <=sqrt; j++) {\r\n                if(A[i] % j==0){\r\n                    unionMap(factorMap,j,i);\r\n                    unionMap(factorMap,A[i]/j,i);\r\n                }\r\n            }\r\n\r\n            unionMap(factorMap,A[i],i);\r\n        }\r\n\r\n        int max = 1;\r\n\r\n        for (int i = 0; i < A.length; i++) {\r\n            max = Math.max(max,count(i));\r\n        }\r\n\r\n        return max;\r\n    }\r\n\r\n    public void unionMap(Map<Integer,Integer> factorMap,int factor,int cur){\r\n        if(factorMap.containsKey(factor)){\r\n            union(factorMap.get(factor),cur);\r\n        }else{\r\n            factorMap.put(factor,cur);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Tips\r\n- 这是Contest 113里的最后一题\r\n- 加权并查集在很多情况下其实本来就比并查集效率要高，这题不管从什么方面考虑，都应该使用加权并查集\r\n- 循环因数的时候可以顺便判断一下这个数是不是质数，不过没必要（if (isPrime) unionMap(factorMap,A[i],i);）","frontmatter":{"abstract":"无向图中，顶点是数字，两个数字的最大公因子大于1时有边，求连通分量","draft":null,"title":"Largest Component Size By Common Factor","tags":["中文","algorithm","graph"],"cover":"","date":"2019/6/15"}}},{"node":{"fields":{"slug":"/algorithm/champagne-tower","date":"2019-06-10T04:00:00.000Z"},"excerpt":"Champagne Tower 问题 从一个香槟塔的顶端注入香槟，给出注入香槟的数量，求具体位置上的杯子中香槟的量 解决 模拟注入过程，这里其实如果忽略题中给出的众多条件和状态，反而更容易求解 queryrow 和 queryglass…","timeToRead":1,"rawMarkdownBody":"\r\n[Champagne Tower](https://leetcode.com/articles/champagne-tower/)\r\n### 问题\r\n从一个香槟塔的顶端注入香槟，给出注入香槟的数量，求具体位置上的杯子中香槟的量\r\n### 解决\r\n- 模拟注入过程，这里其实如果忽略题中给出的众多条件和状态，反而更容易求解\r\n- query_row 和 query_glass 的范围并不大，如果用二维数组模拟，可以做到O1的空间复杂度\r\n- 其实整个过程中，已注满香槟的杯子不会对之后的杯子产生影响，这里可以想到直接在题设的条件内层级遍历\r\n### Tips\r\n- 这里二维数组的长度其实可以是100，并不是102","frontmatter":{"abstract":"从一个香槟塔的顶端注入香槟，给出注入香槟的数量，求具体位置上的杯子中香槟的量","draft":null,"title":"Champagne Tower","tags":["中文","algorithm","simulate"],"cover":"","date":"2019/6/10"}}},{"node":{"fields":{"slug":"/algorithm/check-completeness-of-a-binary-tree","date":"2019-03-10T05:00:00.000Z"},"excerpt":"问题 判断一棵树是否是完全二叉树 思路 观察测试数据\n1,2,3,4,5,6 1,2,3,4,5,null,7 1,2,3,4,5,null…","timeToRead":2,"rawMarkdownBody":"### 问题\r\n判断一棵树是否是完全二叉树\r\n### 思路\r\n观察测试数据\r\n[1,2,3,4,5,6]\r\n\r\n[1,2,3,4,5,null,7]\r\n\r\n[1,2,3,4,5,null]\r\n从给的测试数据可以看出，只要是连续的数字中间没有空，或者只在最后有空，那么就是完全二叉树。所以可以给节点编号，再看看编号有没有按序排列\r\n\r\n### 解决\r\n```\r\n    public boolean isCompleteTree(TreeNode root) {\r\n        Map<Integer,TreeNode> map = new HashMap<>();\r\n        codeTree(root,map,1);\r\n        List<Integer> list = map.keySet().stream().sorted().collect(Collectors.toList());\r\n        for (int i = 1; i < list.size(); i++) {\r\n            if(list.get(i)-1!=list.get(i-1))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void codeTree(TreeNode root,Map<Integer,TreeNode> map,Integer code){\r\n         map.put(code,root);\r\n         if(root.left!=null){\r\n             codeTree(root.left,map,code*2);\r\n         }\r\n\r\n        if(root.left!=null){\r\n            codeTree(root.right,map,code*2+1);\r\n        }\r\n    }\r\n```\r\n\r\n### 思路\r\n继续看所给的测试数据，考虑到这种形式是对完全二叉树进行层次遍历得来的，所以按照层次遍历后，只要空节点是连续的，那就是完全二叉树\r\n\r\n### 解决\r\n```\r\n    public boolean isCompleteTree(TreeNode root) {\r\n        Queue<TreeNode> queue = new LinkedList();\r\n        queue.offer(root);\r\n        while(queue.peek()!=null){\r\n            TreeNode node = queue.poll();\r\n            queue.offer(node.left);\r\n            queue.offer(node.right);\r\n        }\r\n\r\n        while(!queue.isEmpty()){\r\n            if(queue.poll()!=null)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n```","frontmatter":{"abstract":"判断一棵树是否是完全二叉树","draft":null,"title":"Check Completeness Of A Binary Tree","tags":["中文","algorithm","tree"],"cover":"","date":"2019/3/10"}}},{"node":{"fields":{"slug":"/algorithm/majority-element","date":"2019-03-08T05:00:00.000Z"},"excerpt":"问题： 给定一个n元素数组，求出现次数最大的元素（即Majority Element），并且数组保证该元素出现的次数一定大于⌊ n/2 ⌋ 思路： 空间复杂度大于O(1)或者时间复杂度大于O(n)的就不给了，介绍一个空间O(1)时间O(n)的算法 对于数组an…","timeToRead":3,"rawMarkdownBody":"### 问题：\r\n给定一个n元素数组，求出现次数最大的元素（即Majority Element），并且数组保证该元素出现的次数一定大于⌊ n/2 ⌋\r\n\r\n### 思路：\r\n空间复杂度大于O(1)或者时间复杂度大于O(n)的就不给了，介绍一个空间O(1)时间O(n)的算法\r\n\r\n对于数组an，注意到Majority Element的数量一定大于⌊ n/2 ⌋，那么任意选取一个位置ai，如果[a0...ai]内不存在这样的元素，(ai...an]内一定存在这样的元素，显然这个元素也一定是Majority Element\r\n\r\n证明：反证法，假设数字n的频数是P(n)，如果前后都不存在这样的元素，那么Pmax(a1-ai)<=⌊ (i+1)/2 ⌋，Pmax(ai-an)<=⌊ (n-i)/2 ⌋，即使两个数字都是n，我们也有 Pn=Pmax(a1-ai)+Pmax(ai-an)<=⌊ n/2 ⌋，与Majority Element的频数大于⌊ n/2 ⌋矛盾，两个数字都不同的情况显然也是矛盾的\r\n\r\n接下来就是dp的思路，首先[a0]内的Majority Element就是a0\r\n对于位置i，通过判断ai是否是当前Majority Element来修改其频数P，那么这样会有三种情况：\r\n1) ai=Majority Element\r\n2) ai≠Majority Element，且P仍然>⌊ i/2 ⌋\r\n3) ai≠Majority Element，且使得P<=⌊ i/2 ⌋\r\n\r\n对于1和2，Majority Element不变，对于3，[a0,ai]内Majority Element就不存在了，只有到i+1时，Majority Element才会等于a(i+1)，不过根据题意，这个元素一定存在，也就是说，第三种情况其实就相当于Majority Element=a(i+1)\r\n\r\n综上所述，各种情况下都能获得该位置所对应的Majority Element，该dp算法是正确的\r\n\r\n### 解决：\r\n```java\r\npublic class Solution {\r\n    public int majorityElement(int[] num) {\r\n\r\n        int major=num[0], count = 1;\r\n        for(int i=1; i<num.length;i++){\r\n            if(count==0){\r\n                count++;\r\n                major=num[i];\r\n            }else if(major==num[i]){\r\n                count++;\r\n            }else count--;\r\n            \r\n        }\r\n        return major;\r\n    }\r\n}\r\n```\r\n### Tips\r\n- 这个算法是 Boyer–Moore 投票算法，能独立想出来很厉害了\r\n- 这个元素出现的次数大于一半这个条件要注意，面试的时候没有这个条件不要装逼说这个算法\r\n>https://leetcode.com/problems/majority-element/\r\n>https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\r\n\r\n","frontmatter":{"abstract":"给定一个n元素数组，求出现次数最大的元素（即Majority Element）","draft":null,"title":"Majority Element","tags":["中文","algorithm","array","linear time"],"cover":"","date":"2019/3/8"}}},{"node":{"fields":{"slug":"/algorithm/longest-palindrome-substring","date":"2019-03-04T05:00:00.000Z"},"excerpt":"问题 求最长回文子串 思路 如果考虑O(n)的动态规划，比如用f(i)来代表以当前位置为结尾的回文子串的最大长度，会遇到一个问题，就是说f(i)不仅仅取决于f(i-1)，有可能取决于i-1位置上回文子串的次最大长度等等。比如这个字符串 bananas，下标i从0开始的话，f(…","timeToRead":4,"rawMarkdownBody":"### 问题\r\n求最长回文子串\r\n\r\n### 思路\r\n如果考虑O(n)的动态规划，比如用f(i)来代表以当前位置为结尾的回文子串的最大长度，会遇到一个问题，就是说f(i)不仅仅取决于f(i-1)，有可能取决于i-1位置上回文子串的次最大长度等等。比如这个字符串 bananas，下标i从0开始的话，f(3)=3，但是因为f(3)是在1(\"a\")和3(\"ana\")中取的最大长度，舍弃了1(\"a\")，所以只是通过f(3)=3来判断的话，会发现f(4)无法延续这一回文串，从而得出f(4)=1的错误结果。其实f(4)延长了f(3)的次长回文子串，故f(4)=1+2=3\r\n\r\n- 思路1：\r\n那么先不考虑O(n)的动态规划，我们考虑O(n^2)的动态规划，自顶向下分析，f(i,j)表示s(i,j)子串是否是回文，那么显然有\r\nf(i,j) = true (i>=j)\r\nf(i,j) = true (f(i+1,j-1) and s(i)==s(j))\r\n此时自底向上遍历即可\r\n\r\n- 思路2\r\n再考虑记忆化搜索，f(i,j)定义为s(i,j)内最大回文子串长度，有递推式\r\nf(i,j)就是当前位置的子串长度\r\nf(i,j) = j-i+1 if (i >= j-1 and s(i)==s(j)) \r\nf(i,j) = j-i+1 if (s(i)==s(j) &&f(i+1,j-1)==s(i+1,j-1))\r\n记忆化搜索\r\nf(i,j) = max(f(i+1)(j-1),f(i)(j-1),f(i+1)(j))\r\n这里注意两点，首先如果把f(i,j)直接定义成子串，思路和时间复杂度都是正确的，但是会TLE。。。其次只有f(i,j)是当前位置子串时才会更新结果，所以其实最长回文子串长度的代码和最长回文子串的代码只相差几行~\r\n\r\n### 代码\r\n- dp\r\n```\r\n    public String longestPalindrome(String s) {\r\n        if(s==null || s.length()==0) return \"\";\r\n        int dp[][] = new int[s.length()][s.length()];\r\n\r\n        for (int i = 0; i < s.length(); i++) {\r\n            for (int j = 0; j+i < s.length(); j++) {\r\n                dp[j][j+i] = dp[j][j+i]!=0?dp[j][j+i]:(isPalindrome(s,j,j+i,dp)?2:1);\r\n            }\r\n        }\r\n\r\n        int max = 0;\r\n        String res = \"\";\r\n\r\n        for (int i = 0; i < s.length(); i++) {\r\n            for (int j = i; j < s.length(); j++) {\r\n                if(dp[i][j]==2 && j-i+1>max){\r\n                    max = j-i;\r\n                    res = s.substring(i,j+1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    public boolean isPalindrome(String s, int start, int end, int dp[][]){\r\n        if (dp[start][end]>0) return dp[start][end]==2;\r\n        if(end-start<=1) return s.charAt(start)==s.charAt(end);\r\n        return isPalindrome(s,start+1,end-1,dp) && s.charAt(start)==s.charAt(end);\r\n    }\r\n```\r\n- 记忆化搜索\r\n```java\r\n    public String longestPalindrome(String s){\r\n        if(s==null || s.length()==0) return \"\";\r\n\r\n        int dp[][] = new int[s.length()][s.length()];\r\n        String res=\"\";\r\n        int max = 0;\r\n\r\n        for (int i = s.length()-1; i>=0;i--) {\r\n            for (int j = i; j < s.length(); j++) {\r\n                if(s.charAt(i)==s.charAt(j)){\r\n                    if(j-i>1 && dp[i+1][j-1]==j-i-1) {\r\n                        dp[i][j] = 2 + dp[i + 1][j - 1];\r\n                        if(dp[i][j]>max){max=dp[i][j];res = s.substring(i,j+1);}\r\n                    }\r\n                    else if(j-i<=1){\r\n                        dp[i][j] = j-i+1;\r\n                        if(dp[i][j]>max){max=dp[i][j];res = s.substring(i,j+1);}\r\n                    }\r\n                }\r\n\r\n                if(j>0 && i<s.length()-1)\r\n                    dp[i][j] = max(dp[i][j],dp[i][j-1],dp[i+1][j],dp[i+1][j-1]);\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n```\r\n### Ref\r\n[https://leetcode.com/problems/longest-palindromic-substring/](https://leetcode.com/problems/longest-palindromic-substring/)\r\n[https://tarokuriyama.com/projects/palindrome2.php](https://tarokuriyama.com/projects/palindrome2.php)\r\n\r\n","frontmatter":{"abstract":"求最长回文子串","draft":null,"title":"Longest Palindrome Substring","tags":["中文","algorithm","string"],"cover":"","date":"2019/3/4"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"中文"}}}