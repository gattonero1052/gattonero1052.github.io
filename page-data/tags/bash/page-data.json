{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/bash/","result":{"data":{"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"fields":{"slug":"/Bash/bash-scripting-examples","date":"2020-03-17T04:00:00.000Z"},"excerpt":"Bash scripting This is a problem oriented bash scripting post. For understanding what's going on and how the code works, it's of great helpâ€¦","timeToRead":3,"rawMarkdownBody":"### Bash scripting\r\n\r\nThis is a problem oriented bash scripting post. For understanding what's going on and how the code works, it's of great help to discover and type in these code by yourself.\r\n\r\nThough the .sh file runs in Linux for most of the time, you can try all of these using git bash or WSL if you are using windows.\r\n\r\n### Remember\r\n- Do not use bash for OOP\r\n- Bash variables are UNTYPED and does not support float point calculation itself\r\n- Variable declaration is not necessary\r\n\r\n\r\n### A+B Problem\r\n- Include shebang on top of your script file (For other problems, this is same)\r\n```bash\r\n#!/bin/bash\r\n```\r\n- read from stdin (or you can reference the parameter variables as $1 $2)\r\n\r\n```bash\r\nread -p \"A and B: \" a b\r\n```\r\n\r\n- calculation or assignment, either of these works\r\n\r\n```bash\r\n# Using let\r\nlet \"c=a+b\" # let \"c = a+b\" is right, space does not matter as long as it is wrapped by quotes\r\nlet c=a+b # let c = a+b is wrong, DO NOT add spaces around =\r\n```\r\n\r\n```bash\r\n# Using $(()) POSIX arithmethic expression\r\n\r\na=$((a+b))\r\n```\r\n\r\n```bash\r\n# Just an example of using +=\r\nlet c=0\r\n((c+=a+b)) # this is often used as ((a++)) in loops\r\n```\r\n\r\n```bash\r\n# Using expr or other preset bash scripts\r\n# DO ADD spaces between operators\r\nc=$(expr a + b)\r\n```\r\n\r\n- output\r\n\r\n```bash\r\necho $c\r\n```\r\n\r\n### Sum problem\r\n\r\n- read from stdin\r\n\r\n```bash\r\nread -p \"Sum from 1 to n\" n\r\n```\r\n- init variable\r\n\r\n```bash\r\nlet a=1\r\nlet sum=0\r\n```\r\n\r\n- loop\r\n\r\n```bash\r\n# DO include $ before variables with in conditional statements\r\n# DO ADD spaces in conditional statements like [SPACE expression SPACE]\r\n# DO ADD ; before do, or you can use\r\n#     while...\r\n#     do\r\n#     ...\r\n#     done\r\nwhile [ $a -le $n ];do\r\n\r\n# (()) is for arithmetic expression\r\n# DO NOT use $ for variable reference in (())\r\nsum=$((sum+a))\r\n\r\na=$((a+1)) # see the alternatives below\r\n\r\n# ALT ((a++))\r\n# ALT let a=\"a+1\"\r\n# ALT let a=$a+1\r\n\r\ndone\r\n```\r\n\r\n- output\r\n\r\n```bash\r\necho $sum\r\n```\r\n\r\n### Read text file\r\nAssuming the text file is like (yeah, that's part of services file)\r\n```text\r\necho                7/tcp\r\necho                7/udp\r\ndiscard             9/tcp    sink null\r\ndiscard             9/udp    sink null\r\nsystat             11/tcp    users                  #Active users\r\nsystat             11/udp    users                  #Active users\r\n```\r\nThe goal is to get only the <PORT>/<PROTOCOL> part\r\n```bash\r\ninput=\"myfile\"\r\n\r\nwhile read -r line\r\ndo\r\n\techo $line | grep -E -o \"[0-9]+/(tcp|udp)\"\r\ndone < \"$input\"\r\n```\r\n\r\nOf course a single command could have it done, but you can have more control if you use a while loop to read (for example output only the lines with odd line number)\r\n```bash\r\ngrep -E -o \"[0-9]+/(tcp|udp)\" myfile\r\n```\r\n\r\n### Refs\r\nhttps://ryanstutorials.net/bash-scripting-tutorial/\r\n\r\nhttps://unix.stackexchange.com/questions/40786/how-to-do-integer-float-calculations-in-bash-or-other-languages-frameworks","frontmatter":{"abstract":"Problem oriented bash code examples","draft":null,"title":"Bash Scripting Examples","tags":["bash"],"cover":"","date":"2020/3/17"}}}]}},"pageContext":{"tag":"bash"}},"staticQueryHashes":[]}