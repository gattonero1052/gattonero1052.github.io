{"componentChunkName":"component---src-templates-category-jsx","path":"/categories/algorithm/","result":{"data":{"allMdx":{"totalCount":14,"edges":[{"node":{"fields":{"slug":"/algorithm/calculator","date":"2021-06-22T04:00:00.000Z"},"excerpt":"https://leetcode.com/problems/basic-calculator-iii/ Problem Implement a basic calculator supporting +  - * / Parentheses () And do not need…","timeToRead":2,"frontmatter":{"title":"Calculator","tags":["calculator","algorithm","leetcode","python"],"cover":"","date":"2021/6/22"}}},{"node":{"fields":{"slug":"/algorithm/big-number-multiply","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 适用于1000位以内数的乘法 思路 注意两点： 数字是通过字符串传过来的，字符串的低位反而是数字的高位，所以我们要从数字的低位开始计算的话，必须反转字符串（当然结果也要反转） 原理就是小学乘法，竖式计算，但不需要每次都计算进位，可以统一计算 解决 Tips…","timeToRead":1,"frontmatter":{"title":"Big Number Multiply","tags":["中文","algorithm","math","string"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/find-integer-x-y-for-ax-by-c","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 求线性同余方程ax+by=c的整数解 思路 首先介绍下欧几里得算法的原理，众所周知，欧几里得算法是辗转相除法，这里给出证明： 假设a>b，证明 gcd(a,b) = gcd(a mod b,b)\n设a=bk+c，c=a mod b\n如果D=gcd(b,c)>gcd(a,b…","timeToRead":1,"frontmatter":{"title":"Find integer x,y for ax + by = c","tags":["中文","algorithm","math"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/python-implementation-of-koch-snowflake","date":"2019-10-22T04:00:00.000Z"},"excerpt":"Koch Curve（Koch Snowflake）\n https://www.geeksforgeeks.org/koch-curve-koch-snowflake/ 简介： 科赫雪花（科赫曲线）是最早发现的分形曲线之一，由瑞典科学家 Helge von Koch…","timeToRead":1,"frontmatter":{"title":"Python Implementation of Koch Snowflake","tags":["中文","algorithm","python"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/linked-list-cycle","date":"2019-10-22T04:00:00.000Z"},"excerpt":"问题 判断链表中是否有环，如果有，找出链表中环的起始节点 解决 首先找出环的话可以用快慢节点法，快节点的速度是2，慢节点是1\n因为两个节点进入环后，快节点会以2-1=…","timeToRead":1,"frontmatter":{"title":"Linked List Cycle","tags":["中文","algorithm","linkedlist"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/swim-in-rising-water","date":"2019-10-22T04:00:00.000Z"},"excerpt":"Swim in Rising Water 问题 假设方阵中每个点都标有权值，问题是求方阵中两点之间的路径中所有点权值最大值的最小值 比如2x2矩阵一共有两条路径，第一条路径中两个点权值是1,3,2最大值为3，第二条路径中两个点权值1,2,2是最大值为2，那么结果就是…","timeToRead":1,"frontmatter":{"title":"Swim in Rising Water","tags":["中文","algorithm","greedy"],"cover":"","date":"2019/10/22"}}},{"node":{"fields":{"slug":"/algorithm/combinations-and-permutations","date":"2019-10-20T04:00:00.000Z"},"excerpt":"问题 排列（Permutation）：求1,2,3...n的不同排列方式（n!） 思路 普通的排列问题，在python…","timeToRead":1,"frontmatter":{"title":"Combinations and Permutations","tags":["中文","algorithm","combination","permutation","bitwise"],"cover":"","date":"2019/10/20"}}},{"node":{"fields":{"slug":"/algorithm/reaching-points","date":"2019-10-20T04:00:00.000Z"},"excerpt":"Reaching Points 问题 如果给出一个点 (x,y)，可以选择下一个点的坐标 (x+y,y)，或者(x,x+y)，那么，给出一个起点 (sx,sy)，和终点(tx,ty)，能否通过这样的变化，从起点到达终点 解决方案 选择最快的解决方案：这里看上去是个正向dp…","timeToRead":1,"frontmatter":{"title":"Reaching Points","tags":["中文","algorithm","dynamic-programming"],"cover":"","date":"2019/10/20"}}},{"node":{"fields":{"slug":"/algorithm/max-chunks-to-make-sorted-ii","date":"2019-10-05T04:00:00.000Z"},"excerpt":"Max Chunks To Make Sorted II 问题 给定一个允许出现重复元素的数组，判断最多可以分成多少段，使得段与段之间都是有序的 解决 思路 1：多次遍历 考虑到给出的数据的范围，这里时间复杂度应该控制在O(N…","timeToRead":1,"frontmatter":{"title":"Max Chunks To Make Sorted II","tags":["中文","algorithm","array"],"cover":"","date":"2019/10/5"}}},{"node":{"fields":{"slug":"/algorithm/regular-expression-matching","date":"2019-10-05T04:00:00.000Z"},"excerpt":"Regular Expression Matching 问题 用包含*和.这两个正则符号的正则表达式来匹配字符串 解决 思路：贪心匹配+回溯，这里如果不采用贪心的方法也是可以AC…","timeToRead":1,"frontmatter":{"title":"Regular Expression Matching","tags":["中文","algorithm","string"],"cover":"","date":"2019/10/5"}}},{"node":{"fields":{"slug":"/algorithm/largest-component-size-by-common-factor","date":"2019-06-15T04:00:00.000Z"},"excerpt":"问题 无向图中，顶点是数字，两个数字的最大公因子大于1时有边，求连通分量 思路 不能直接dfs，考虑接近dfs的另一种算法，并查集\n当然，如果直接把数据放在并查集里，并不会降低时间复杂度（实质上依然是两两比较，O(log2(n)*n^…","timeToRead":1,"frontmatter":{"title":"Largest Component Size By Common Factor","tags":["中文","algorithm","graph"],"cover":"","date":"2019/6/15"}}},{"node":{"fields":{"slug":"/algorithm/champagne-tower","date":"2019-06-10T04:00:00.000Z"},"excerpt":"Champagne Tower 问题 从一个香槟塔的顶端注入香槟，给出注入香槟的数量，求具体位置上的杯子中香槟的量 解决 模拟注入过程，这里其实如果忽略题中给出的众多条件和状态，反而更容易求解 query_row 和 query_glass…","timeToRead":1,"frontmatter":{"title":"Champagne Tower","tags":["中文","algorithm","simulate"],"cover":"","date":"2019/6/10"}}},{"node":{"fields":{"slug":"/algorithm/check-completeness-of-a-binary-tree","date":"2019-03-10T05:00:00.000Z"},"excerpt":"问题 判断一棵树是否是完全二叉树 思路 观察测试数据\n 1,2,3,4,5,6 1,2,3,4,5,null,7 1,2,3,4,5,null…","timeToRead":1,"frontmatter":{"title":"Check Completeness Of A Binary Tree","tags":["中文","algorithm","tree"],"cover":"","date":"2019/3/10"}}},{"node":{"fields":{"slug":"/algorithm/longest-palindrome-substring","date":"2019-03-04T05:00:00.000Z"},"excerpt":"问题 求最长回文子串 思路 如果考虑O(n)的动态规划，比如用f(i)来代表以当前位置为结尾的回文子串的最大长度，会遇到一个问题，就是说f(i)不仅仅取决于f(i-1)，有可能取决于i-1位置上回文子串的次最大长度等等。比如这个字符串 bananas，下标i从0开始的话，f(…","timeToRead":1,"frontmatter":{"title":"Longest Palindrome Substring","tags":["中文","algorithm","string"],"cover":"","date":"2019/3/4"}}}]}},"pageContext":{"category":"algorithm"}},"staticQueryHashes":[]}